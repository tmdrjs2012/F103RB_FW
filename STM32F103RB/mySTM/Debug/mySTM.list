
mySTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  080070b8  080070b8  000170b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800768c  0800768c  0001768c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000021c  20000000  08007694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001590  2000021c  080078b0  0002021c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  200017ac  080078b0  000217ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00015635  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000038d2  00000000  00000000  0003587a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0000f77b  00000000  00000000  0003914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001328  00000000  00000000  000488c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001308  00000000  00000000  00049bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001f2e8  00000000  00000000  0004aef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021976  00000000  00000000  0006a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a5d2e  00000000  00000000  0008bb56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00131884  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000046a0  00000000  00000000  001318d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  00135f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  00136040  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000021c 	.word	0x2000021c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800709c 	.word	0x0800709c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000220 	.word	0x20000220
 800014c:	0800709c 	.word	0x0800709c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <threadMain2>:
	}

}

static void threadMain2(void const *argument)
{
 8000a9c:	b508      	push	{r3, lr}
 8000a9e:	e008      	b.n	8000ab2 <threadMain2+0x16>
		*/
		delay(20);
		PwmWrite(_DEF_PWM1, pwmValue);

		if(!toggleTrigger) pwmValue++;
		else				pwmValue--;
 8000aa0:	4911      	ldr	r1, [pc, #68]	; (8000ae8 <threadMain2+0x4c>)
 8000aa2:	680a      	ldr	r2, [r1, #0]
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	600a      	str	r2, [r1, #0]
 8000aa8:	e013      	b.n	8000ad2 <threadMain2+0x36>
		if(pwmValue >= 100)
		{
			toggleTrigger ^= 1;
 8000aaa:	f083 0301 	eor.w	r3, r3, #1
 8000aae:	4a0f      	ldr	r2, [pc, #60]	; (8000aec <threadMain2+0x50>)
 8000ab0:	7013      	strb	r3, [r2, #0]
		delay(20);
 8000ab2:	2014      	movs	r0, #20
 8000ab4:	f000 fe3b 	bl	800172e <delay>
		PwmWrite(_DEF_PWM1, pwmValue);
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <threadMain2+0x4c>)
 8000aba:	7819      	ldrb	r1, [r3, #0]
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fb75 	bl	80011ac <PwmWrite>
		if(!toggleTrigger) pwmValue++;
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <threadMain2+0x50>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1ea      	bne.n	8000aa0 <threadMain2+0x4>
 8000aca:	4907      	ldr	r1, [pc, #28]	; (8000ae8 <threadMain2+0x4c>)
 8000acc:	680a      	ldr	r2, [r1, #0]
 8000ace:	3201      	adds	r2, #1
 8000ad0:	600a      	str	r2, [r1, #0]
		if(pwmValue >= 100)
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <threadMain2+0x4c>)
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	2a63      	cmp	r2, #99	; 0x63
 8000ad8:	d8e7      	bhi.n	8000aaa <threadMain2+0xe>
		}
		else if(pwmValue <= 0)
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	d1e9      	bne.n	8000ab2 <threadMain2+0x16>
		{
			toggleTrigger ^= 1;
 8000ade:	f083 0301 	eor.w	r3, r3, #1
 8000ae2:	4a02      	ldr	r2, [pc, #8]	; (8000aec <threadMain2+0x50>)
 8000ae4:	7013      	strb	r3, [r2, #0]
 8000ae6:	e7e4      	b.n	8000ab2 <threadMain2+0x16>
 8000ae8:	20000238 	.word	0x20000238
 8000aec:	2000023c 	.word	0x2000023c

08000af0 <threadMain>:
{
 8000af0:	b508      	push	{r3, lr}
		if (UartAvailable(_DEF_UART1) > 0)
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 fc48 	bl	8001388 <UartAvailable>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d0fa      	beq.n	8000af2 <threadMain+0x2>
			CmdRead();
 8000afc:	f000 fa04 	bl	8000f08 <CmdRead>
 8000b00:	e7f7      	b.n	8000af2 <threadMain+0x2>
	...

08000b04 <appInit>:
{
 8000b04:	b530      	push	{r4, r5, lr}
 8000b06:	b08b      	sub	sp, #44	; 0x2c
	UartOpen(_DEF_UART1, 115200);
 8000b08:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fbd3 	bl	80012b8 <UartOpen>
	UartOpen(_DEF_UART2, 115200);
 8000b12:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000b16:	2001      	movs	r0, #1
 8000b18:	f000 fbce 	bl	80012b8 <UartOpen>
	CmdInit();
 8000b1c:	f000 f9dc 	bl	8000ed8 <CmdInit>
	CmdPrompt();
 8000b20:	f000 f9e0 	bl	8000ee4 <CmdPrompt>
	osThreadDef(threadMain, threadMain, _HW_DEF_RTOS_THREAD_PRI_MAIN, 0,
 8000b24:	f10d 0c14 	add.w	ip, sp, #20
 8000b28:	4c0d      	ldr	r4, [pc, #52]	; (8000b60 <appInit+0x5c>)
 8000b2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	f8cc 3000 	str.w	r3, [ip]
	if(osThreadCreate(osThread(threadMain), NULL) != NULL)
 8000b36:	2100      	movs	r1, #0
 8000b38:	a805      	add	r0, sp, #20
 8000b3a:	f000 fe11 	bl	8001760 <osThreadCreate>
 8000b3e:	b160      	cbz	r0, 8000b5a <appInit+0x56>
	osThreadDef(threadMain2, threadMain2, _HW_DEF_RTOS_THREAD_PRI_LED, 0,
 8000b40:	466c      	mov	r4, sp
 8000b42:	4d08      	ldr	r5, [pc, #32]	; (8000b64 <appInit+0x60>)
 8000b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	6023      	str	r3, [r4, #0]
	if(osThreadCreate(osThread(threadMain2), NULL) != NULL)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4668      	mov	r0, sp
 8000b50:	f000 fe06 	bl	8001760 <osThreadCreate>
 8000b54:	b110      	cbz	r0, 8000b5c <appInit+0x58>
}
 8000b56:	b00b      	add	sp, #44	; 0x2c
 8000b58:	bd30      	pop	{r4, r5, pc}
		while(1);
 8000b5a:	e7fe      	b.n	8000b5a <appInit+0x56>
		while(1);
 8000b5c:	e7fe      	b.n	8000b5c <appInit+0x58>
 8000b5e:	bf00      	nop
 8000b60:	080070b8 	.word	0x080070b8
 8000b64:	080070cc 	.word	0x080070cc

08000b68 <appMain>:
{
 8000b68:	b508      	push	{r3, lr}
	osKernelStart();
 8000b6a:	f000 fdf4 	bl	8001756 <osKernelStart>
	while(1)
 8000b6e:	e7fe      	b.n	8000b6e <appMain+0x6>

08000b70 <SystemClock_Config>:
* Flash Latency(WS) = 2
* @param None
* @retval None
*/
void SystemClock_Config(void)
{
 8000b70:	b500      	push	{lr}
 8000b72:	b091      	sub	sp, #68	; 0x44
	RCC_ClkInitTypeDef clkinitstruct = {0};
 8000b74:	2100      	movs	r1, #0
 8000b76:	910b      	str	r1, [sp, #44]	; 0x2c
 8000b78:	910c      	str	r1, [sp, #48]	; 0x30
 8000b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8000b7c:	910e      	str	r1, [sp, #56]	; 0x38
 8000b7e:	910f      	str	r1, [sp, #60]	; 0x3c
	RCC_OscInitTypeDef oscinitstruct = {0};
 8000b80:	2228      	movs	r2, #40	; 0x28
 8000b82:	a801      	add	r0, sp, #4
 8000b84:	f003 fb66 	bl	8004254 <memset>

	/* Configure PLL ------------------------------------------------------*/
	/* PLL configuration: PLLCLK = (HSI / 2) * PLLMUL = (8 / 2) * 16 = 64 MHz */
	/* PREDIV1 configuration: PREDIV1CLK = PLLCLK / HSEPredivValue = 64 / 1 = 64 MHz */
	/* Enable HSI and activate PLL with HSi_DIV2 as source */
	oscinitstruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	9301      	str	r3, [sp, #4]
	oscinitstruct.HSEState = RCC_HSE_OFF;
	oscinitstruct.LSEState = RCC_LSE_OFF;
	oscinitstruct.HSIState = RCC_HSI_ON;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	9205      	str	r2, [sp, #20]
	oscinitstruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b90:	2210      	movs	r2, #16
 8000b92:	9206      	str	r2, [sp, #24]
	oscinitstruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	oscinitstruct.PLL.PLLState = RCC_PLL_ON;
 8000b94:	9308      	str	r3, [sp, #32]
	oscinitstruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
	oscinitstruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000b96:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000b9a:	930a      	str	r3, [sp, #40]	; 0x28

	if (HAL_RCC_OscConfig(&oscinitstruct)!= HAL_OK)
 8000b9c:	a801      	add	r0, sp, #4
 8000b9e:	f002 f8f3 	bl	8002d88 <HAL_RCC_OscConfig>
 8000ba2:	b100      	cbz	r0, 8000ba6 <SystemClock_Config+0x36>
	{
		/* Initialization Error */
		while(1);
 8000ba4:	e7fe      	b.n	8000ba4 <SystemClock_Config+0x34>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	clocks dividers */
	clkinitstruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000ba6:	230f      	movs	r3, #15
 8000ba8:	930b      	str	r3, [sp, #44]	; 0x2c
	clkinitstruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000baa:	2102      	movs	r1, #2
 8000bac:	910c      	str	r1, [sp, #48]	; 0x30
	clkinitstruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	930d      	str	r3, [sp, #52]	; 0x34
	clkinitstruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	930f      	str	r3, [sp, #60]	; 0x3c
	clkinitstruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	930e      	str	r3, [sp, #56]	; 0x38

	if (HAL_RCC_ClockConfig(&clkinitstruct, FLASH_LATENCY_2)!= HAL_OK)
 8000bba:	a80b      	add	r0, sp, #44	; 0x2c
 8000bbc:	f002 fb24 	bl	8003208 <HAL_RCC_ClockConfig>
 8000bc0:	b100      	cbz	r0, 8000bc4 <SystemClock_Config+0x54>
	{
		/* Initialization Error */
		while(1);
 8000bc2:	e7fe      	b.n	8000bc2 <SystemClock_Config+0x52>
	}
}
 8000bc4:	b011      	add	sp, #68	; 0x44
 8000bc6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000bcc <bspInit>:
{
 8000bcc:	b500      	push	{lr}
 8000bce:	b083      	sub	sp, #12
	HAL_Init();
 8000bd0:	f001 fc34 	bl	800243c <HAL_Init>
	SystemClock_Config();
 8000bd4:	f7ff ffcc 	bl	8000b70 <SystemClock_Config>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <bspInit+0x28>)
 8000bda:	699a      	ldr	r2, [r3, #24]
 8000bdc:	f042 0204 	orr.w	r2, r2, #4
 8000be0:	619a      	str	r2, [r3, #24]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	9301      	str	r3, [sp, #4]
 8000bea:	9b01      	ldr	r3, [sp, #4]
}
 8000bec:	b003      	add	sp, #12
 8000bee:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000bf8:	4770      	bx	lr

08000bfa <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <HardFault_Handler>

08000bfc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <MemManage_Handler>

08000bfe <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler>

08000c00 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler>

08000c02 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c04:	b508      	push	{r3, lr}
  HAL_IncTick();
 8000c06:	f001 fc2b 	bl	8002460 <HAL_IncTick>

  osSystickHandler();
 8000c0a:	f000 fdca 	bl	80017a2 <osSystickHandler>
}
 8000c0e:	bd08      	pop	{r3, pc}

08000c10 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	4770      	bx	lr
	...

08000c14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3a:	f7ff ffe9 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f003 fad7 	bl	80041f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f003 facb 	bl	80041dc <main>
  bx lr
 8000c46:	4770      	bx	lr
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8000c50:	08007694 	.word	0x08007694
  ldr r2, =_sbss
 8000c54:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8000c58:	200017ac 	.word	0x200017ac

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>

08000c5e <qbufferCreate>:
bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
  bool ret = true;


  p_node->ptr_in  = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 8000c62:	6043      	str	r3, [r0, #4]
  p_node->length  = length;
 8000c64:	6082      	str	r2, [r0, #8]
  p_node->p_buf   = p_buf;
 8000c66:	60c1      	str	r1, [r0, #12]

  if (p_node->p_buf == NULL)
 8000c68:	b109      	cbz	r1, 8000c6e <qbufferCreate+0x10>
  bool ret = true;
 8000c6a:	2001      	movs	r0, #1
    p_node->length = 0;
    ret = false;
  }

  return ret;
}
 8000c6c:	4770      	bx	lr
    p_node->length = 0;
 8000c6e:	6083      	str	r3, [r0, #8]
    ret = false;
 8000c70:	4618      	mov	r0, r3
 8000c72:	4770      	bx	lr

08000c74 <qbufferWrite>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 8000c74:	68c3      	ldr	r3, [r0, #12]
 8000c76:	b1eb      	cbz	r3, 8000cb4 <qbufferWrite+0x40>


  for (i=0; i<length; i++)
 8000c78:	f04f 0c00 	mov.w	ip, #0
 8000c7c:	4594      	cmp	ip, r2
 8000c7e:	d21d      	bcs.n	8000cbc <qbufferWrite+0x48>
{
 8000c80:	b530      	push	{r4, r5, lr}
 8000c82:	e00d      	b.n	8000ca0 <qbufferWrite+0x2c>
    if (next_index == p_node->length)
    {
      next_index = 0;;
    }

    if (next_index != p_node->ptr_out)
 8000c84:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8000c88:	459e      	cmp	lr, r3
 8000c8a:	d015      	beq.n	8000cb8 <qbufferWrite+0x44>
    {
      p_node->p_buf[index] = p_data[i];
 8000c8c:	f811 e00c 	ldrb.w	lr, [r1, ip]
 8000c90:	68c5      	ldr	r5, [r0, #12]
 8000c92:	f805 e004 	strb.w	lr, [r5, r4]
      p_node->ptr_in       = next_index;
 8000c96:	6003      	str	r3, [r0, #0]
  for (i=0; i<length; i++)
 8000c98:	f10c 0c01 	add.w	ip, ip, #1
 8000c9c:	4594      	cmp	ip, r2
 8000c9e:	d207      	bcs.n	8000cb0 <qbufferWrite+0x3c>
    index      = p_node->ptr_in;
 8000ca0:	6804      	ldr	r4, [r0, #0]
    next_index = p_node->ptr_in + 1;
 8000ca2:	1c63      	adds	r3, r4, #1
    if (next_index == p_node->length)
 8000ca4:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8000ca8:	459e      	cmp	lr, r3
 8000caa:	d1eb      	bne.n	8000c84 <qbufferWrite+0x10>
      next_index = 0;;
 8000cac:	2300      	movs	r3, #0
 8000cae:	e7e9      	b.n	8000c84 <qbufferWrite+0x10>
  bool ret = true;
 8000cb0:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000cb2:	bd30      	pop	{r4, r5, pc}
  if (p_node->p_buf == NULL) return false;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	4770      	bx	lr
      ret = false; // ERR_FULL
 8000cb8:	2000      	movs	r0, #0
 8000cba:	e7fa      	b.n	8000cb2 <qbufferWrite+0x3e>
  bool ret = true;
 8000cbc:	2001      	movs	r0, #1
}
 8000cbe:	4770      	bx	lr

08000cc0 <qbufferRead>:
  bool ret = true;
  uint32_t index;
  uint32_t next_index;
  uint32_t i;

  if (p_node->p_buf == NULL) return false;
 8000cc0:	68c3      	ldr	r3, [r0, #12]
 8000cc2:	b1e3      	cbz	r3, 8000cfe <qbufferRead+0x3e>


  for (i=0; i<length; i++)
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d21d      	bcs.n	8000d06 <qbufferRead+0x46>
{
 8000cca:	b430      	push	{r4, r5}
 8000ccc:	e00c      	b.n	8000ce8 <qbufferRead+0x28>
    if (next_index == p_node->length)
    {
      next_index = 0;
    }

    if (index != p_node->ptr_in)
 8000cce:	f8d0 c000 	ldr.w	ip, [r0]
 8000cd2:	45a4      	cmp	ip, r4
 8000cd4:	d015      	beq.n	8000d02 <qbufferRead+0x42>
    {
      p_data[i]       = p_node->p_buf[index];
 8000cd6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8000cda:	f81c 4004 	ldrb.w	r4, [ip, r4]
 8000cde:	54cc      	strb	r4, [r1, r3]
      p_node->ptr_out = next_index;
 8000ce0:	6045      	str	r5, [r0, #4]
  for (i=0; i<length; i++)
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d207      	bcs.n	8000cf8 <qbufferRead+0x38>
    index      = p_node->ptr_out;
 8000ce8:	6844      	ldr	r4, [r0, #4]
    next_index = p_node->ptr_out + 1;
 8000cea:	1c65      	adds	r5, r4, #1
    if (next_index == p_node->length)
 8000cec:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8000cf0:	45ac      	cmp	ip, r5
 8000cf2:	d1ec      	bne.n	8000cce <qbufferRead+0xe>
      next_index = 0;
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	e7ea      	b.n	8000cce <qbufferRead+0xe>
  bool ret = true;
 8000cf8:	2001      	movs	r0, #1
      break;
    }
  }

  return ret;
}
 8000cfa:	bc30      	pop	{r4, r5}
 8000cfc:	4770      	bx	lr
  if (p_node->p_buf == NULL) return false;
 8000cfe:	2000      	movs	r0, #0
 8000d00:	4770      	bx	lr
      ret = false; // ERR_EMPTY
 8000d02:	2000      	movs	r0, #0
 8000d04:	e7f9      	b.n	8000cfa <qbufferRead+0x3a>
  bool ret = true;
 8000d06:	2001      	movs	r0, #1
}
 8000d08:	4770      	bx	lr

08000d0a <qbufferAvailable>:
uint32_t qbufferAvailable(qbuffer_t *p_node)
{
  uint32_t length;


  length = (p_node->length + p_node->ptr_in - p_node->ptr_out) % p_node->length;
 8000d0a:	6882      	ldr	r2, [r0, #8]
 8000d0c:	6803      	ldr	r3, [r0, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	6840      	ldr	r0, [r0, #4]
 8000d12:	1a1b      	subs	r3, r3, r0
 8000d14:	fbb3 f0f2 	udiv	r0, r3, r2

  return length;
}
 8000d18:	fb02 3010 	mls	r0, r2, r0, r3
 8000d1c:	4770      	bx	lr

08000d1e <qbufferFlush>:

void qbufferFlush(qbuffer_t *p_node)
{
  p_node->ptr_in  = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	6003      	str	r3, [r0, #0]
  p_node->ptr_out = 0;
 8000d22:	6043      	str	r3, [r0, #4]
}
 8000d24:	4770      	bx	lr
	...

08000d28 <AdcInit>:
#include "adc.h"

ADC_HandleTypeDef newADC1;

void AdcInit(void)
{
 8000d28:	b530      	push	{r4, r5, lr}
 8000d2a:	b085      	sub	sp, #20
	ADC_ChannelConfTypeDef sConfig = {0};
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	9303      	str	r3, [sp, #12]

	__HAL_RCC_ADC1_CLK_ENABLE();
 8000d34:	4a11      	ldr	r2, [pc, #68]	; (8000d7c <AdcInit+0x54>)
 8000d36:	6991      	ldr	r1, [r2, #24]
 8000d38:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000d3c:	6191      	str	r1, [r2, #24]
 8000d3e:	6992      	ldr	r2, [r2, #24]
 8000d40:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000d44:	9200      	str	r2, [sp, #0]
 8000d46:	9a00      	ldr	r2, [sp, #0]

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
	newADC1.Instance = ADC1;
 8000d48:	4c0d      	ldr	r4, [pc, #52]	; (8000d80 <AdcInit+0x58>)
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <AdcInit+0x5c>)
 8000d4c:	6022      	str	r2, [r4, #0]
	newADC1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4e:	60a3      	str	r3, [r4, #8]
	newADC1.Init.ContinuousConvMode = ENABLE;
 8000d50:	2501      	movs	r5, #1
 8000d52:	7325      	strb	r5, [r4, #12]
	newADC1.Init.DiscontinuousConvMode = DISABLE;
 8000d54:	7523      	strb	r3, [r4, #20]
	newADC1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d56:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d5a:	61e2      	str	r2, [r4, #28]
	newADC1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5c:	6063      	str	r3, [r4, #4]
	newADC1.Init.NbrOfDiscConversion = 1;
 8000d5e:	61a5      	str	r5, [r4, #24]
	if (HAL_ADC_Init(&newADC1) != HAL_OK)
 8000d60:	4620      	mov	r0, r4
 8000d62:	f001 fc73 	bl	800264c <HAL_ADC_Init>
		//_Error_Handler(__FILE__, __LINE__);
	}

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
	sConfig.Channel = ADC_CHANNEL_1;
 8000d66:	9501      	str	r5, [sp, #4]
	sConfig.Rank = 1;
 8000d68:	9502      	str	r5, [sp, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	9303      	str	r3, [sp, #12]
	if (HAL_ADC_ConfigChannel(&newADC1, &sConfig) != HAL_OK)
 8000d6e:	a901      	add	r1, sp, #4
 8000d70:	4620      	mov	r0, r4
 8000d72:	f001 fb9d 	bl	80024b0 <HAL_ADC_ConfigChannel>
	{
		//_Error_Handler(__FILE__, __LINE__);
	}
}
 8000d76:	b005      	add	sp, #20
 8000d78:	bd30      	pop	{r4, r5, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	20000240 	.word	0x20000240
 8000d84:	40012400 	.word	0x40012400

08000d88 <do_help>:
	UartTransmit(_DEF_UART1, "Setting Tuning\n");
	//puts("Setting Tuning\n");
}

static void do_help(int argc, char **argv)
{
 8000d88:	b538      	push	{r3, r4, r5, lr}
	char tmpBuffer[100];
	int i;

	UartTransmit(_DEF_UART1, "========  Controller Command List  ========\n\n");
 8000d8a:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <do_help+0x50>)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 fb89 	bl	80014a4 <UartTransmit>
	for (i=0; i<num_commands; i++)
 8000d92:	2400      	movs	r4, #0
 8000d94:	e015      	b.n	8000dc2 <do_help+0x3a>
    	//sprintf(tmpBuffer, "%-10s : %s\n",Mycmd[i].tag
    	//		,Mycmd[i].desc);
		//sprintf(tmpBuffer, "%-10s : ",Mycmd[i].tag);

    	//UartTransmit(_DEF_UART1, tmpBuffer);
		UartTransmit(_DEF_UART1, Mycmd[i].tag);
 8000d96:	4a11      	ldr	r2, [pc, #68]	; (8000ddc <do_help+0x54>)
 8000d98:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8000d9c:	008b      	lsls	r3, r1, #2
 8000d9e:	18d5      	adds	r5, r2, r3
 8000da0:	58d1      	ldr	r1, [r2, r3]
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 fb7e 	bl	80014a4 <UartTransmit>
		UartTransmit(_DEF_UART1, "\t");
 8000da8:	490d      	ldr	r1, [pc, #52]	; (8000de0 <do_help+0x58>)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 fb7a 	bl	80014a4 <UartTransmit>
		UartTransmit(_DEF_UART1, Mycmd[i].desc);
 8000db0:	6869      	ldr	r1, [r5, #4]
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 fb76 	bl	80014a4 <UartTransmit>
		UartTransmit(_DEF_UART1, "\n");
 8000db8:	490a      	ldr	r1, [pc, #40]	; (8000de4 <do_help+0x5c>)
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f000 fb72 	bl	80014a4 <UartTransmit>
	for (i=0; i<num_commands; i++)
 8000dc0:	3401      	adds	r4, #1
 8000dc2:	2c04      	cmp	r4, #4
 8000dc4:	dde7      	ble.n	8000d96 <do_help+0xe>

       //printf("%-10s : %s\n", Mycmd[cmd_count[i]].tag,
       //                        Mycmd[cmd_count[i]].desc);
    }
	UartTransmit(_DEF_UART1, "\n");
 8000dc6:	4907      	ldr	r1, [pc, #28]	; (8000de4 <do_help+0x5c>)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 fb6b 	bl	80014a4 <UartTransmit>
	UartTransmit(_DEF_UART1, "========================================\n");
 8000dce:	4906      	ldr	r1, [pc, #24]	; (8000de8 <do_help+0x60>)
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 fb67 	bl	80014a4 <UartTransmit>

}
 8000dd6:	bd38      	pop	{r3, r4, r5, pc}
 8000dd8:	08007110 	.word	0x08007110
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	08007140 	.word	0x08007140
 8000de4:	0800713c 	.word	0x0800713c
 8000de8:	08007144 	.word	0x08007144

08000dec <do_tune>:
{
 8000dec:	b508      	push	{r3, lr}
	UartTransmit(_DEF_UART1, "Setting Tuning\n");
 8000dee:	4902      	ldr	r1, [pc, #8]	; (8000df8 <do_tune+0xc>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fb57 	bl	80014a4 <UartTransmit>
}
 8000df6:	bd08      	pop	{r3, pc}
 8000df8:	08007170 	.word	0x08007170

08000dfc <do_run>:
{
 8000dfc:	b508      	push	{r3, lr}
	UartTransmit(_DEF_UART1, "Run control system\n");
 8000dfe:	4902      	ldr	r1, [pc, #8]	; (8000e08 <do_run+0xc>)
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 fb4f 	bl	80014a4 <UartTransmit>
}
 8000e06:	bd08      	pop	{r3, pc}
 8000e08:	08007180 	.word	0x08007180

08000e0c <do_set>:
{
 8000e0c:	b508      	push	{r3, lr}
	UartTransmit(_DEF_UART1, "Set target temperature\n");
 8000e0e:	4902      	ldr	r1, [pc, #8]	; (8000e18 <do_set+0xc>)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 fb47 	bl	80014a4 <UartTransmit>
}
 8000e16:	bd08      	pop	{r3, pc}
 8000e18:	08007194 	.word	0x08007194

08000e1c <do_temp>:
{
 8000e1c:	b508      	push	{r3, lr}
	UartTransmit(_DEF_UART1, "Read current temperature\n");
 8000e1e:	4902      	ldr	r1, [pc, #8]	; (8000e28 <do_temp+0xc>)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 fb3f 	bl	80014a4 <UartTransmit>
}
 8000e26:	bd08      	pop	{r3, pc}
 8000e28:	080071ac 	.word	0x080071ac

08000e2c <CmdCompare>:
{
 8000e2c:	b510      	push	{r4, lr}
 8000e2e:	4604      	mov	r4, r0
	if(strcmp(command,"temp") == 0)
 8000e30:	491f      	ldr	r1, [pc, #124]	; (8000eb0 <CmdCompare+0x84>)
 8000e32:	f7ff f98d 	bl	8000150 <strcmp>
 8000e36:	b1d8      	cbz	r0, 8000e70 <CmdCompare+0x44>
	else if(strcmp(command,"set") == 0)
 8000e38:	491e      	ldr	r1, [pc, #120]	; (8000eb4 <CmdCompare+0x88>)
 8000e3a:	4620      	mov	r0, r4
 8000e3c:	f7ff f988 	bl	8000150 <strcmp>
 8000e40:	b1f0      	cbz	r0, 8000e80 <CmdCompare+0x54>
	else if(strcmp(command,"run") == 0)
 8000e42:	491d      	ldr	r1, [pc, #116]	; (8000eb8 <CmdCompare+0x8c>)
 8000e44:	4620      	mov	r0, r4
 8000e46:	f7ff f983 	bl	8000150 <strcmp>
 8000e4a:	b308      	cbz	r0, 8000e90 <CmdCompare+0x64>
	else if(strcmp(command,"tune") == 0)
 8000e4c:	491b      	ldr	r1, [pc, #108]	; (8000ebc <CmdCompare+0x90>)
 8000e4e:	4620      	mov	r0, r4
 8000e50:	f7ff f97e 	bl	8000150 <strcmp>
 8000e54:	b320      	cbz	r0, 8000ea0 <CmdCompare+0x74>
	else if(strcmp(command,"help") == 0)
 8000e56:	491a      	ldr	r1, [pc, #104]	; (8000ec0 <CmdCompare+0x94>)
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff f979 	bl	8000150 <strcmp>
 8000e5e:	b970      	cbnz	r0, 8000e7e <CmdCompare+0x52>
		UartTransmit(_DEF_UART1, "help\n");
 8000e60:	4918      	ldr	r1, [pc, #96]	; (8000ec4 <CmdCompare+0x98>)
 8000e62:	f000 fb1f 	bl	80014a4 <UartTransmit>
		do_help(0,0);
 8000e66:	2100      	movs	r1, #0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	f7ff ff8d 	bl	8000d88 <do_help>
}
 8000e6e:	e006      	b.n	8000e7e <CmdCompare+0x52>
		UartTransmit(_DEF_UART1, "temp\n");
 8000e70:	4915      	ldr	r1, [pc, #84]	; (8000ec8 <CmdCompare+0x9c>)
 8000e72:	f000 fb17 	bl	80014a4 <UartTransmit>
		do_temp(0,0);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4608      	mov	r0, r1
 8000e7a:	f7ff ffcf 	bl	8000e1c <do_temp>
}
 8000e7e:	bd10      	pop	{r4, pc}
		UartTransmit(_DEF_UART1, "set\n");
 8000e80:	4912      	ldr	r1, [pc, #72]	; (8000ecc <CmdCompare+0xa0>)
 8000e82:	f000 fb0f 	bl	80014a4 <UartTransmit>
		do_set(0,0);
 8000e86:	2100      	movs	r1, #0
 8000e88:	4608      	mov	r0, r1
 8000e8a:	f7ff ffbf 	bl	8000e0c <do_set>
 8000e8e:	e7f6      	b.n	8000e7e <CmdCompare+0x52>
		UartTransmit(_DEF_UART1, "run\n");
 8000e90:	490f      	ldr	r1, [pc, #60]	; (8000ed0 <CmdCompare+0xa4>)
 8000e92:	f000 fb07 	bl	80014a4 <UartTransmit>
		do_run(0,0);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4608      	mov	r0, r1
 8000e9a:	f7ff ffaf 	bl	8000dfc <do_run>
 8000e9e:	e7ee      	b.n	8000e7e <CmdCompare+0x52>
		UartTransmit(_DEF_UART1, "tune\n");
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <CmdCompare+0xa8>)
 8000ea2:	f000 faff 	bl	80014a4 <UartTransmit>
		do_tune(0,0);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	f7ff ff9f 	bl	8000dec <do_tune>
 8000eae:	e7e6      	b.n	8000e7e <CmdCompare+0x52>
 8000eb0:	080071c8 	.word	0x080071c8
 8000eb4:	080071d8 	.word	0x080071d8
 8000eb8:	080071e4 	.word	0x080071e4
 8000ebc:	080071f0 	.word	0x080071f0
 8000ec0:	08007200 	.word	0x08007200
 8000ec4:	08007208 	.word	0x08007208
 8000ec8:	080071d0 	.word	0x080071d0
 8000ecc:	080071dc 	.word	0x080071dc
 8000ed0:	080071e8 	.word	0x080071e8
 8000ed4:	080071f8 	.word	0x080071f8

08000ed8 <CmdInit>:
{
 8000ed8:	b508      	push	{r3, lr}
	do_help(0,0);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4608      	mov	r0, r1
 8000ede:	f7ff ff53 	bl	8000d88 <do_help>
}
 8000ee2:	bd08      	pop	{r3, pc}

08000ee4 <CmdPrompt>:
{
 8000ee4:	b500      	push	{lr}
 8000ee6:	b087      	sub	sp, #28
    sprintf(cmd, "\n[%s]$ ", USER_PROMPT);
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <CmdPrompt+0x1c>)
 8000eea:	4906      	ldr	r1, [pc, #24]	; (8000f04 <CmdPrompt+0x20>)
 8000eec:	a801      	add	r0, sp, #4
 8000eee:	f003 fe19 	bl	8004b24 <siprintf>
    UartTransmit(_DEF_UART1, cmd);
 8000ef2:	a901      	add	r1, sp, #4
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fad5 	bl	80014a4 <UartTransmit>
}
 8000efa:	b007      	add	sp, #28
 8000efc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f00:	08007210 	.word	0x08007210
 8000f04:	0800721c 	.word	0x0800721c

08000f08 <CmdRead>:
{
 8000f08:	b510      	push	{r4, lr}
	data = (char)UartRead(_DEF_UART1);
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 faea 	bl	80014e4 <UartRead>
	if(data != '\n')
 8000f10:	280a      	cmp	r0, #10
 8000f12:	d008      	beq.n	8000f26 <CmdRead+0x1e>
		tempBuf[idx++] += data;
 8000f14:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <CmdRead+0x38>)
 8000f16:	7813      	ldrb	r3, [r2, #0]
 8000f18:	1c59      	adds	r1, r3, #1
 8000f1a:	7011      	strb	r1, [r2, #0]
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <CmdRead+0x3c>)
 8000f1e:	5cd1      	ldrb	r1, [r2, r3]
 8000f20:	4408      	add	r0, r1
 8000f22:	54d0      	strb	r0, [r2, r3]
}
 8000f24:	bd10      	pop	{r4, pc}
		CmdCompare(tempBuf);
 8000f26:	4c07      	ldr	r4, [pc, #28]	; (8000f44 <CmdRead+0x3c>)
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff ff7f 	bl	8000e2c <CmdCompare>
			CmdPrompt();
 8000f2e:	f7ff ffd9 	bl	8000ee4 <CmdPrompt>
		idx = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	4a02      	ldr	r2, [pc, #8]	; (8000f40 <CmdRead+0x38>)
 8000f36:	7013      	strb	r3, [r2, #0]
		memset(tempBuf, 0x00, sizeof(tempBuf));
 8000f38:	6023      	str	r3, [r4, #0]
 8000f3a:	6063      	str	r3, [r4, #4]
 8000f3c:	8123      	strh	r3, [r4, #8]
}
 8000f3e:	e7f1      	b.n	8000f24 <CmdRead+0x1c>
 8000f40:	20000270 	.word	0x20000270
 8000f44:	20000274 	.word	0x20000274

08000f48 <FlashInit>:


void FlashInit(void)
{
	uint32_t i;
	for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e00b      	b.n	8000f64 <FlashInit+0x1c>
	{
		flash_tbl[i].address = 0x08000000 + ( i * FLASH_PAGE_SIZE );
 8000f4c:	f503 3100 	add.w	r1, r3, #131072	; 0x20000
 8000f50:	0289      	lsls	r1, r1, #10
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <FlashInit+0x24>)
 8000f54:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		flash_tbl[i].length = FLASH_PAGE_SIZE;
 8000f58:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8000f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f60:	6051      	str	r1, [r2, #4]
	for (i=0; i<FLASH_MAX_PAGE_COUNT; i++)
 8000f62:	3301      	adds	r3, #1
 8000f64:	2b7f      	cmp	r3, #127	; 0x7f
 8000f66:	d9f1      	bls.n	8000f4c <FlashInit+0x4>
	}
}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000280 	.word	0x20000280

08000f70 <GpioInit>:
#include "gpio.h"

#define GPIO_A0_EN		1

void GpioInit(void)
{
 8000f70:	b500      	push	{lr}
 8000f72:	b085      	sub	sp, #20
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
#endif


	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	9303      	str	r3, [sp, #12]

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	9300      	str	r3, [sp, #0]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	4669      	mov	r1, sp
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <GpioInit+0x20>)
 8000f86:	f001 fd57 	bl	8002a38 <HAL_GPIO_Init>
}
 8000f8a:	b005      	add	sp, #20
 8000f8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f90:	40010800 	.word	0x40010800

08000f94 <PWM_MspPostInit>:
	PWM_MspPostInit(&TimHandle);
	HAL_TIM_PWM_Start(&TimHandle, ch);
}

static void PWM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f94:	b510      	push	{r4, lr}
 8000f96:	b08a      	sub	sp, #40	; 0x28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	2300      	movs	r3, #0
 8000f9a:	9306      	str	r3, [sp, #24]
 8000f9c:	9307      	str	r3, [sp, #28]
 8000f9e:	9308      	str	r3, [sp, #32]
 8000fa0:	9309      	str	r3, [sp, #36]	; 0x24
	if(htim->Instance==TIM2)
 8000fa2:	6803      	ldr	r3, [r0, #0]
 8000fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa8:	d007      	beq.n	8000fba <PWM_MspPostInit+0x26>
		//GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		//HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

       __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
	}
	else if(htim->Instance==TIM3)
 8000faa:	4a34      	ldr	r2, [pc, #208]	; (800107c <PWM_MspPostInit+0xe8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d02b      	beq.n	8001008 <PWM_MspPostInit+0x74>
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
	else if(htim->Instance==TIM4)
 8000fb0:	4a33      	ldr	r2, [pc, #204]	; (8001080 <PWM_MspPostInit+0xec>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d04d      	beq.n	8001052 <PWM_MspPostInit+0xbe>
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	}
}
 8000fb6:	b00a      	add	sp, #40	; 0x28
 8000fb8:	bd10      	pop	{r4, pc}
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000fbe:	699a      	ldr	r2, [r3, #24]
 8000fc0:	f042 0204 	orr.w	r2, r2, #4
 8000fc4:	619a      	str	r2, [r3, #24]
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	f002 0204 	and.w	r2, r2, #4
 8000fcc:	9201      	str	r2, [sp, #4]
 8000fce:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	f042 0208 	orr.w	r2, r2, #8
 8000fd6:	619a      	str	r2, [r3, #24]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	a906      	add	r1, sp, #24
 8000fee:	4825      	ldr	r0, [pc, #148]	; (8001084 <PWM_MspPostInit+0xf0>)
 8000ff0:	f001 fd22 	bl	8002a38 <HAL_GPIO_Init>
       __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8000ff4:	4a24      	ldr	r2, [pc, #144]	; (8001088 <PWM_MspPostInit+0xf4>)
 8000ff6:	6853      	ldr	r3, [r2, #4]
 8000ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ffc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001000:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001004:	6053      	str	r3, [r2, #4]
 8001006:	e7d6      	b.n	8000fb6 <PWM_MspPostInit+0x22>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <PWM_MspPostInit+0xf8>)
 800100a:	699a      	ldr	r2, [r3, #24]
 800100c:	f042 0204 	orr.w	r2, r2, #4
 8001010:	619a      	str	r2, [r3, #24]
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	f002 0204 	and.w	r2, r2, #4
 8001018:	9203      	str	r2, [sp, #12]
 800101a:	9a03      	ldr	r2, [sp, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800101c:	699a      	ldr	r2, [r3, #24]
 800101e:	f042 0208 	orr.w	r2, r2, #8
 8001022:	619a      	str	r2, [r3, #24]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	9304      	str	r3, [sp, #16]
 800102c:	9b04      	ldr	r3, [sp, #16]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102e:	23c0      	movs	r3, #192	; 0xc0
 8001030:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2402      	movs	r4, #2
 8001034:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	a906      	add	r1, sp, #24
 800103a:	4812      	ldr	r0, [pc, #72]	; (8001084 <PWM_MspPostInit+0xf0>)
 800103c:	f001 fcfc 	bl	8002a38 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001040:	2303      	movs	r3, #3
 8001042:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	9407      	str	r4, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	9409      	str	r4, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	a906      	add	r1, sp, #24
 800104a:	4811      	ldr	r0, [pc, #68]	; (8001090 <PWM_MspPostInit+0xfc>)
 800104c:	f001 fcf4 	bl	8002a38 <HAL_GPIO_Init>
 8001050:	e7b1      	b.n	8000fb6 <PWM_MspPostInit+0x22>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <PWM_MspPostInit+0xf8>)
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	f042 0208 	orr.w	r2, r2, #8
 800105a:	619a      	str	r2, [r3, #24]
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0308 	and.w	r3, r3, #8
 8001062:	9305      	str	r3, [sp, #20]
 8001064:	9b05      	ldr	r3, [sp, #20]
		GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001066:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800106a:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	9307      	str	r3, [sp, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	9309      	str	r3, [sp, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	a906      	add	r1, sp, #24
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <PWM_MspPostInit+0xfc>)
 8001076:	f001 fcdf 	bl	8002a38 <HAL_GPIO_Init>
}
 800107a:	e79c      	b.n	8000fb6 <PWM_MspPostInit+0x22>
 800107c:	40000400 	.word	0x40000400
 8001080:	40000800 	.word	0x40000800
 8001084:	40010800 	.word	0x40010800
 8001088:	40010000 	.word	0x40010000
 800108c:	40021000 	.word	0x40021000
 8001090:	40010c00 	.word	0x40010c00

08001094 <PwmInit>:
{
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	460e      	mov	r6, r1
	uhPrescalerValue = (uint32_t)((SystemCoreClock /1) / (1000 * 100)) - 1;
 800109a:	4b39      	ldr	r3, [pc, #228]	; (8001180 <PwmInit+0xec>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <PwmInit+0xf0>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	09db      	lsrs	r3, r3, #7
 80010a8:	3b01      	subs	r3, #1
 80010aa:	4a37      	ldr	r2, [pc, #220]	; (8001188 <PwmInit+0xf4>)
 80010ac:	6013      	str	r3, [r2, #0]
	if(TimerDef==TIM1)
 80010ae:	4a37      	ldr	r2, [pc, #220]	; (800118c <PwmInit+0xf8>)
 80010b0:	4290      	cmp	r0, r2
 80010b2:	d014      	beq.n	80010de <PwmInit+0x4a>
	  else if(TimerDef==TIM2)
 80010b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80010b8:	d04b      	beq.n	8001152 <PwmInit+0xbe>
	  else if(TimerDef==TIM3)
 80010ba:	4a35      	ldr	r2, [pc, #212]	; (8001190 <PwmInit+0xfc>)
 80010bc:	4290      	cmp	r0, r2
 80010be:	d053      	beq.n	8001168 <PwmInit+0xd4>
	  else if(TimerDef==TIM4)
 80010c0:	4a34      	ldr	r2, [pc, #208]	; (8001194 <PwmInit+0x100>)
 80010c2:	4290      	cmp	r0, r2
 80010c4:	d116      	bne.n	80010f4 <PwmInit+0x60>
	    __HAL_RCC_TIM4_CLK_ENABLE();
 80010c6:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80010ca:	69d1      	ldr	r1, [r2, #28]
 80010cc:	f041 0104 	orr.w	r1, r1, #4
 80010d0:	61d1      	str	r1, [r2, #28]
 80010d2:	69d2      	ldr	r2, [r2, #28]
 80010d4:	f002 0204 	and.w	r2, r2, #4
 80010d8:	9203      	str	r2, [sp, #12]
 80010da:	9a03      	ldr	r2, [sp, #12]
 80010dc:	e00a      	b.n	80010f4 <PwmInit+0x60>
	    __HAL_RCC_TIM1_CLK_ENABLE();
 80010de:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 80010e2:	6991      	ldr	r1, [r2, #24]
 80010e4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80010e8:	6191      	str	r1, [r2, #24]
 80010ea:	6992      	ldr	r2, [r2, #24]
 80010ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	9a00      	ldr	r2, [sp, #0]
	TimHandle.Instance = TimerDef;
 80010f4:	4c28      	ldr	r4, [pc, #160]	; (8001198 <PwmInit+0x104>)
 80010f6:	6020      	str	r0, [r4, #0]
	TimHandle.Init.Prescaler = uhPrescalerValue;			//
 80010f8:	6063      	str	r3, [r4, #4]
	TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fa:	2500      	movs	r5, #0
 80010fc:	60a5      	str	r5, [r4, #8]
	TimHandle.Init.Period = 100-1;				//
 80010fe:	2363      	movs	r3, #99	; 0x63
 8001100:	60e3      	str	r3, [r4, #12]
	TimHandle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001102:	6125      	str	r5, [r4, #16]
	TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_Base_Init(&TimHandle) != HAL_OK)
 8001106:	4620      	mov	r0, r4
 8001108:	f002 fa48 	bl	800359c <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	4923      	ldr	r1, [pc, #140]	; (800119c <PwmInit+0x108>)
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	600b      	str	r3, [r1, #0]
	if (HAL_TIM_ConfigClockSource(&TimHandle, &sClockSourceConfig) != HAL_OK)
 8001114:	4620      	mov	r0, r4
 8001116:	f002 fb3f 	bl	8003798 <HAL_TIM_ConfigClockSource>
	if (HAL_TIM_PWM_Init(&TimHandle) != HAL_OK)
 800111a:	4620      	mov	r0, r4
 800111c:	f002 fa6a 	bl	80035f4 <HAL_TIM_PWM_Init>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	491f      	ldr	r1, [pc, #124]	; (80011a0 <PwmInit+0x10c>)
 8001122:	600d      	str	r5, [r1, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	604d      	str	r5, [r1, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&TimHandle, &sMasterConfig) != HAL_OK)
 8001126:	4620      	mov	r0, r4
 8001128:	f002 fc20 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 800112c:	491d      	ldr	r1, [pc, #116]	; (80011a4 <PwmInit+0x110>)
 800112e:	2360      	movs	r3, #96	; 0x60
 8001130:	600b      	str	r3, [r1, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	608d      	str	r5, [r1, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8001134:	610d      	str	r5, [r1, #16]
	sConfig.Pulse = 0;
 8001136:	604d      	str	r5, [r1, #4]
	HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfig, ch);
 8001138:	4632      	mov	r2, r6
 800113a:	4620      	mov	r0, r4
 800113c:	f002 fab8 	bl	80036b0 <HAL_TIM_PWM_ConfigChannel>
	PWM_MspPostInit(&TimHandle);
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff ff27 	bl	8000f94 <PWM_MspPostInit>
	HAL_TIM_PWM_Start(&TimHandle, ch);
 8001146:	4631      	mov	r1, r6
 8001148:	4620      	mov	r0, r4
 800114a:	f002 fba1 	bl	8003890 <HAL_TIM_PWM_Start>
}
 800114e:	b004      	add	sp, #16
 8001150:	bd70      	pop	{r4, r5, r6, pc}
	    __HAL_RCC_TIM2_CLK_ENABLE();
 8001152:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <PwmInit+0x114>)
 8001154:	69d1      	ldr	r1, [r2, #28]
 8001156:	f041 0101 	orr.w	r1, r1, #1
 800115a:	61d1      	str	r1, [r2, #28]
 800115c:	69d2      	ldr	r2, [r2, #28]
 800115e:	f002 0201 	and.w	r2, r2, #1
 8001162:	9201      	str	r2, [sp, #4]
 8001164:	9a01      	ldr	r2, [sp, #4]
 8001166:	e7c5      	b.n	80010f4 <PwmInit+0x60>
	    __HAL_RCC_TIM3_CLK_ENABLE();
 8001168:	f502 3203 	add.w	r2, r2, #134144	; 0x20c00
 800116c:	69d1      	ldr	r1, [r2, #28]
 800116e:	f041 0102 	orr.w	r1, r1, #2
 8001172:	61d1      	str	r1, [r2, #28]
 8001174:	69d2      	ldr	r2, [r2, #28]
 8001176:	f002 0202 	and.w	r2, r2, #2
 800117a:	9202      	str	r2, [sp, #8]
 800117c:	9a02      	ldr	r2, [sp, #8]
 800117e:	e7b9      	b.n	80010f4 <PwmInit+0x60>
 8001180:	20000000 	.word	0x20000000
 8001184:	0a7c5ac5 	.word	0x0a7c5ac5
 8001188:	200006fc 	.word	0x200006fc
 800118c:	40012c00 	.word	0x40012c00
 8001190:	40000400 	.word	0x40000400
 8001194:	40000800 	.word	0x40000800
 8001198:	20000680 	.word	0x20000680
 800119c:	200006c8 	.word	0x200006c8
 80011a0:	200006f4 	.word	0x200006f4
 80011a4:	200006d8 	.word	0x200006d8
 80011a8:	40021000 	.word	0x40021000

080011ac <PwmWrite>:

void PwmWrite(uint8_t ch, uint8_t pwm_data)
{
	//sConfig.Pulse = pwm_data;
	if(ch == _DEF_PWM1)
 80011ac:	b918      	cbnz	r0, 80011b6 <PwmWrite+0xa>
	{
		TimHandle.Instance->CCR1 = pwm_data;
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <PwmWrite+0x2c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6359      	str	r1, [r3, #52]	; 0x34
 80011b4:	4770      	bx	lr
	}
	else if(ch == _DEF_PWM2)
 80011b6:	2804      	cmp	r0, #4
 80011b8:	d005      	beq.n	80011c6 <PwmWrite+0x1a>
	{
		TimHandle.Instance->CCR2 = pwm_data;
	}
	else if(ch == _DEF_PWM3)
 80011ba:	2808      	cmp	r0, #8
 80011bc:	d007      	beq.n	80011ce <PwmWrite+0x22>
	{
		TimHandle.Instance->CCR3 = pwm_data;
	}
	else
	{
		TimHandle.Instance->CCR4 = pwm_data;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <PwmWrite+0x2c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6419      	str	r1, [r3, #64]	; 0x40
	}
	//HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfig, ch);
	//HAL_TIM_PWM_Start(&TimHandle, ch);
}
 80011c4:	4770      	bx	lr
		TimHandle.Instance->CCR2 = pwm_data;
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <PwmWrite+0x2c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6399      	str	r1, [r3, #56]	; 0x38
 80011cc:	4770      	bx	lr
		TimHandle.Instance->CCR3 = pwm_data;
 80011ce:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <PwmWrite+0x2c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	63d9      	str	r1, [r3, #60]	; 0x3c
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20000680 	.word	0x20000680

080011dc <uartStartRx>:

  return ret;
}

void uartStartRx(uint8_t channel)
{
 80011dc:	b510      	push	{r4, lr}
 80011de:	4604      	mov	r4, r0
  uart_t *p_uart = &uart_tbl[channel];


  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <uartStartRx+0x60>)
 80011e2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80011e6:	fb02 3300 	mla	r3, r2, r0, r3
 80011ea:	7a5b      	ldrb	r3, [r3, #9]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d008      	beq.n	8001202 <uartStartRx+0x26>
  {
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
  }
  if (p_uart->rx_mode == UART_MODE_DMA)
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <uartStartRx+0x60>)
 80011f2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80011f6:	fb02 3304 	mla	r3, r2, r4, r3
 80011fa:	7a5b      	ldrb	r3, [r3, #9]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d00f      	beq.n	8001220 <uartStartRx+0x44>
  {
    HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
  }
}
 8001200:	bd10      	pop	{r4, pc}
    HAL_UART_Receive_IT(&p_uart->handle, p_uart->rx_buf, 1);
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <uartStartRx+0x60>)
 8001204:	4613      	mov	r3, r2
 8001206:	fb04 f303 	mul.w	r3, r4, r3
 800120a:	f103 0108 	add.w	r1, r3, #8
 800120e:	4401      	add	r1, r0
 8001210:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001214:	2201      	movs	r2, #1
 8001216:	3102      	adds	r1, #2
 8001218:	4418      	add	r0, r3
 800121a:	f002 ff6a 	bl	80040f2 <HAL_UART_Receive_IT>
 800121e:	e7e7      	b.n	80011f0 <uartStartRx+0x14>
    HAL_UART_Receive_DMA(&p_uart->handle, (uint8_t *)p_uart->qbuffer_rx.p_buf, p_uart->qbuffer_rx.length);
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <uartStartRx+0x60>)
 8001222:	fb02 f404 	mul.w	r4, r2, r4
 8001226:	1903      	adds	r3, r0, r4
 8001228:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 800122c:	f8b3 2114 	ldrh.w	r2, [r3, #276]	; 0x114
 8001230:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 8001234:	4420      	add	r0, r4
 8001236:	f002 ffb5 	bl	80041a4 <HAL_UART_Receive_DMA>
}
 800123a:	e7e1      	b.n	8001200 <uartStartRx+0x24>
 800123c:	20000700 	.word	0x20000700

08001240 <uartRxHandler>:
void uartRxHandler(uint8_t channel)
{
  uart_t *p_uart = &uart_tbl[channel];


  if(p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <uartRxHandler+0x44>)
 8001242:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001246:	fb02 3300 	mla	r3, r2, r0, r3
 800124a:	7a5b      	ldrb	r3, [r3, #9]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d000      	beq.n	8001252 <uartRxHandler+0x12>
 8001250:	4770      	bx	lr
{
 8001252:	b570      	push	{r4, r5, r6, lr}
 8001254:	4604      	mov	r4, r0
  {
      qbufferWrite(&p_uart->qbuffer_rx, &p_uart->rx_buf[0], 1);
 8001256:	4d0b      	ldr	r5, [pc, #44]	; (8001284 <uartRxHandler+0x44>)
 8001258:	4616      	mov	r6, r2
 800125a:	fb00 f606 	mul.w	r6, r0, r6
 800125e:	f106 0108 	add.w	r1, r6, #8
 8001262:	4429      	add	r1, r5
 8001264:	f506 7084 	add.w	r0, r6, #264	; 0x108
 8001268:	4428      	add	r0, r5
 800126a:	2201      	movs	r2, #1
 800126c:	3102      	adds	r1, #2
 800126e:	3004      	adds	r0, #4
 8001270:	f7ff fd00 	bl	8000c74 <qbufferWrite>

      __HAL_UNLOCK(&p_uart->handle);
 8001274:	4435      	add	r5, r6
 8001276:	2300      	movs	r3, #0
 8001278:	f885 319c 	strb.w	r3, [r5, #412]	; 0x19c
      uartStartRx(channel);
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff ffad 	bl	80011dc <uartStartRx>
  }
}
 8001282:	bd70      	pop	{r4, r5, r6, pc}
 8001284:	20000700 	.word	0x20000700

08001288 <UartInit>:
  for (i=0; i<UART_MAX_CH; i++)
 8001288:	2300      	movs	r3, #0
 800128a:	2b01      	cmp	r3, #1
 800128c:	d810      	bhi.n	80012b0 <UartInit+0x28>
{
 800128e:	b410      	push	{r4}
    uart_tbl[i].is_open = false;
 8001290:	4c08      	ldr	r4, [pc, #32]	; (80012b4 <UartInit+0x2c>)
 8001292:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001296:	fb03 f202 	mul.w	r2, r3, r2
 800129a:	18a0      	adds	r0, r4, r2
 800129c:	2100      	movs	r1, #0
 800129e:	54a1      	strb	r1, [r4, r2]
    uart_tbl[i].rx_mode = UART_MODE_POLLING;
 80012a0:	7241      	strb	r1, [r0, #9]
    uart_tbl[i].tx_mode = UART_MODE_POLLING;
 80012a2:	7201      	strb	r1, [r0, #8]
  for (i=0; i<UART_MAX_CH; i++)
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d9f1      	bls.n	8001290 <UartInit+0x8>
}
 80012ac:	bc10      	pop	{r4}
 80012ae:	4770      	bx	lr
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000700 	.word	0x20000700

080012b8 <UartOpen>:
{
 80012b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ba:	460c      	mov	r4, r1
  switch(channel)
 80012bc:	4605      	mov	r5, r0
 80012be:	b118      	cbz	r0, 80012c8 <UartOpen+0x10>
 80012c0:	2801      	cmp	r0, #1
 80012c2:	d040      	beq.n	8001346 <UartOpen+0x8e>
}
 80012c4:	2000      	movs	r0, #0
 80012c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p_uart->handle.Instance        = USART2;
 80012c8:	4e2d      	ldr	r6, [pc, #180]	; (8001380 <UartOpen+0xc8>)
 80012ca:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80012ce:	fb00 f202 	mul.w	r2, r0, r2
 80012d2:	18b3      	adds	r3, r6, r2
 80012d4:	492b      	ldr	r1, [pc, #172]	; (8001384 <UartOpen+0xcc>)
 80012d6:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
      p_uart->handle.Init.BaudRate   = baud;
 80012da:	f8c3 4164 	str.w	r4, [r3, #356]	; 0x164
      p_uart->handle.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	2100      	movs	r1, #0
 80012e0:	f8c3 1168 	str.w	r1, [r3, #360]	; 0x168
      p_uart->handle.Init.StopBits   = UART_STOPBITS_1;
 80012e4:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
      p_uart->handle.Init.Parity     = UART_PARITY_NONE;
 80012e8:	f8c3 1170 	str.w	r1, [r3, #368]	; 0x170
      p_uart->handle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80012ec:	f8c3 1178 	str.w	r1, [r3, #376]	; 0x178
      p_uart->handle.Init.Mode       = UART_MODE_TX_RX;
 80012f0:	210c      	movs	r1, #12
 80012f2:	f8c3 1174 	str.w	r1, [r3, #372]	; 0x174
      p_uart->rx_mode  = UART_MODE_DMA;
 80012f6:	2102      	movs	r1, #2
 80012f8:	7259      	strb	r1, [r3, #9]
      if(HAL_UART_DeInit(&p_uart->handle) != HAL_OK)
 80012fa:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 80012fe:	4416      	add	r6, r2
 8001300:	4630      	mov	r0, r6
 8001302:	f002 fc6a 	bl	8003bda <HAL_UART_DeInit>
 8001306:	2800      	cmp	r0, #0
 8001308:	d1dc      	bne.n	80012c4 <UartOpen+0xc>
      if(HAL_UART_Init(&p_uart->handle) != HAL_OK)
 800130a:	4630      	mov	r0, r6
 800130c:	f002 fc36 	bl	8003b7c <HAL_UART_Init>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1d7      	bne.n	80012c4 <UartOpen+0xc>
      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 8001314:	4f1a      	ldr	r7, [pc, #104]	; (8001380 <UartOpen+0xc8>)
 8001316:	f44f 76d2 	mov.w	r6, #420	; 0x1a4
 800131a:	fb05 f606 	mul.w	r6, r5, r6
 800131e:	f106 0108 	add.w	r1, r6, #8
 8001322:	4439      	add	r1, r7
 8001324:	f506 7084 	add.w	r0, r6, #264	; 0x108
 8001328:	4438      	add	r0, r7
 800132a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132e:	3102      	adds	r1, #2
 8001330:	3004      	adds	r0, #4
 8001332:	f7ff fc94 	bl	8000c5e <qbufferCreate>
      p_uart->baud     = baud;
 8001336:	19bb      	adds	r3, r7, r6
 8001338:	605c      	str	r4, [r3, #4]
      p_uart->is_open  = true;
 800133a:	2301      	movs	r3, #1
 800133c:	55bb      	strb	r3, [r7, r6]
      uartStartRx(channel);
 800133e:	4628      	mov	r0, r5
 8001340:	f7ff ff4c 	bl	80011dc <uartStartRx>
      break;
 8001344:	e7be      	b.n	80012c4 <UartOpen+0xc>
      p_uart->baud     = baud;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <UartOpen+0xc8>)
 8001348:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800134c:	fb05 f000 	mul.w	r0, r5, r0
 8001350:	181a      	adds	r2, r3, r0
 8001352:	6051      	str	r1, [r2, #4]
      p_uart->is_open  = true;
 8001354:	2101      	movs	r1, #1
 8001356:	5419      	strb	r1, [r3, r0]
      p_uart->rx_mode  = UART_MODE_LOOPBACK;
 8001358:	2104      	movs	r1, #4
 800135a:	7251      	strb	r1, [r2, #9]
      p_uart->tx_mode  = UART_MODE_LOOPBACK;
 800135c:	7211      	strb	r1, [r2, #8]
      qbufferCreate(&p_uart->qbuffer_rx, p_uart->rx_buf, UART_RX_BUF_LENGTH);
 800135e:	f100 0108 	add.w	r1, r0, #8
 8001362:	4419      	add	r1, r3
 8001364:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001368:	4418      	add	r0, r3
 800136a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136e:	3102      	adds	r1, #2
 8001370:	3004      	adds	r0, #4
 8001372:	f7ff fc74 	bl	8000c5e <qbufferCreate>
      uartStartRx(channel);
 8001376:	4628      	mov	r0, r5
 8001378:	f7ff ff30 	bl	80011dc <uartStartRx>
      break;
 800137c:	e7a2      	b.n	80012c4 <UartOpen+0xc>
 800137e:	bf00      	nop
 8001380:	20000700 	.word	0x20000700
 8001384:	40004400 	.word	0x40004400

08001388 <UartAvailable>:
{
 8001388:	b538      	push	{r3, r4, r5, lr}
  if (channel >= UART_MAX_CH)
 800138a:	2801      	cmp	r0, #1
 800138c:	d847      	bhi.n	800141e <UartAvailable+0x96>
 800138e:	4604      	mov	r4, r0
  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <UartAvailable+0x9c>)
 8001392:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8001396:	fb01 2200 	mla	r2, r1, r0, r2
 800139a:	7a52      	ldrb	r2, [r2, #9]
 800139c:	2a01      	cmp	r2, #1
 800139e:	d011      	beq.n	80013c4 <UartAvailable+0x3c>
  if (p_uart->rx_mode == UART_MODE_DMA)
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <UartAvailable+0x9c>)
 80013a2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80013a6:	fb01 2204 	mla	r2, r1, r4, r2
 80013aa:	7a52      	ldrb	r2, [r2, #9]
 80013ac:	2a02      	cmp	r2, #2
 80013ae:	d015      	beq.n	80013dc <UartAvailable+0x54>
  if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <UartAvailable+0x9c>)
 80013b2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 80013b6:	fb01 2204 	mla	r2, r1, r4, r2
 80013ba:	7a52      	ldrb	r2, [r2, #9]
 80013bc:	2a04      	cmp	r2, #4
 80013be:	d022      	beq.n	8001406 <UartAvailable+0x7e>
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd38      	pop	{r3, r4, r5, pc}
    ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 80013c4:	4608      	mov	r0, r1
 80013c6:	fb04 f000 	mul.w	r0, r4, r0
 80013ca:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <UartAvailable+0x9c>)
 80013d0:	4418      	add	r0, r3
 80013d2:	3004      	adds	r0, #4
 80013d4:	f7ff fc99 	bl	8000d0a <qbufferAvailable>
 80013d8:	4603      	mov	r3, r0
 80013da:	e7e1      	b.n	80013a0 <UartAvailable+0x18>
    p_uart->qbuffer_rx.ptr_in = p_uart->qbuffer_rx.length - p_uart->hdma_rx.Instance->CNDTR;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <UartAvailable+0x9c>)
 80013de:	4608      	mov	r0, r1
 80013e0:	fb04 f000 	mul.w	r0, r4, r0
 80013e4:	181a      	adds	r2, r3, r0
 80013e6:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
 80013ea:	f8d2 511c 	ldr.w	r5, [r2, #284]	; 0x11c
 80013ee:	686d      	ldr	r5, [r5, #4]
 80013f0:	1b49      	subs	r1, r1, r5
 80013f2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
    ret = qbufferAvailable(&p_uart->qbuffer_rx);
 80013f6:	f500 7084 	add.w	r0, r0, #264	; 0x108
 80013fa:	4418      	add	r0, r3
 80013fc:	3004      	adds	r0, #4
 80013fe:	f7ff fc84 	bl	8000d0a <qbufferAvailable>
 8001402:	4603      	mov	r3, r0
 8001404:	e7d4      	b.n	80013b0 <UartAvailable+0x28>
      ret = qbufferAvailable(&uart_tbl[channel].qbuffer_rx);
 8001406:	4608      	mov	r0, r1
 8001408:	fb04 f000 	mul.w	r0, r4, r0
 800140c:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001410:	4c04      	ldr	r4, [pc, #16]	; (8001424 <UartAvailable+0x9c>)
 8001412:	4420      	add	r0, r4
 8001414:	3004      	adds	r0, #4
 8001416:	f7ff fc78 	bl	8000d0a <qbufferAvailable>
 800141a:	4603      	mov	r3, r0
 800141c:	e7d0      	b.n	80013c0 <UartAvailable+0x38>
    return 0;
 800141e:	2300      	movs	r3, #0
 8001420:	e7ce      	b.n	80013c0 <UartAvailable+0x38>
 8001422:	bf00      	nop
 8001424:	20000700 	.word	0x20000700

08001428 <UartFlush>:
{
 8001428:	b510      	push	{r4, lr}
 800142a:	4604      	mov	r4, r0
  if (uart_tbl[channel].rx_mode == UART_MODE_INTERRUPT)
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <UartFlush+0x78>)
 800142e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001432:	fb02 3300 	mla	r3, r2, r0, r3
 8001436:	7a5b      	ldrb	r3, [r3, #9]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00a      	beq.n	8001452 <UartFlush+0x2a>
  if (uart_tbl[channel].rx_mode == UART_MODE_DMA)
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <UartFlush+0x78>)
 800143e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001442:	fb02 3304 	mla	r3, r2, r4, r3
 8001446:	7a5b      	ldrb	r3, [r3, #9]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d00d      	beq.n	8001468 <UartFlush+0x40>
  if (uart_tbl[channel].rx_mode == UART_MODE_LOOPBACK)
 800144c:	2b04      	cmp	r3, #4
 800144e:	d01b      	beq.n	8001488 <UartFlush+0x60>
}
 8001450:	bd10      	pop	{r4, pc}
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8001452:	4610      	mov	r0, r2
 8001454:	fb04 f000 	mul.w	r0, r4, r0
 8001458:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <UartFlush+0x78>)
 800145e:	4418      	add	r0, r3
 8001460:	3004      	adds	r0, #4
 8001462:	f7ff fc5c 	bl	8000d1e <qbufferFlush>
 8001466:	e7e9      	b.n	800143c <UartFlush+0x14>
    uart_tbl[channel].qbuffer_rx.ptr_in  = uart_tbl[channel].qbuffer_rx.length - uart_tbl[channel].hdma_rx.Instance->CNDTR;
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <UartFlush+0x78>)
 800146a:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800146e:	fb01 2204 	mla	r2, r1, r4, r2
 8001472:	f8d2 1114 	ldr.w	r1, [r2, #276]	; 0x114
 8001476:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
 800147a:	6840      	ldr	r0, [r0, #4]
 800147c:	1a09      	subs	r1, r1, r0
 800147e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
    uart_tbl[channel].qbuffer_rx.ptr_out = uart_tbl[channel].qbuffer_rx.ptr_in;
 8001482:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
 8001486:	e7e1      	b.n	800144c <UartFlush+0x24>
    qbufferFlush(&uart_tbl[channel].qbuffer_rx);
 8001488:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800148c:	fb04 f000 	mul.w	r0, r4, r0
 8001490:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001494:	4c02      	ldr	r4, [pc, #8]	; (80014a0 <UartFlush+0x78>)
 8001496:	4420      	add	r0, r4
 8001498:	3004      	adds	r0, #4
 800149a:	f7ff fc40 	bl	8000d1e <qbufferFlush>
}
 800149e:	e7d7      	b.n	8001450 <UartFlush+0x28>
 80014a0:	20000700 	.word	0x20000700

080014a4 <UartTransmit>:
{
 80014a4:	b538      	push	{r3, r4, r5, lr}
  if (p_uart->tx_mode == UART_MODE_POLLING)
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <UartTransmit+0x3c>)
 80014a8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80014ac:	fb02 3300 	mla	r3, r2, r0, r3
 80014b0:	7a1b      	ldrb	r3, [r3, #8]
 80014b2:	b103      	cbz	r3, 80014b6 <UartTransmit+0x12>
}
 80014b4:	bd38      	pop	{r3, r4, r5, pc}
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
	 HAL_UART_Transmit(&p_uart->handle, (uint8_t*)p_data, strlen(p_data), 1000);
 80014ba:	4608      	mov	r0, r1
 80014bc:	f7fe fe52 	bl	8000164 <strlen>
 80014c0:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 80014c4:	fb03 f404 	mul.w	r4, r3, r4
 80014c8:	f504 74b0 	add.w	r4, r4, #352	; 0x160
 80014cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d0:	b282      	uxth	r2, r0
 80014d2:	4629      	mov	r1, r5
 80014d4:	4802      	ldr	r0, [pc, #8]	; (80014e0 <UartTransmit+0x3c>)
 80014d6:	4420      	add	r0, r4
 80014d8:	f002 fb98 	bl	8003c0c <HAL_UART_Transmit>
}
 80014dc:	e7ea      	b.n	80014b4 <UartTransmit+0x10>
 80014de:	bf00      	nop
 80014e0:	20000700 	.word	0x20000700

080014e4 <UartRead>:
{
 80014e4:	b510      	push	{r4, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	4604      	mov	r4, r0
  uint8_t ret = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f88d 3007 	strb.w	r3, [sp, #7]
  if (p_uart->rx_mode == UART_MODE_INTERRUPT)
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <UartRead+0x98>)
 80014f2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80014f6:	fb02 3300 	mla	r3, r2, r0, r3
 80014fa:	7a5b      	ldrb	r3, [r3, #9]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d013      	beq.n	8001528 <UartRead+0x44>
  if (p_uart->rx_mode == UART_MODE_DMA)
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <UartRead+0x98>)
 8001502:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001506:	fb02 3304 	mla	r3, r2, r4, r3
 800150a:	7a5b      	ldrb	r3, [r3, #9]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d019      	beq.n	8001544 <UartRead+0x60>
  if (p_uart->rx_mode == UART_MODE_LOOPBACK)
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <UartRead+0x98>)
 8001512:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001516:	fb02 3304 	mla	r3, r2, r4, r3
 800151a:	7a5b      	ldrb	r3, [r3, #9]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d01f      	beq.n	8001560 <UartRead+0x7c>
}
 8001520:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001524:	b002      	add	sp, #8
 8001526:	bd10      	pop	{r4, pc}
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001528:	4610      	mov	r0, r2
 800152a:	fb04 f000 	mul.w	r0, r4, r0
 800152e:	f500 7084 	add.w	r0, r0, #264	; 0x108
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <UartRead+0x98>)
 8001534:	4418      	add	r0, r3
 8001536:	2201      	movs	r2, #1
 8001538:	f10d 0107 	add.w	r1, sp, #7
 800153c:	3004      	adds	r0, #4
 800153e:	f7ff fbbf 	bl	8000cc0 <qbufferRead>
 8001542:	e7dd      	b.n	8001500 <UartRead+0x1c>
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001544:	4610      	mov	r0, r2
 8001546:	fb04 f000 	mul.w	r0, r4, r0
 800154a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <UartRead+0x98>)
 8001550:	4418      	add	r0, r3
 8001552:	2201      	movs	r2, #1
 8001554:	f10d 0107 	add.w	r1, sp, #7
 8001558:	3004      	adds	r0, #4
 800155a:	f7ff fbb1 	bl	8000cc0 <qbufferRead>
 800155e:	e7d7      	b.n	8001510 <UartRead+0x2c>
    qbufferRead(&p_uart->qbuffer_rx, &ret, 1);
 8001560:	4610      	mov	r0, r2
 8001562:	fb04 f000 	mul.w	r0, r4, r0
 8001566:	f500 7084 	add.w	r0, r0, #264	; 0x108
 800156a:	4c04      	ldr	r4, [pc, #16]	; (800157c <UartRead+0x98>)
 800156c:	4420      	add	r0, r4
 800156e:	2201      	movs	r2, #1
 8001570:	f10d 0107 	add.w	r1, sp, #7
 8001574:	3004      	adds	r0, #4
 8001576:	f7ff fba3 	bl	8000cc0 <qbufferRead>
 800157a:	e7d1      	b.n	8001520 <UartRead+0x3c>
 800157c:	20000700 	.word	0x20000700

08001580 <uartErrHandler>:

void uartErrHandler(uint8_t channel)
{
 8001580:	b510      	push	{r4, lr}
 8001582:	4604      	mov	r4, r0
  UartFlush(channel);
 8001584:	f7ff ff50 	bl	8001428 <UartFlush>
  uartStartRx(channel);
 8001588:	4620      	mov	r0, r4
 800158a:	f7ff fe27 	bl	80011dc <uartStartRx>
}
 800158e:	bd10      	pop	{r4, pc}

08001590 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001590:	b508      	push	{r3, lr}
  if (UartHandle->Instance == USART2)
 8001592:	6802      	ldr	r2, [r0, #0]
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_UART_RxCpltCallback+0x14>)
 8001596:	429a      	cmp	r2, r3
 8001598:	d000      	beq.n	800159c <HAL_UART_RxCpltCallback+0xc>
  {
    uartRxHandler(_DEF_UART1);
  }
}
 800159a:	bd08      	pop	{r3, pc}
    uartRxHandler(_DEF_UART1);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fe4f 	bl	8001240 <uartRxHandler>
}
 80015a2:	e7fa      	b.n	800159a <HAL_UART_RxCpltCallback+0xa>
 80015a4:	40004400 	.word	0x40004400

080015a8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 80015a8:	b510      	push	{r4, lr}
 80015aa:	4604      	mov	r4, r0
  HAL_UART_DeInit(UartHandle);
 80015ac:	f002 fb15 	bl	8003bda <HAL_UART_DeInit>
  HAL_UART_Init(UartHandle);
 80015b0:	4620      	mov	r0, r4
 80015b2:	f002 fae3 	bl	8003b7c <HAL_UART_Init>

  if (UartHandle->Instance == USART2)
 80015b6:	6822      	ldr	r2, [r4, #0]
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <HAL_UART_ErrorCallback+0x20>)
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d000      	beq.n	80015c0 <HAL_UART_ErrorCallback+0x18>
  {
    uartErrHandler(_DEF_UART1);
  }
}
 80015be:	bd10      	pop	{r4, pc}
    uartErrHandler(_DEF_UART1);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff ffdd 	bl	8001580 <uartErrHandler>
}
 80015c6:	e7fa      	b.n	80015be <HAL_UART_ErrorCallback+0x16>
 80015c8:	40004400 	.word	0x40004400

080015cc <USART2_IRQHandler>:

//-- _DEF_UART1 Interrupt
//
void USART2_IRQHandler(void)
{
 80015cc:	b508      	push	{r3, lr}
  HAL_UART_IRQHandler(&uart_tbl[_DEF_UART1].handle);
 80015ce:	4802      	ldr	r0, [pc, #8]	; (80015d8 <USART2_IRQHandler+0xc>)
 80015d0:	f002 fc36 	bl	8003e40 <HAL_UART_IRQHandler>
}
 80015d4:	bd08      	pop	{r3, pc}
 80015d6:	bf00      	nop
 80015d8:	20000860 	.word	0x20000860

080015dc <HAL_UART_MspInit>:
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
  GPIO_InitTypeDef  GPIO_InitStruct;


  if (huart->Instance == USART2)
 80015dc:	6802      	ldr	r2, [r0, #0]
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <HAL_UART_MspInit+0xd8>)
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d000      	beq.n	80015e6 <HAL_UART_MspInit+0xa>
 80015e4:	4770      	bx	lr
{
 80015e6:	b530      	push	{r4, r5, lr}
 80015e8:	b089      	sub	sp, #36	; 0x24
  {
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	f042 0204 	orr.w	r2, r2, #4
 80015f4:	619a      	str	r2, [r3, #24]
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	f002 0204 	and.w	r2, r2, #4
 80015fc:	9201      	str	r2, [sp, #4]
 80015fe:	9a01      	ldr	r2, [sp, #4]


    /* Enable USARTx clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001606:	61da      	str	r2, [r3, #28]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	9b02      	ldr	r3, [sp, #8]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART TX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8001612:	2304      	movs	r3, #4
 8001614:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	9307      	str	r3, [sp, #28]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001622:	4c25      	ldr	r4, [pc, #148]	; (80016b8 <HAL_UART_MspInit+0xdc>)
 8001624:	a904      	add	r1, sp, #16
 8001626:	4620      	mov	r0, r4
 8001628:	f001 fa06 	bl	8002a38 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 800162c:	2308      	movs	r3, #8
 800162e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode      = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	9305      	str	r3, [sp, #20]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	a904      	add	r1, sp, #16
 8001636:	4620      	mov	r0, r4
 8001638:	f001 f9fe 	bl	8002a38 <HAL_GPIO_Init>


    if (uart_tbl[_DEF_UART1].rx_mode == UART_MODE_DMA)
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_UART_MspInit+0xe0>)
 800163e:	7a5b      	ldrb	r3, [r3, #9]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d009      	beq.n	8001658 <HAL_UART_MspInit+0x7c>
    }


    /*##-3- Configure the NVIC for UART ########################################*/
    /* NVIC for USART */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	2100      	movs	r1, #0
 8001648:	2026      	movs	r0, #38	; 0x26
 800164a:	f001 f895 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800164e:	2026      	movs	r0, #38	; 0x26
 8001650:	f001 f8ca 	bl	80027e8 <HAL_NVIC_EnableIRQ>
  }
}
 8001654:	b009      	add	sp, #36	; 0x24
 8001656:	bd30      	pop	{r4, r5, pc}
      __HAL_RCC_DMA1_CLK_ENABLE();
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0xe4>)
 800165a:	695a      	ldr	r2, [r3, #20]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	615a      	str	r2, [r3, #20]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	9303      	str	r3, [sp, #12]
 800166a:	9b03      	ldr	r3, [sp, #12]
      p_uart->hdma_rx.Instance                 = DMA1_Channel6;
 800166c:	4c13      	ldr	r4, [pc, #76]	; (80016bc <HAL_UART_MspInit+0xe0>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_UART_MspInit+0xe8>)
 8001670:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
      p_uart->hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
      p_uart->hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800167a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
      p_uart->hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
      p_uart->hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001684:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
      p_uart->hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8001688:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
      p_uart->hdma_rx.Init.Mode                = DMA_CIRCULAR;
 800168c:	2320      	movs	r3, #32
 800168e:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
      p_uart->hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
      HAL_DMA_Init(&p_uart->hdma_rx);
 800169a:	f504 758e 	add.w	r5, r4, #284	; 0x11c
 800169e:	4628      	mov	r0, r5
 80016a0:	f001 f8ec 	bl	800287c <HAL_DMA_Init>
      __HAL_LINKDMA((&p_uart->handle), hdmarx, (p_uart->hdma_rx));
 80016a4:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
 80016a8:	f504 73b0 	add.w	r3, r4, #352	; 0x160
 80016ac:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
 80016b0:	e7c8      	b.n	8001644 <HAL_UART_MspInit+0x68>
 80016b2:	bf00      	nop
 80016b4:	40004400 	.word	0x40004400
 80016b8:	40010800 	.word	0x40010800
 80016bc:	20000700 	.word	0x20000700
 80016c0:	40021000 	.word	0x40021000
 80016c4:	4002006c 	.word	0x4002006c

080016c8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART2)
 80016c8:	6802      	ldr	r2, [r0, #0]
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_UART_MspDeInit+0x3c>)
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d000      	beq.n	80016d2 <HAL_UART_MspDeInit+0xa>
 80016d0:	4770      	bx	lr
{
 80016d2:	b510      	push	{r4, lr}
  {
    /*##-1- Reset peripherals ##################################################*/
    __HAL_RCC_USART2_FORCE_RESET();
 80016d4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016de:	611a      	str	r2, [r3, #16]
    __HAL_RCC_USART2_RELEASE_RESET();
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80016e6:	611a      	str	r2, [r3, #16]

    /*##-2- Disable peripherals and GPIO Clocks #################################*/
    /* Configure UART Tx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 80016e8:	4c07      	ldr	r4, [pc, #28]	; (8001708 <HAL_UART_MspDeInit+0x40>)
 80016ea:	2104      	movs	r1, #4
 80016ec:	4620      	mov	r0, r4
 80016ee:	f001 fab5 	bl	8002c5c <HAL_GPIO_DeInit>
    /* Configure UART Rx as alternate function  */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3);
 80016f2:	2108      	movs	r1, #8
 80016f4:	4620      	mov	r0, r4
 80016f6:	f001 fab1 	bl	8002c5c <HAL_GPIO_DeInit>

    /*##-3- Disable the NVIC for UART ##########################################*/
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80016fa:	2026      	movs	r0, #38	; 0x26
 80016fc:	f001 f882 	bl	8002804 <HAL_NVIC_DisableIRQ>
  }
}
 8001700:	bd10      	pop	{r4, pc}
 8001702:	bf00      	nop
 8001704:	40004400 	.word	0x40004400
 8001708:	40010800 	.word	0x40010800

0800170c <hwInit>:
#define SRC_HW_HW_C_

#include "hw.h"

void hwInit(void)
{
 800170c:	b508      	push	{r3, lr}
	bspInit();
 800170e:	f7ff fa5d 	bl	8000bcc <bspInit>

	GpioInit();
 8001712:	f7ff fc2d 	bl	8000f70 <GpioInit>
	AdcInit();
 8001716:	f7ff fb07 	bl	8000d28 <AdcInit>
	FlashInit();
 800171a:	f7ff fc15 	bl	8000f48 <FlashInit>

	PwmInit(TIM2, _DEF_PWM1);
 800171e:	2100      	movs	r1, #0
 8001720:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001724:	f7ff fcb6 	bl	8001094 <PwmInit>

	UartInit();
 8001728:	f7ff fdae 	bl	8001288 <UartInit>
}
 800172c:	bd08      	pop	{r3, pc}

0800172e <delay>:

void delay(uint32_t time_ms)
{
 800172e:	b510      	push	{r4, lr}
 8001730:	4604      	mov	r4, r0
#ifdef _USE_HW_RTOS
	if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001732:	f000 fbf5 	bl	8001f20 <xTaskGetSchedulerState>
 8001736:	2801      	cmp	r0, #1
 8001738:	d003      	beq.n	8001742 <delay+0x14>
	{
		osDelay(time_ms);
 800173a:	4620      	mov	r0, r4
 800173c:	f000 f82a 	bl	8001794 <osDelay>
	{
		HAL_Delay(time_ms);
	}
	//HAL_Delay(time_ms);
#endif
}
 8001740:	bd10      	pop	{r4, pc}
		HAL_Delay(time_ms);
 8001742:	4620      	mov	r0, r4
 8001744:	f000 fe9e 	bl	8002484 <HAL_Delay>
}
 8001748:	e7fa      	b.n	8001740 <delay+0x12>

0800174a <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800174a:	2884      	cmp	r0, #132	; 0x84
 800174c:	d001      	beq.n	8001752 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800174e:	3003      	adds	r0, #3
 8001750:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001752:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8001754:	4770      	bx	lr

08001756 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001756:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001758:	f000 fa22 	bl	8001ba0 <vTaskStartScheduler>
  
  return osOK;
}
 800175c:	2000      	movs	r0, #0
 800175e:	bd08      	pop	{r3, pc}

08001760 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	460c      	mov	r4, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001766:	6845      	ldr	r5, [r0, #4]
 8001768:	6806      	ldr	r6, [r0, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800176a:	6907      	ldr	r7, [r0, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800176c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8001770:	f7ff ffeb 	bl	800174a <makeFreeRtosPriority>
 8001774:	ab03      	add	r3, sp, #12
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	9000      	str	r0, [sp, #0]
 800177a:	4623      	mov	r3, r4
 800177c:	b2ba      	uxth	r2, r7
 800177e:	4631      	mov	r1, r6
 8001780:	4628      	mov	r0, r5
 8001782:	f000 f9db 	bl	8001b3c <xTaskCreate>
 8001786:	2801      	cmp	r0, #1
 8001788:	d102      	bne.n	8001790 <osThreadCreate+0x30>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800178a:	9803      	ldr	r0, [sp, #12]
}
 800178c:	b005      	add	sp, #20
 800178e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NULL;
 8001790:	2000      	movs	r0, #0
 8001792:	e7fb      	b.n	800178c <osThreadCreate+0x2c>

08001794 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001794:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001796:	b900      	cbnz	r0, 800179a <osDelay+0x6>
 8001798:	2001      	movs	r0, #1
 800179a:	f000 fb4f 	bl	8001e3c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800179e:	2000      	movs	r0, #0
 80017a0:	bd08      	pop	{r3, pc}

080017a2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80017a2:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80017a4:	f000 fbbc 	bl	8001f20 <xTaskGetSchedulerState>
 80017a8:	2801      	cmp	r0, #1
 80017aa:	d100      	bne.n	80017ae <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80017ac:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 80017ae:	f000 fc81 	bl	80020b4 <xPortSysTickHandler>
}
 80017b2:	e7fb      	b.n	80017ac <osSystickHandler+0xa>

080017b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b4:	f100 0308 	add.w	r3, r0, #8
 80017b8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017be:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017c2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017c8:	4770      	bx	lr

080017ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017ce:	4770      	bx	lr

080017d0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80017d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017d8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017da:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80017dc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80017de:	6803      	ldr	r3, [r0, #0]
 80017e0:	3301      	adds	r3, #1
 80017e2:	6003      	str	r3, [r0, #0]
}
 80017e4:	4770      	bx	lr

080017e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017e6:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80017e8:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80017ea:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80017ee:	d011      	beq.n	8001814 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017f0:	f100 0308 	add.w	r3, r0, #8
 80017f4:	461c      	mov	r4, r3
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	42aa      	cmp	r2, r5
 80017fc:	d9fa      	bls.n	80017f4 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80017fe:	6863      	ldr	r3, [r4, #4]
 8001800:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001802:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001804:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001806:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001808:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800180a:	6803      	ldr	r3, [r0, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	6003      	str	r3, [r0, #0]
}
 8001810:	bc30      	pop	{r4, r5}
 8001812:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8001814:	6904      	ldr	r4, [r0, #16]
 8001816:	e7f2      	b.n	80017fe <vListInsert+0x18>

08001818 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001818:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800181a:	6841      	ldr	r1, [r0, #4]
 800181c:	6882      	ldr	r2, [r0, #8]
 800181e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001820:	6841      	ldr	r1, [r0, #4]
 8001822:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	4282      	cmp	r2, r0
 8001828:	d006      	beq.n	8001838 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800182a:	2200      	movs	r2, #0
 800182c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	3a01      	subs	r2, #1
 8001832:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001834:	6818      	ldr	r0, [r3, #0]
}
 8001836:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001838:	6882      	ldr	r2, [r0, #8]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	e7f5      	b.n	800182a <uxListRemove+0x12>
	...

08001840 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <prvResetNextTaskUnblockTime+0x24>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	b923      	cbnz	r3, 8001852 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <prvResetNextTaskUnblockTime+0x28>)
 800184a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <prvResetNextTaskUnblockTime+0x24>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <prvResetNextTaskUnblockTime+0x28>)
 800185e:	601a      	str	r2, [r3, #0]
	}
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000a4c 	.word	0x20000a4c
 8001868:	20000b24 	.word	0x20000b24

0800186c <prvDeleteTCB>:
	{
 800186c:	b510      	push	{r4, lr}
 800186e:	4604      	mov	r4, r0
			vPortFree( pxTCB->pxStack );
 8001870:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8001872:	f000 fd83 	bl	800237c <vPortFree>
			vPortFree( pxTCB );
 8001876:	4620      	mov	r0, r4
 8001878:	f000 fd80 	bl	800237c <vPortFree>
	}
 800187c:	bd10      	pop	{r4, pc}

0800187e <prvInitialiseNewTask>:
{
 800187e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001882:	4680      	mov	r8, r0
 8001884:	460d      	mov	r5, r1
 8001886:	4617      	mov	r7, r2
 8001888:	4699      	mov	r9, r3
 800188a:	9e08      	ldr	r6, [sp, #32]
 800188c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8001890:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001892:	0092      	lsls	r2, r2, #2
 8001894:	21a5      	movs	r1, #165	; 0xa5
 8001896:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001898:	f002 fcdc 	bl	8004254 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800189c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800189e:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80018a2:	3a01      	subs	r2, #1
 80018a4:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80018a8:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018ac:	f04f 0c00 	mov.w	ip, #0
 80018b0:	f1bc 0f0f 	cmp.w	ip, #15
 80018b4:	d80b      	bhi.n	80018ce <prvInitialiseNewTask+0x50>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80018b6:	f815 200c 	ldrb.w	r2, [r5, ip]
 80018ba:	eb04 030c 	add.w	r3, r4, ip
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80018c2:	f815 300c 	ldrb.w	r3, [r5, ip]
 80018c6:	b113      	cbz	r3, 80018ce <prvInitialiseNewTask+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018c8:	f10c 0c01 	add.w	ip, ip, #1
 80018cc:	e7f0      	b.n	80018b0 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018ce:	2300      	movs	r3, #0
 80018d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80018d4:	2e06      	cmp	r6, #6
 80018d6:	d900      	bls.n	80018da <prvInitialiseNewTask+0x5c>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80018d8:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80018da:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80018dc:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80018de:	2500      	movs	r5, #0
 80018e0:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018e2:	1d20      	adds	r0, r4, #4
 80018e4:	f7ff ff71 	bl	80017ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80018e8:	f104 0018 	add.w	r0, r4, #24
 80018ec:	f7ff ff6d 	bl	80017ca <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80018f0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018f2:	f1c6 0607 	rsb	r6, r6, #7
 80018f6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80018f8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80018fa:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80018fc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001900:	464a      	mov	r2, r9
 8001902:	4641      	mov	r1, r8
 8001904:	4638      	mov	r0, r7
 8001906:	f000 fb4b 	bl	8001fa0 <pxPortInitialiseStack>
 800190a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800190c:	f1ba 0f00 	cmp.w	sl, #0
 8001910:	d001      	beq.n	8001916 <prvInitialiseNewTask+0x98>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001912:	f8ca 4000 	str.w	r4, [sl]
}
 8001916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800191c <prvInitialiseTaskLists>:
{
 800191c:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800191e:	2400      	movs	r4, #0
 8001920:	e007      	b.n	8001932 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001922:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001926:	0093      	lsls	r3, r2, #2
 8001928:	480e      	ldr	r0, [pc, #56]	; (8001964 <prvInitialiseTaskLists+0x48>)
 800192a:	4418      	add	r0, r3
 800192c:	f7ff ff42 	bl	80017b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001930:	3401      	adds	r4, #1
 8001932:	2c06      	cmp	r4, #6
 8001934:	d9f5      	bls.n	8001922 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8001936:	4d0c      	ldr	r5, [pc, #48]	; (8001968 <prvInitialiseTaskLists+0x4c>)
 8001938:	4628      	mov	r0, r5
 800193a:	f7ff ff3b 	bl	80017b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800193e:	4c0b      	ldr	r4, [pc, #44]	; (800196c <prvInitialiseTaskLists+0x50>)
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff ff37 	bl	80017b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001946:	480a      	ldr	r0, [pc, #40]	; (8001970 <prvInitialiseTaskLists+0x54>)
 8001948:	f7ff ff34 	bl	80017b4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <prvInitialiseTaskLists+0x58>)
 800194e:	f7ff ff31 	bl	80017b4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <prvInitialiseTaskLists+0x5c>)
 8001954:	f7ff ff2e 	bl	80017b4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <prvInitialiseTaskLists+0x60>)
 800195a:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <prvInitialiseTaskLists+0x64>)
 800195e:	601c      	str	r4, [r3, #0]
}
 8001960:	bd38      	pop	{r3, r4, r5, pc}
 8001962:	bf00      	nop
 8001964:	20000a54 	.word	0x20000a54
 8001968:	20000af8 	.word	0x20000af8
 800196c:	20000b0c 	.word	0x20000b0c
 8001970:	20000b2c 	.word	0x20000b2c
 8001974:	20000b58 	.word	0x20000b58
 8001978:	20000b44 	.word	0x20000b44
 800197c:	20000a4c 	.word	0x20000a4c
 8001980:	20000a50 	.word	0x20000a50

08001984 <prvAddNewTaskToReadyList>:
{
 8001984:	b510      	push	{r4, lr}
 8001986:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001988:	f000 fb34 	bl	8001ff4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <prvAddNewTaskToReadyList+0x94>)
 800198e:	6813      	ldr	r3, [r2, #0]
 8001990:	3301      	adds	r3, #1
 8001992:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001994:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <prvAddNewTaskToReadyList+0x98>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	b15b      	cbz	r3, 80019b2 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <prvAddNewTaskToReadyList+0x9c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	b96b      	cbnz	r3, 80019bc <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <prvAddNewTaskToReadyList+0x98>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d807      	bhi.n	80019bc <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <prvAddNewTaskToReadyList+0x98>)
 80019ae:	601c      	str	r4, [r3, #0]
 80019b0:	e004      	b.n	80019bc <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <prvAddNewTaskToReadyList+0x98>)
 80019b4:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d029      	beq.n	8001a10 <prvAddNewTaskToReadyList+0x8c>
		uxTaskNumber++;
 80019bc:	4a19      	ldr	r2, [pc, #100]	; (8001a24 <prvAddNewTaskToReadyList+0xa0>)
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80019c4:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80019c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80019c8:	2301      	movs	r3, #1
 80019ca:	4083      	lsls	r3, r0
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <prvAddNewTaskToReadyList+0xa4>)
 80019ce:	6811      	ldr	r1, [r2, #0]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019d8:	1d21      	adds	r1, r4, #4
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <prvAddNewTaskToReadyList+0xa8>)
 80019dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80019e0:	f7ff fef6 	bl	80017d0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80019e4:	f000 fb28 	bl	8002038 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <prvAddNewTaskToReadyList+0x9c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b17b      	cbz	r3, 8001a0e <prvAddNewTaskToReadyList+0x8a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019ee:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <prvAddNewTaskToReadyList+0x98>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d209      	bcs.n	8001a0e <prvAddNewTaskToReadyList+0x8a>
			taskYIELD_IF_USING_PREEMPTION();
 80019fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80019fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	f3bf 8f6f 	isb	sy
}
 8001a0e:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8001a10:	f7ff ff84 	bl	800191c <prvInitialiseTaskLists>
 8001a14:	e7d2      	b.n	80019bc <prvAddNewTaskToReadyList+0x38>
 8001a16:	bf00      	nop
 8001a18:	20000ae0 	.word	0x20000ae0
 8001a1c:	20000a48 	.word	0x20000a48
 8001a20:	20000b40 	.word	0x20000b40
 8001a24:	20000af0 	.word	0x20000af0
 8001a28:	20000af4 	.word	0x20000af4
 8001a2c:	20000a54 	.word	0x20000a54

08001a30 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <prvCheckTasksWaitingTermination+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b1d3      	cbz	r3, 8001a6c <prvCheckTasksWaitingTermination+0x3c>
{
 8001a36:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8001a38:	f000 fadc 	bl	8001ff4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <prvCheckTasksWaitingTermination+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a42:	1d20      	adds	r0, r4, #4
 8001a44:	f7ff fee8 	bl	8001818 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001a48:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <prvCheckTasksWaitingTermination+0x48>)
 8001a4a:	6813      	ldr	r3, [r2, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <prvCheckTasksWaitingTermination+0x40>)
 8001a52:	6813      	ldr	r3, [r2, #0]
 8001a54:	3b01      	subs	r3, #1
 8001a56:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8001a58:	f000 faee 	bl	8002038 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff ff05 	bl	800186c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <prvCheckTasksWaitingTermination+0x40>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1e6      	bne.n	8001a38 <prvCheckTasksWaitingTermination+0x8>
}
 8001a6a:	bd10      	pop	{r4, pc}
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000ae4 	.word	0x20000ae4
 8001a74:	20000b58 	.word	0x20000b58
 8001a78:	20000ae0 	.word	0x20000ae0

08001a7c <prvIdleTask>:
{
 8001a7c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8001a7e:	f7ff ffd7 	bl	8001a30 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <prvIdleTask+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d9f9      	bls.n	8001a7e <prvIdleTask+0x2>
				taskYIELD();
 8001a8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a92:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	e7ee      	b.n	8001a7e <prvIdleTask+0x2>
 8001aa0:	20000a54 	.word	0x20000a54

08001aa4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001aac:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x80>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	3004      	adds	r0, #4
 8001ab4:	f7ff feb0 	bl	8001818 <uxListRemove>
 8001ab8:	b950      	cbnz	r0, 8001ad0 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x80>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	fa03 f202 	lsl.w	r2, r3, r2
 8001ac6:	4918      	ldr	r1, [pc, #96]	; (8001b28 <prvAddCurrentTaskToDelayedList+0x84>)
 8001ac8:	680b      	ldr	r3, [r1, #0]
 8001aca:	ea23 0302 	bic.w	r3, r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001ad0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8001ad4:	d00d      	beq.n	8001af2 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001ad6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x80>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8001ade:	42a6      	cmp	r6, r4
 8001ae0:	d910      	bls.n	8001b04 <prvAddCurrentTaskToDelayedList+0x60>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <prvAddCurrentTaskToDelayedList+0x88>)
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x80>)
 8001ae8:	6819      	ldr	r1, [r3, #0]
 8001aea:	3104      	adds	r1, #4
 8001aec:	f7ff fe7b 	bl	80017e6 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001af0:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d0ef      	beq.n	8001ad6 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x80>)
 8001af8:	6819      	ldr	r1, [r3, #0]
 8001afa:	3104      	adds	r1, #4
 8001afc:	480c      	ldr	r0, [pc, #48]	; (8001b30 <prvAddCurrentTaskToDelayedList+0x8c>)
 8001afe:	f7ff fe67 	bl	80017d0 <vListInsertEnd>
 8001b02:	e7f5      	b.n	8001af0 <prvAddCurrentTaskToDelayedList+0x4c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <prvAddCurrentTaskToDelayedList+0x90>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <prvAddCurrentTaskToDelayedList+0x80>)
 8001b0a:	6819      	ldr	r1, [r3, #0]
 8001b0c:	3104      	adds	r1, #4
 8001b0e:	f7ff fe6a 	bl	80017e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	42a3      	cmp	r3, r4
 8001b18:	d9ea      	bls.n	8001af0 <prvAddCurrentTaskToDelayedList+0x4c>
					xNextTaskUnblockTime = xTimeToWake;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <prvAddCurrentTaskToDelayedList+0x94>)
 8001b1c:	601c      	str	r4, [r3, #0]
}
 8001b1e:	e7e7      	b.n	8001af0 <prvAddCurrentTaskToDelayedList+0x4c>
 8001b20:	20000b6c 	.word	0x20000b6c
 8001b24:	20000a48 	.word	0x20000a48
 8001b28:	20000af4 	.word	0x20000af4
 8001b2c:	20000a50 	.word	0x20000a50
 8001b30:	20000b44 	.word	0x20000b44
 8001b34:	20000a4c 	.word	0x20000a4c
 8001b38:	20000b24 	.word	0x20000b24

08001b3c <xTaskCreate>:
	{
 8001b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b40:	b085      	sub	sp, #20
 8001b42:	4607      	mov	r7, r0
 8001b44:	4688      	mov	r8, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b4a:	0090      	lsls	r0, r2, #2
 8001b4c:	f000 fb9e 	bl	800228c <pvPortMalloc>
			if( pxStack != NULL )
 8001b50:	b1f0      	cbz	r0, 8001b90 <xTaskCreate+0x54>
 8001b52:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001b54:	205c      	movs	r0, #92	; 0x5c
 8001b56:	f000 fb99 	bl	800228c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001b5a:	4605      	mov	r5, r0
 8001b5c:	b1a0      	cbz	r0, 8001b88 <xTaskCreate+0x4c>
					pxNewTCB->pxStack = pxStack;
 8001b5e:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8001b62:	b1d5      	cbz	r5, 8001b9a <xTaskCreate+0x5e>
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b64:	2300      	movs	r3, #0
 8001b66:	9303      	str	r3, [sp, #12]
 8001b68:	9502      	str	r5, [sp, #8]
 8001b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	4633      	mov	r3, r6
 8001b74:	4622      	mov	r2, r4
 8001b76:	4641      	mov	r1, r8
 8001b78:	4638      	mov	r0, r7
 8001b7a:	f7ff fe80 	bl	800187e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f7ff ff00 	bl	8001984 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e005      	b.n	8001b94 <xTaskCreate+0x58>
					vPortFree( pxStack );
 8001b88:	4648      	mov	r0, r9
 8001b8a:	f000 fbf7 	bl	800237c <vPortFree>
 8001b8e:	e7e8      	b.n	8001b62 <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8001b94:	b005      	add	sp, #20
 8001b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8001b9e:	e7f9      	b.n	8001b94 <xTaskCreate+0x58>

08001ba0 <vTaskStartScheduler>:
{
 8001ba0:	b500      	push	{lr}
 8001ba2:	b083      	sub	sp, #12
		xReturn = xTaskCreate(	prvIdleTask,
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <vTaskStartScheduler+0x64>)
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2280      	movs	r2, #128	; 0x80
 8001bae:	4916      	ldr	r1, [pc, #88]	; (8001c08 <vTaskStartScheduler+0x68>)
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <vTaskStartScheduler+0x6c>)
 8001bb2:	f7ff ffc3 	bl	8001b3c <xTaskCreate>
	if( xReturn == pdPASS )
 8001bb6:	2801      	cmp	r0, #1
 8001bb8:	d005      	beq.n	8001bc6 <vTaskStartScheduler+0x26>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001bba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001bbe:	d017      	beq.n	8001bf0 <vTaskStartScheduler+0x50>
}
 8001bc0:	b003      	add	sp, #12
 8001bc2:	f85d fb04 	ldr.w	pc, [sp], #4

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bca:	f383 8811 	msr	BASEPRI, r3
 8001bce:	f3bf 8f6f 	isb	sy
 8001bd2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <vTaskStartScheduler+0x70>)
 8001bd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <vTaskStartScheduler+0x74>)
 8001be0:	2201      	movs	r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <vTaskStartScheduler+0x78>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001bea:	f000 fa8d 	bl	8002108 <xPortStartScheduler>
 8001bee:	e7e7      	b.n	8001bc0 <vTaskStartScheduler+0x20>
 8001bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf4:	f383 8811 	msr	BASEPRI, r3
 8001bf8:	f3bf 8f6f 	isb	sy
 8001bfc:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c00:	e7fe      	b.n	8001c00 <vTaskStartScheduler+0x60>
 8001c02:	bf00      	nop
 8001c04:	20000b20 	.word	0x20000b20
 8001c08:	08007298 	.word	0x08007298
 8001c0c:	08001a7d 	.word	0x08001a7d
 8001c10:	20000b24 	.word	0x20000b24
 8001c14:	20000b40 	.word	0x20000b40
 8001c18:	20000b6c 	.word	0x20000b6c

08001c1c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001c1c:	4a02      	ldr	r2, [pc, #8]	; (8001c28 <vTaskSuspendAll+0xc>)
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000aec 	.word	0x20000aec

08001c2c <xTaskIncrementTick>:
{
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c2e:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <xTaskIncrementTick+0xec>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d164      	bne.n	8001d00 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001c36:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <xTaskIncrementTick+0xf0>)
 8001c38:	681d      	ldr	r5, [r3, #0]
 8001c3a:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8001c3c:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001c3e:	b9c5      	cbnz	r5, 8001c72 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001c40:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <xTaskIncrementTick+0xf4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	b143      	cbz	r3, 8001c5a <xTaskIncrementTick+0x2e>
 8001c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4c:	f383 8811 	msr	BASEPRI, r3
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	f3bf 8f4f 	dsb	sy
 8001c58:	e7fe      	b.n	8001c58 <xTaskIncrementTick+0x2c>
 8001c5a:	4a31      	ldr	r2, [pc, #196]	; (8001d20 <xTaskIncrementTick+0xf4>)
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <xTaskIncrementTick+0xf8>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	6010      	str	r0, [r2, #0]
 8001c64:	6019      	str	r1, [r3, #0]
 8001c66:	4a30      	ldr	r2, [pc, #192]	; (8001d28 <xTaskIncrementTick+0xfc>)
 8001c68:	6813      	ldr	r3, [r2, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	f7ff fde7 	bl	8001840 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <xTaskIncrementTick+0x100>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	42ab      	cmp	r3, r5
 8001c78:	d938      	bls.n	8001cec <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 8001c7a:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c7c:	4b2c      	ldr	r3, [pc, #176]	; (8001d30 <xTaskIncrementTick+0x104>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001c86:	009a      	lsls	r2, r3, #2
 8001c88:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <xTaskIncrementTick+0x108>)
 8001c8a:	589b      	ldr	r3, [r3, r2]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d93c      	bls.n	8001d0a <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 8001c90:	2701      	movs	r7, #1
 8001c92:	e03a      	b.n	8001d0a <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 8001c94:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <xTaskIncrementTick+0xf4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	b343      	cbz	r3, 8001cf0 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c9e:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <xTaskIncrementTick+0xf4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ca6:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8001ca8:	429d      	cmp	r5, r3
 8001caa:	d326      	bcc.n	8001cfa <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cac:	1d26      	adds	r6, r4, #4
 8001cae:	4630      	mov	r0, r6
 8001cb0:	f7ff fdb2 	bl	8001818 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001cb6:	b11b      	cbz	r3, 8001cc0 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cb8:	f104 0018 	add.w	r0, r4, #24
 8001cbc:	f7ff fdac 	bl	8001818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	491c      	ldr	r1, [pc, #112]	; (8001d38 <xTaskIncrementTick+0x10c>)
 8001cc8:	6808      	ldr	r0, [r1, #0]
 8001cca:	4302      	orrs	r2, r0
 8001ccc:	600a      	str	r2, [r1, #0]
 8001cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001cd2:	009a      	lsls	r2, r3, #2
 8001cd4:	4631      	mov	r1, r6
 8001cd6:	4817      	ldr	r0, [pc, #92]	; (8001d34 <xTaskIncrementTick+0x108>)
 8001cd8:	4410      	add	r0, r2
 8001cda:	f7ff fd79 	bl	80017d0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <xTaskIncrementTick+0x104>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d2d4      	bcs.n	8001c94 <xTaskIncrementTick+0x68>
 8001cea:	e7d4      	b.n	8001c96 <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8001cec:	2700      	movs	r7, #0
 8001cee:	e7d2      	b.n	8001c96 <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <xTaskIncrementTick+0x100>)
 8001cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf6:	601a      	str	r2, [r3, #0]
					break;
 8001cf8:	e7c0      	b.n	8001c7c <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <xTaskIncrementTick+0x100>)
 8001cfc:	6013      	str	r3, [r2, #0]
						break;
 8001cfe:	e7bd      	b.n	8001c7c <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 8001d00:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <xTaskIncrementTick+0x110>)
 8001d02:	6813      	ldr	r3, [r2, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001d08:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <xTaskIncrementTick+0x114>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b103      	cbz	r3, 8001d12 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 8001d10:	2701      	movs	r7, #1
}
 8001d12:	4638      	mov	r0, r7
 8001d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000aec 	.word	0x20000aec
 8001d1c:	20000b6c 	.word	0x20000b6c
 8001d20:	20000a4c 	.word	0x20000a4c
 8001d24:	20000a50 	.word	0x20000a50
 8001d28:	20000b28 	.word	0x20000b28
 8001d2c:	20000b24 	.word	0x20000b24
 8001d30:	20000a48 	.word	0x20000a48
 8001d34:	20000a54 	.word	0x20000a54
 8001d38:	20000af4 	.word	0x20000af4
 8001d3c:	20000ae8 	.word	0x20000ae8
 8001d40:	20000b70 	.word	0x20000b70

08001d44 <xTaskResumeAll>:
{
 8001d44:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8001d46:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <xTaskResumeAll+0xd8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b943      	cbnz	r3, 8001d5e <xTaskResumeAll+0x1a>
 8001d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d50:	f383 8811 	msr	BASEPRI, r3
 8001d54:	f3bf 8f6f 	isb	sy
 8001d58:	f3bf 8f4f 	dsb	sy
 8001d5c:	e7fe      	b.n	8001d5c <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8001d5e:	f000 f949 	bl	8001ff4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <xTaskResumeAll+0xd8>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	3a01      	subs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d14f      	bne.n	8001e10 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <xTaskResumeAll+0xdc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b90b      	cbnz	r3, 8001d7a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001d76:	2400      	movs	r4, #0
 8001d78:	e04b      	b.n	8001e12 <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8001d7a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <xTaskResumeAll+0xe0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b31b      	cbz	r3, 8001dca <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d82:	4b28      	ldr	r3, [pc, #160]	; (8001e24 <xTaskResumeAll+0xe0>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d88:	f104 0018 	add.w	r0, r4, #24
 8001d8c:	f7ff fd44 	bl	8001818 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d90:	1d25      	adds	r5, r4, #4
 8001d92:	4628      	mov	r0, r5
 8001d94:	f7ff fd40 	bl	8001818 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4083      	lsls	r3, r0
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <xTaskResumeAll+0xe4>)
 8001da0:	6811      	ldr	r1, [r2, #0]
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001daa:	4629      	mov	r1, r5
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <xTaskResumeAll+0xe8>)
 8001dae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001db2:	f7ff fd0d 	bl	80017d0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001db6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <xTaskResumeAll+0xec>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d3dc      	bcc.n	8001d7c <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <xTaskResumeAll+0xf0>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e7d8      	b.n	8001d7c <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8001dca:	b10c      	cbz	r4, 8001dd0 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8001dcc:	f7ff fd38 	bl	8001840 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <xTaskResumeAll+0xf4>)
 8001dd2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001dd4:	b984      	cbnz	r4, 8001df8 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8001dd6:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <xTaskResumeAll+0xf0>)
 8001dd8:	681c      	ldr	r4, [r3, #0]
 8001dda:	b1d4      	cbz	r4, 8001e12 <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8001ddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001de4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001df0:	2401      	movs	r4, #1
 8001df2:	e00e      	b.n	8001e12 <xTaskResumeAll+0xce>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001df4:	3c01      	subs	r4, #1
 8001df6:	d007      	beq.n	8001e08 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8001df8:	f7ff ff18 	bl	8001c2c <xTaskIncrementTick>
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	d0f9      	beq.n	8001df4 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <xTaskResumeAll+0xf0>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	e7f5      	b.n	8001df4 <xTaskResumeAll+0xb0>
						uxPendedTicks = 0;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <xTaskResumeAll+0xf4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e7e2      	b.n	8001dd6 <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8001e10:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001e12:	f000 f911 	bl	8002038 <vPortExitCritical>
}
 8001e16:	4620      	mov	r0, r4
 8001e18:	bd38      	pop	{r3, r4, r5, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000aec 	.word	0x20000aec
 8001e20:	20000ae0 	.word	0x20000ae0
 8001e24:	20000b2c 	.word	0x20000b2c
 8001e28:	20000af4 	.word	0x20000af4
 8001e2c:	20000a54 	.word	0x20000a54
 8001e30:	20000a48 	.word	0x20000a48
 8001e34:	20000b70 	.word	0x20000b70
 8001e38:	20000ae8 	.word	0x20000ae8

08001e3c <vTaskDelay>:
	{
 8001e3c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001e3e:	b1a8      	cbz	r0, 8001e6c <vTaskDelay+0x30>
 8001e40:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <vTaskDelay+0x48>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b143      	cbz	r3, 8001e5a <vTaskDelay+0x1e>
 8001e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4c:	f383 8811 	msr	BASEPRI, r3
 8001e50:	f3bf 8f6f 	isb	sy
 8001e54:	f3bf 8f4f 	dsb	sy
 8001e58:	e7fe      	b.n	8001e58 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8001e5a:	f7ff fedf 	bl	8001c1c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4620      	mov	r0, r4
 8001e62:	f7ff fe1f 	bl	8001aa4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001e66:	f7ff ff6d 	bl	8001d44 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001e6a:	b948      	cbnz	r0, 8001e80 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8001e6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	f3bf 8f6f 	isb	sy
	}
 8001e80:	bd10      	pop	{r4, pc}
 8001e82:	bf00      	nop
 8001e84:	20000aec 	.word	0x20000aec

08001e88 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e88:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <vTaskSwitchContext+0x84>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b11b      	cbz	r3, 8001e96 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <vTaskSwitchContext+0x88>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <vTaskSwitchContext+0x88>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <vTaskSwitchContext+0x8c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f1c3 031f 	rsb	r3, r3, #31
 8001eaa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001eae:	008a      	lsls	r2, r1, #2
 8001eb0:	4919      	ldr	r1, [pc, #100]	; (8001f18 <vTaskSwitchContext+0x90>)
 8001eb2:	588a      	ldr	r2, [r1, r2]
 8001eb4:	b942      	cbnz	r2, 8001ec8 <vTaskSwitchContext+0x40>
	__asm volatile
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	e7fe      	b.n	8001ec6 <vTaskSwitchContext+0x3e>
 8001ec8:	4913      	ldr	r1, [pc, #76]	; (8001f18 <vTaskSwitchContext+0x90>)
 8001eca:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8001ece:	0082      	lsls	r2, r0, #2
 8001ed0:	440a      	add	r2, r1
 8001ed2:	6850      	ldr	r0, [r2, #4]
 8001ed4:	6840      	ldr	r0, [r0, #4]
 8001ed6:	6050      	str	r0, [r2, #4]
 8001ed8:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8001edc:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	4411      	add	r1, r2
 8001ee4:	4288      	cmp	r0, r1
 8001ee6:	d009      	beq.n	8001efc <vTaskSwitchContext+0x74>
 8001ee8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001eec:	009a      	lsls	r2, r3, #2
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <vTaskSwitchContext+0x90>)
 8001ef0:	4413      	add	r3, r2
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <vTaskSwitchContext+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
}
 8001efa:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001efc:	6840      	ldr	r0, [r0, #4]
 8001efe:	4662      	mov	r2, ip
 8001f00:	0091      	lsls	r1, r2, #2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <vTaskSwitchContext+0x90>)
 8001f04:	440a      	add	r2, r1
 8001f06:	6050      	str	r0, [r2, #4]
 8001f08:	e7ee      	b.n	8001ee8 <vTaskSwitchContext+0x60>
 8001f0a:	bf00      	nop
 8001f0c:	20000aec 	.word	0x20000aec
 8001f10:	20000b70 	.word	0x20000b70
 8001f14:	20000af4 	.word	0x20000af4
 8001f18:	20000a54 	.word	0x20000a54
 8001f1c:	20000a48 	.word	0x20000a48

08001f20 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <xTaskGetSchedulerState+0x18>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	b133      	cbz	r3, 8001f34 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <xTaskGetSchedulerState+0x1c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b10b      	cbz	r3, 8001f30 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f2c:	2000      	movs	r0, #0
	}
 8001f2e:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8001f30:	2002      	movs	r0, #2
 8001f32:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f34:	2001      	movs	r0, #1
 8001f36:	4770      	bx	lr
 8001f38:	20000b40 	.word	0x20000b40
 8001f3c:	20000aec 	.word	0x20000aec

08001f40 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f40:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <prvTaskExitError+0x3c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f4e:	d008      	beq.n	8001f62 <prvTaskExitError+0x22>
 8001f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f54:	f383 8811 	msr	BASEPRI, r3
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	f3bf 8f4f 	dsb	sy
 8001f60:	e7fe      	b.n	8001f60 <prvTaskExitError+0x20>
 8001f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f66:	f383 8811 	msr	BASEPRI, r3
 8001f6a:	f3bf 8f6f 	isb	sy
 8001f6e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f72:	9b01      	ldr	r3, [sp, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0fc      	beq.n	8001f72 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f78:	b002      	add	sp, #8
 8001f7a:	4770      	bx	lr
 8001f7c:	20000040 	.word	0x20000040

08001f80 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001f80:	4806      	ldr	r0, [pc, #24]	; (8001f9c <prvPortStartFirstTask+0x1c>)
 8001f82:	6800      	ldr	r0, [r0, #0]
 8001f84:	6800      	ldr	r0, [r0, #0]
 8001f86:	f380 8808 	msr	MSP, r0
 8001f8a:	b662      	cpsie	i
 8001f8c:	b661      	cpsie	f
 8001f8e:	f3bf 8f4f 	dsb	sy
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	df00      	svc	0
 8001f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001f9a:	0000      	.short	0x0000
 8001f9c:	e000ed08 	.word	0xe000ed08

08001fa0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001fa8:	f021 0101 	bic.w	r1, r1, #1
 8001fac:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001fb0:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <pxPortInitialiseStack+0x20>)
 8001fb2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001fb6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001fba:	3840      	subs	r0, #64	; 0x40
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	08001f41 	.word	0x08001f41
	...

08001fd0 <SVC_Handler>:
	__asm volatile (
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <pxCurrentTCBConst2>)
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	6808      	ldr	r0, [r1, #0]
 8001fd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fda:	f380 8809 	msr	PSP, r0
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f380 8811 	msr	BASEPRI, r0
 8001fea:	f04e 0e0d 	orr.w	lr, lr, #13
 8001fee:	4770      	bx	lr

08001ff0 <pxCurrentTCBConst2>:
 8001ff0:	20000a48 	.word	0x20000a48

08001ff4 <vPortEnterCritical>:
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002004:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <vPortEnterCritical+0x40>)
 8002006:	6813      	ldr	r3, [r2, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800200c:	2b01      	cmp	r3, #1
 800200e:	d000      	beq.n	8002012 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8002010:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002012:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002016:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800201a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800201e:	d0f7      	beq.n	8002010 <vPortEnterCritical+0x1c>
 8002020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002024:	f383 8811 	msr	BASEPRI, r3
 8002028:	f3bf 8f6f 	isb	sy
 800202c:	f3bf 8f4f 	dsb	sy
 8002030:	e7fe      	b.n	8002030 <vPortEnterCritical+0x3c>
 8002032:	bf00      	nop
 8002034:	20000040 	.word	0x20000040

08002038 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <vPortExitCritical+0x28>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	b943      	cbnz	r3, 8002050 <vPortExitCritical+0x18>
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	e7fe      	b.n	800204e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002050:	3b01      	subs	r3, #1
 8002052:	4a03      	ldr	r2, [pc, #12]	; (8002060 <vPortExitCritical+0x28>)
 8002054:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002056:	b90b      	cbnz	r3, 800205c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002058:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000040 	.word	0x20000040
	...

08002070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002070:	f3ef 8009 	mrs	r0, PSP
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <pxCurrentTCBConst>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002080:	6010      	str	r0, [r2, #0]
 8002082:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002086:	f04f 0050 	mov.w	r0, #80	; 0x50
 800208a:	f380 8811 	msr	BASEPRI, r0
 800208e:	f7ff fefb 	bl	8001e88 <vTaskSwitchContext>
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f380 8811 	msr	BASEPRI, r0
 800209a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	6808      	ldr	r0, [r1, #0]
 80020a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020a6:	f380 8809 	msr	PSP, r0
 80020aa:	f3bf 8f6f 	isb	sy
 80020ae:	4770      	bx	lr

080020b0 <pxCurrentTCBConst>:
 80020b0:	20000a48 	.word	0x20000a48

080020b4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80020b4:	b508      	push	{r3, lr}
	__asm volatile
 80020b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80020c6:	f7ff fdb1 	bl	8001c2c <xTaskIncrementTick>
 80020ca:	b128      	cbz	r0, 80020d8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80020cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80020d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 80020d8:	2300      	movs	r3, #0
 80020da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80020de:	bd08      	pop	{r3, pc}

080020e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80020e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80020e4:	2300      	movs	r3, #0
 80020e6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80020e8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <vPortSetupTimerInterrupt+0x20>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4905      	ldr	r1, [pc, #20]	; (8002104 <vPortSetupTimerInterrupt+0x24>)
 80020f0:	fba1 1303 	umull	r1, r3, r1, r3
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80020fa:	2307      	movs	r3, #7
 80020fc:	6113      	str	r3, [r2, #16]
}
 80020fe:	4770      	bx	lr
 8002100:	20000000 	.word	0x20000000
 8002104:	10624dd3 	.word	0x10624dd3

08002108 <xPortStartScheduler>:
{
 8002108:	b510      	push	{r4, lr}
 800210a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <xPortStartScheduler+0xb0>)
 800210e:	781a      	ldrb	r2, [r3, #0]
 8002110:	b2d2      	uxtb	r2, r2
 8002112:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002120:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002128:	4a24      	ldr	r2, [pc, #144]	; (80021bc <xPortStartScheduler+0xb4>)
 800212a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <xPortStartScheduler+0xb8>)
 800212e:	2207      	movs	r2, #7
 8002130:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002132:	e009      	b.n	8002148 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 8002134:	4a22      	ldr	r2, [pc, #136]	; (80021c0 <xPortStartScheduler+0xb8>)
 8002136:	6813      	ldr	r3, [r2, #0]
 8002138:	3b01      	subs	r3, #1
 800213a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800213c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002148:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800214c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002150:	d1f0      	bne.n	8002134 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <xPortStartScheduler+0xb8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d008      	beq.n	800216c <xPortStartScheduler+0x64>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	e7fe      	b.n	800216a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4a14      	ldr	r2, [pc, #80]	; (80021c0 <xPortStartScheduler+0xb8>)
 8002170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002172:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002176:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002178:	9b01      	ldr	r3, [sp, #4]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <xPortStartScheduler+0xb0>)
 800217e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002180:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002184:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8002188:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800218c:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002190:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8002194:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002198:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 800219c:	f7ff ffa0 	bl	80020e0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80021a0:	2400      	movs	r4, #0
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <xPortStartScheduler+0xbc>)
 80021a4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80021a6:	f7ff feeb 	bl	8001f80 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80021aa:	f7ff fe6d 	bl	8001e88 <vTaskSwitchContext>
	prvTaskExitError();
 80021ae:	f7ff fec7 	bl	8001f40 <prvTaskExitError>
}
 80021b2:	4620      	mov	r0, r4
 80021b4:	b002      	add	sp, #8
 80021b6:	bd10      	pop	{r4, pc}
 80021b8:	e000e400 	.word	0xe000e400
 80021bc:	20000b74 	.word	0x20000b74
 80021c0:	20000b78 	.word	0x20000b78
 80021c4:	20000040 	.word	0x20000040

080021c8 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80021ca:	f012 0f07 	tst.w	r2, #7
 80021ce:	d01e      	beq.n	800220e <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80021d0:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80021d2:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80021d6:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 80021da:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80021dc:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80021de:	480e      	ldr	r0, [pc, #56]	; (8002218 <prvHeapInit+0x50>)
 80021e0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80021e2:	2100      	movs	r1, #0
 80021e4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80021e6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80021e8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80021ea:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80021ee:	480b      	ldr	r0, [pc, #44]	; (800221c <prvHeapInit+0x54>)
 80021f0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80021f2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80021f4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80021f6:	1a99      	subs	r1, r3, r2
 80021f8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80021fa:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <prvHeapInit+0x58>)
 80021fe:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002200:	4b08      	ldr	r3, [pc, #32]	; (8002224 <prvHeapInit+0x5c>)
 8002202:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <prvHeapInit+0x60>)
 8002206:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800220e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002212:	e7e4      	b.n	80021de <prvHeapInit+0x16>
 8002214:	20000b80 	.word	0x20000b80
 8002218:	2000178c 	.word	0x2000178c
 800221c:	20000b7c 	.word	0x20000b7c
 8002220:	20001788 	.word	0x20001788
 8002224:	20001784 	.word	0x20001784
 8002228:	20001780 	.word	0x20001780

0800222c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800222c:	4b15      	ldr	r3, [pc, #84]	; (8002284 <prvInsertBlockIntoFreeList+0x58>)
 800222e:	461a      	mov	r2, r3
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4283      	cmp	r3, r0
 8002234:	d3fb      	bcc.n	800222e <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002236:	6851      	ldr	r1, [r2, #4]
 8002238:	eb02 0c01 	add.w	ip, r2, r1
 800223c:	4584      	cmp	ip, r0
 800223e:	d009      	beq.n	8002254 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002240:	6841      	ldr	r1, [r0, #4]
 8002242:	eb00 0c01 	add.w	ip, r0, r1
 8002246:	4563      	cmp	r3, ip
 8002248:	d009      	beq.n	800225e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800224a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800224c:	4290      	cmp	r0, r2
 800224e:	d018      	beq.n	8002282 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002250:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8002252:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002254:	6840      	ldr	r0, [r0, #4]
 8002256:	4401      	add	r1, r0
 8002258:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800225a:	4610      	mov	r0, r2
 800225c:	e7f0      	b.n	8002240 <prvInsertBlockIntoFreeList+0x14>
{
 800225e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002260:	4c09      	ldr	r4, [pc, #36]	; (8002288 <prvInsertBlockIntoFreeList+0x5c>)
 8002262:	6824      	ldr	r4, [r4, #0]
 8002264:	42a3      	cmp	r3, r4
 8002266:	d00a      	beq.n	800227e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4419      	add	r1, r3
 800226c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800226e:	6813      	ldr	r3, [r2, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8002274:	4290      	cmp	r0, r2
 8002276:	d000      	beq.n	800227a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002278:	6010      	str	r0, [r2, #0]
	}
}
 800227a:	bc10      	pop	{r4}
 800227c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800227e:	6004      	str	r4, [r0, #0]
 8002280:	e7f8      	b.n	8002274 <prvInsertBlockIntoFreeList+0x48>
 8002282:	4770      	bx	lr
 8002284:	2000178c 	.word	0x2000178c
 8002288:	20000b7c 	.word	0x20000b7c

0800228c <pvPortMalloc>:
{
 800228c:	b570      	push	{r4, r5, r6, lr}
 800228e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8002290:	f7ff fcc4 	bl	8001c1c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <pvPortMalloc+0xdc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b1a3      	cbz	r3, 80022c4 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800229a:	4b34      	ldr	r3, [pc, #208]	; (800236c <pvPortMalloc+0xe0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	421d      	tst	r5, r3
 80022a0:	d14a      	bne.n	8002338 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 80022a2:	b135      	cbz	r5, 80022b2 <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 80022a4:	3508      	adds	r5, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80022a6:	f015 0f07 	tst.w	r5, #7
 80022aa:	d002      	beq.n	80022b2 <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80022ac:	f025 0507 	bic.w	r5, r5, #7
 80022b0:	3508      	adds	r5, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80022b2:	2d00      	cmp	r5, #0
 80022b4:	d042      	beq.n	800233c <pvPortMalloc+0xb0>
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <pvPortMalloc+0xe4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	42ab      	cmp	r3, r5
 80022bc:	d34d      	bcc.n	800235a <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 80022be:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <pvPortMalloc+0xe8>)
 80022c0:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022c2:	e004      	b.n	80022ce <pvPortMalloc+0x42>
			prvHeapInit();
 80022c4:	f7ff ff80 	bl	80021c8 <prvHeapInit>
 80022c8:	e7e7      	b.n	800229a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 80022ca:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80022cc:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	42ab      	cmp	r3, r5
 80022d2:	d202      	bcs.n	80022da <pvPortMalloc+0x4e>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f7      	bne.n	80022ca <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <pvPortMalloc+0xdc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	42a3      	cmp	r3, r4
 80022e0:	d03d      	beq.n	800235e <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022e2:	6816      	ldr	r6, [r2, #0]
 80022e4:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022e6:	6823      	ldr	r3, [r4, #0]
 80022e8:	6013      	str	r3, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022ea:	6863      	ldr	r3, [r4, #4]
 80022ec:	1b5b      	subs	r3, r3, r5
 80022ee:	2b10      	cmp	r3, #16
 80022f0:	d910      	bls.n	8002314 <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022f2:	1960      	adds	r0, r4, r5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022f4:	f010 0f07 	tst.w	r0, #7
 80022f8:	d008      	beq.n	800230c <pvPortMalloc+0x80>
 80022fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	e7fe      	b.n	800230a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800230c:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800230e:	6065      	str	r5, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002310:	f7ff ff8c 	bl	800222c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002314:	6862      	ldr	r2, [r4, #4]
 8002316:	4916      	ldr	r1, [pc, #88]	; (8002370 <pvPortMalloc+0xe4>)
 8002318:	680b      	ldr	r3, [r1, #0]
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800231e:	4916      	ldr	r1, [pc, #88]	; (8002378 <pvPortMalloc+0xec>)
 8002320:	6809      	ldr	r1, [r1, #0]
 8002322:	428b      	cmp	r3, r1
 8002324:	d201      	bcs.n	800232a <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002326:	4914      	ldr	r1, [pc, #80]	; (8002378 <pvPortMalloc+0xec>)
 8002328:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <pvPortMalloc+0xe0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	e002      	b.n	800233e <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 8002338:	2600      	movs	r6, #0
 800233a:	e000      	b.n	800233e <pvPortMalloc+0xb2>
 800233c:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800233e:	f7ff fd01 	bl	8001d44 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002342:	f016 0f07 	tst.w	r6, #7
 8002346:	d00c      	beq.n	8002362 <pvPortMalloc+0xd6>
 8002348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234c:	f383 8811 	msr	BASEPRI, r3
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	e7fe      	b.n	8002358 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800235a:	2600      	movs	r6, #0
 800235c:	e7ef      	b.n	800233e <pvPortMalloc+0xb2>
 800235e:	2600      	movs	r6, #0
 8002360:	e7ed      	b.n	800233e <pvPortMalloc+0xb2>
}
 8002362:	4630      	mov	r0, r6
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	bf00      	nop
 8002368:	20000b7c 	.word	0x20000b7c
 800236c:	20001780 	.word	0x20001780
 8002370:	20001784 	.word	0x20001784
 8002374:	2000178c 	.word	0x2000178c
 8002378:	20001788 	.word	0x20001788

0800237c <vPortFree>:
	if( pv != NULL )
 800237c:	b380      	cbz	r0, 80023e0 <vPortFree+0x64>
{
 800237e:	b538      	push	{r3, r4, r5, lr}
 8002380:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8002382:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002386:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800238a:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <vPortFree+0x68>)
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	4213      	tst	r3, r2
 8002390:	d108      	bne.n	80023a4 <vPortFree+0x28>
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	e7fe      	b.n	80023a2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80023a4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80023a8:	b141      	cbz	r1, 80023bc <vPortFree+0x40>
 80023aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
 80023ba:	e7fe      	b.n	80023ba <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80023bc:	ea23 0302 	bic.w	r3, r3, r2
 80023c0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80023c4:	f7ff fc2a 	bl	8001c1c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80023c8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <vPortFree+0x6c>)
 80023ce:	6813      	ldr	r3, [r2, #0]
 80023d0:	440b      	add	r3, r1
 80023d2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80023d4:	4628      	mov	r0, r5
 80023d6:	f7ff ff29 	bl	800222c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 80023da:	f7ff fcb3 	bl	8001d44 <xTaskResumeAll>
}
 80023de:	bd38      	pop	{r3, r4, r5, pc}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20001780 	.word	0x20001780
 80023e8:	20001784 	.word	0x20001784

080023ec <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b510      	push	{r4, lr}
 80023f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_InitTick+0x40>)
 80023f6:	7818      	ldrb	r0, [r3, #0]
 80023f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_InitTick+0x44>)
 8002402:	6810      	ldr	r0, [r2, #0]
 8002404:	fbb0 f0f3 	udiv	r0, r0, r3
 8002408:	f000 fa0e 	bl	8002828 <HAL_SYSTICK_Config>
 800240c:	b968      	cbnz	r0, 800242a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800240e:	2c0f      	cmp	r4, #15
 8002410:	d901      	bls.n	8002416 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002412:	2001      	movs	r0, #1
 8002414:	e00a      	b.n	800242c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002416:	2200      	movs	r2, #0
 8002418:	4621      	mov	r1, r4
 800241a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800241e:	f000 f9ab 	bl	8002778 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_InitTick+0x48>)
 8002424:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002426:	2000      	movs	r0, #0
 8002428:	e000      	b.n	800242c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800242a:	2001      	movs	r0, #1
}
 800242c:	bd10      	pop	{r4, pc}
 800242e:	bf00      	nop
 8002430:	20000044 	.word	0x20000044
 8002434:	20000000 	.word	0x20000000
 8002438:	20000048 	.word	0x20000048

0800243c <HAL_Init>:
{
 800243c:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800243e:	4a07      	ldr	r2, [pc, #28]	; (800245c <HAL_Init+0x20>)
 8002440:	6813      	ldr	r3, [r2, #0]
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002448:	2003      	movs	r0, #3
 800244a:	f000 f983 	bl	8002754 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800244e:	200f      	movs	r0, #15
 8002450:	f7ff ffce 	bl	80023f0 <HAL_InitTick>
  HAL_MspInit();
 8002454:	f7ff ffca 	bl	80023ec <HAL_MspInit>
}
 8002458:	2000      	movs	r0, #0
 800245a:	bd08      	pop	{r3, pc}
 800245c:	40022000 	.word	0x40022000

08002460 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002460:	4a03      	ldr	r2, [pc, #12]	; (8002470 <HAL_IncTick+0x10>)
 8002462:	6811      	ldr	r1, [r2, #0]
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_IncTick+0x14>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	440b      	add	r3, r1
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20001794 	.word	0x20001794
 8002474:	20000044 	.word	0x20000044

08002478 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002478:	4b01      	ldr	r3, [pc, #4]	; (8002480 <HAL_GetTick+0x8>)
 800247a:	6818      	ldr	r0, [r3, #0]
}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20001794 	.word	0x20001794

08002484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff fff6 	bl	8002478 <HAL_GetTick>
 800248c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002492:	d002      	beq.n	800249a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <HAL_Delay+0x24>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249a:	f7ff ffed 	bl	8002478 <HAL_GetTick>
 800249e:	1b40      	subs	r0, r0, r5
 80024a0:	42a0      	cmp	r0, r4
 80024a2:	d3fa      	bcc.n	800249a <HAL_Delay+0x16>
  {
  }
}
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
 80024a6:	bf00      	nop
 80024a8:	20000044 	.word	0x20000044

080024ac <HAL_ADC_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024b0:	b430      	push	{r4, r5}
 80024b2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80024b4:	2200      	movs	r2, #0
 80024b6:	9201      	str	r2, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024b8:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80024bc:	2a01      	cmp	r2, #1
 80024be:	f000 8091 	beq.w	80025e4 <HAL_ADC_ConfigChannel+0x134>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2201      	movs	r2, #1
 80024c6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ca:	684a      	ldr	r2, [r1, #4]
 80024cc:	2a06      	cmp	r2, #6
 80024ce:	d82d      	bhi.n	800252c <HAL_ADC_ConfigChannel+0x7c>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024d0:	6804      	ldr	r4, [r0, #0]
 80024d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80024d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80024d8:	3a05      	subs	r2, #5
 80024da:	f04f 0c1f 	mov.w	ip, #31
 80024de:	fa0c fc02 	lsl.w	ip, ip, r2
 80024e2:	ea20 000c 	bic.w	r0, r0, ip
 80024e6:	680d      	ldr	r5, [r1, #0]
 80024e8:	fa05 f202 	lsl.w	r2, r5, r2
 80024ec:	4302      	orrs	r2, r0
 80024ee:	6362      	str	r2, [r4, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024f0:	680a      	ldr	r2, [r1, #0]
 80024f2:	2a09      	cmp	r2, #9
 80024f4:	d93a      	bls.n	800256c <HAL_ADC_ConfigChannel+0xbc>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024f6:	681c      	ldr	r4, [r3, #0]
 80024f8:	68e0      	ldr	r0, [r4, #12]
 80024fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80024fe:	3a1e      	subs	r2, #30
 8002500:	f04f 0c07 	mov.w	ip, #7
 8002504:	fa0c fc02 	lsl.w	ip, ip, r2
 8002508:	ea20 000c 	bic.w	r0, r0, ip
 800250c:	688d      	ldr	r5, [r1, #8]
 800250e:	fa05 f202 	lsl.w	r2, r5, r2
 8002512:	4302      	orrs	r2, r0
 8002514:	60e2      	str	r2, [r4, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002516:	680a      	ldr	r2, [r1, #0]
 8002518:	3a10      	subs	r2, #16
 800251a:	2a01      	cmp	r2, #1
 800251c:	d936      	bls.n	800258c <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800251e:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8002526:	b002      	add	sp, #8
 8002528:	bc30      	pop	{r4, r5}
 800252a:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 800252c:	2a0c      	cmp	r2, #12
 800252e:	d80e      	bhi.n	800254e <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002530:	6805      	ldr	r5, [r0, #0]
 8002532:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002534:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002538:	3a23      	subs	r2, #35	; 0x23
 800253a:	241f      	movs	r4, #31
 800253c:	4094      	lsls	r4, r2
 800253e:	ea20 0004 	bic.w	r0, r0, r4
 8002542:	680c      	ldr	r4, [r1, #0]
 8002544:	fa04 f202 	lsl.w	r2, r4, r2
 8002548:	4302      	orrs	r2, r0
 800254a:	632a      	str	r2, [r5, #48]	; 0x30
 800254c:	e7d0      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800254e:	6805      	ldr	r5, [r0, #0]
 8002550:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002552:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002556:	3a41      	subs	r2, #65	; 0x41
 8002558:	241f      	movs	r4, #31
 800255a:	4094      	lsls	r4, r2
 800255c:	ea20 0004 	bic.w	r0, r0, r4
 8002560:	680c      	ldr	r4, [r1, #0]
 8002562:	fa04 f202 	lsl.w	r2, r4, r2
 8002566:	4302      	orrs	r2, r0
 8002568:	62ea      	str	r2, [r5, #44]	; 0x2c
 800256a:	e7c1      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800256c:	681c      	ldr	r4, [r3, #0]
 800256e:	6920      	ldr	r0, [r4, #16]
 8002570:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002574:	f04f 0c07 	mov.w	ip, #7
 8002578:	fa0c fc02 	lsl.w	ip, ip, r2
 800257c:	ea20 000c 	bic.w	r0, r0, ip
 8002580:	688d      	ldr	r5, [r1, #8]
 8002582:	fa05 f202 	lsl.w	r2, r5, r2
 8002586:	4302      	orrs	r2, r0
 8002588:	6122      	str	r2, [r4, #16]
 800258a:	e7c4      	b.n	8002516 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4816      	ldr	r0, [pc, #88]	; (80025e8 <HAL_ADC_ConfigChannel+0x138>)
 8002590:	4282      	cmp	r2, r0
 8002592:	d005      	beq.n	80025a0 <HAL_ADC_ConfigChannel+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	f042 0220 	orr.w	r2, r2, #32
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800259c:	2001      	movs	r0, #1
 800259e:	e7bf      	b.n	8002520 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025a0:	6890      	ldr	r0, [r2, #8]
 80025a2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80025a6:	d11b      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025a8:	6890      	ldr	r0, [r2, #8]
 80025aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80025ae:	6090      	str	r0, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025b0:	680a      	ldr	r2, [r1, #0]
 80025b2:	2a10      	cmp	r2, #16
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x10a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b6:	2000      	movs	r0, #0
 80025b8:	e7b2      	b.n	8002520 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025ba:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_ADC_ConfigChannel+0x13c>)
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	490c      	ldr	r1, [pc, #48]	; (80025f0 <HAL_ADC_ConfigChannel+0x140>)
 80025c0:	fba1 1202 	umull	r1, r2, r1, r2
 80025c4:	0c92      	lsrs	r2, r2, #18
 80025c6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025ca:	0052      	lsls	r2, r2, #1
 80025cc:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80025ce:	e002      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 80025d0:	9a01      	ldr	r2, [sp, #4]
 80025d2:	3a01      	subs	r2, #1
 80025d4:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80025d6:	9a01      	ldr	r2, [sp, #4]
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d1f9      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025dc:	2000      	movs	r0, #0
 80025de:	e79f      	b.n	8002520 <HAL_ADC_ConfigChannel+0x70>
 80025e0:	2000      	movs	r0, #0
 80025e2:	e79d      	b.n	8002520 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80025e4:	2002      	movs	r0, #2
 80025e6:	e79e      	b.n	8002526 <HAL_ADC_ConfigChannel+0x76>
 80025e8:	40012400 	.word	0x40012400
 80025ec:	20000000 	.word	0x20000000
 80025f0:	431bde83 	.word	0x431bde83

080025f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025f6:	6803      	ldr	r3, [r0, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	f012 0f01 	tst.w	r2, #1
 80025fe:	d101      	bne.n	8002604 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002600:	2000      	movs	r0, #0
}
 8002602:	bd38      	pop	{r3, r4, r5, pc}
 8002604:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	f022 0201 	bic.w	r2, r2, #1
 800260c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800260e:	f7ff ff33 	bl	8002478 <HAL_GetTick>
 8002612:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f013 0f01 	tst.w	r3, #1
 800261c:	d013      	beq.n	8002646 <ADC_ConversionStop_Disable+0x52>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800261e:	f7ff ff2b 	bl	8002478 <HAL_GetTick>
 8002622:	1b43      	subs	r3, r0, r5
 8002624:	2b02      	cmp	r3, #2
 8002626:	d9f5      	bls.n	8002614 <ADC_ConversionStop_Disable+0x20>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f013 0f01 	tst.w	r3, #1
 8002630:	d0f0      	beq.n	8002614 <ADC_ConversionStop_Disable+0x20>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002632:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002634:	f043 0310 	orr.w	r3, r3, #16
 8002638:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8002642:	2001      	movs	r0, #1
 8002644:	e7dd      	b.n	8002602 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8002646:	2000      	movs	r0, #0
 8002648:	e7db      	b.n	8002602 <ADC_ConversionStop_Disable+0xe>
	...

0800264c <HAL_ADC_Init>:
  if(hadc == NULL)
 800264c:	2800      	cmp	r0, #0
 800264e:	d07b      	beq.n	8002748 <HAL_ADC_Init+0xfc>
{
 8002650:	b570      	push	{r4, r5, r6, lr}
 8002652:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002654:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002656:	2b00      	cmp	r3, #0
 8002658:	d04d      	beq.n	80026f6 <HAL_ADC_Init+0xaa>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff ffca 	bl	80025f4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002660:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002662:	f013 0310 	ands.w	r3, r3, #16
 8002666:	d169      	bne.n	800273c <HAL_ADC_Init+0xf0>
 8002668:	2800      	cmp	r0, #0
 800266a:	d167      	bne.n	800273c <HAL_ADC_Init+0xf0>
    ADC_STATE_CLR_SET(hadc->State,
 800266c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800266e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8002672:	f022 0202 	bic.w	r2, r2, #2
 8002676:	f042 0202 	orr.w	r2, r2, #2
 800267a:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800267c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800267e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002680:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002682:	7b21      	ldrb	r1, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002684:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002688:	68a5      	ldr	r5, [r4, #8]
 800268a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800268e:	d002      	beq.n	8002696 <HAL_ADC_Init+0x4a>
 8002690:	2d01      	cmp	r5, #1
 8002692:	d036      	beq.n	8002702 <HAL_ADC_Init+0xb6>
 8002694:	461d      	mov	r5, r3
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002696:	7d26      	ldrb	r6, [r4, #20]
 8002698:	2e01      	cmp	r6, #1
 800269a:	d035      	beq.n	8002708 <HAL_ADC_Init+0xbc>
      MODIFY_REG(hadc->Instance->CR1,
 800269c:	6826      	ldr	r6, [r4, #0]
 800269e:	6871      	ldr	r1, [r6, #4]
 80026a0:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80026a4:	4329      	orrs	r1, r5
 80026a6:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80026a8:	6825      	ldr	r5, [r4, #0]
 80026aa:	68ae      	ldr	r6, [r5, #8]
 80026ac:	4927      	ldr	r1, [pc, #156]	; (800274c <HAL_ADC_Init+0x100>)
 80026ae:	4031      	ands	r1, r6
 80026b0:	4311      	orrs	r1, r2
 80026b2:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026b4:	68a1      	ldr	r1, [r4, #8]
 80026b6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80026ba:	d001      	beq.n	80026c0 <HAL_ADC_Init+0x74>
 80026bc:	2901      	cmp	r1, #1
 80026be:	d102      	bne.n	80026c6 <HAL_ADC_Init+0x7a>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026c0:	6923      	ldr	r3, [r4, #16]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80026c6:	6825      	ldr	r5, [r4, #0]
 80026c8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80026ca:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80026ce:	430b      	orrs	r3, r1
 80026d0:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_ADC_Init+0x104>)
 80026d8:	400b      	ands	r3, r1
 80026da:	429a      	cmp	r2, r3
 80026dc:	d025      	beq.n	800272a <HAL_ADC_Init+0xde>
      ADC_STATE_CLR_SET(hadc->State,
 80026de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026e0:	f023 0312 	bic.w	r3, r3, #18
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 80026f2:	2001      	movs	r0, #1
 80026f4:	e027      	b.n	8002746 <HAL_ADC_Init+0xfa>
    ADC_CLEAR_ERRORCODE(hadc);
 80026f6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80026f8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80026fc:	f7ff fed6 	bl	80024ac <HAL_ADC_MspInit>
 8002700:	e7ab      	b.n	800265a <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002702:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002706:	e7c6      	b.n	8002696 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002708:	b931      	cbnz	r1, 8002718 <HAL_ADC_Init+0xcc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800270a:	69a1      	ldr	r1, [r4, #24]
 800270c:	3901      	subs	r1, #1
 800270e:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8002712:	f441 6500 	orr.w	r5, r1, #2048	; 0x800
 8002716:	e7c1      	b.n	800269c <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002718:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800271a:	f041 0120 	orr.w	r1, r1, #32
 800271e:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002722:	f041 0101 	orr.w	r1, r1, #1
 8002726:	62e1      	str	r1, [r4, #44]	; 0x2c
 8002728:	e7b8      	b.n	800269c <HAL_ADC_Init+0x50>
      ADC_CLEAR_ERRORCODE(hadc);
 800272a:	2300      	movs	r3, #0
 800272c:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800272e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002730:	f023 0303 	bic.w	r3, r3, #3
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	62a3      	str	r3, [r4, #40]	; 0x28
 800273a:	e004      	b.n	8002746 <HAL_ADC_Init+0xfa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8002744:	2001      	movs	r0, #1
}
 8002746:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002748:	2001      	movs	r0, #1
}
 800274a:	4770      	bx	lr
 800274c:	ffe1f7fd 	.word	0xffe1f7fd
 8002750:	ff1f0efe 	.word	0xff1f0efe

08002754 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002756:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002758:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002760:	0200      	lsls	r0, r0, #8
 8002762:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002766:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002770:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002778:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800277a:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <HAL_NVIC_SetPriority+0x68>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002782:	f1c3 0c07 	rsb	ip, r3, #7
 8002786:	f1bc 0f04 	cmp.w	ip, #4
 800278a:	bf28      	it	cs
 800278c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002790:	f103 0e04 	add.w	lr, r3, #4
 8002794:	f1be 0f06 	cmp.w	lr, #6
 8002798:	d918      	bls.n	80027cc <HAL_NVIC_SetPriority+0x54>
 800279a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80027a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80027a4:	ea21 010c 	bic.w	r1, r1, ip
 80027a8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027aa:	fa0e f303 	lsl.w	r3, lr, r3
 80027ae:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80027b4:	2800      	cmp	r0, #0
 80027b6:	db0b      	blt.n	80027d0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027b8:	0109      	lsls	r1, r1, #4
 80027ba:	b2c9      	uxtb	r1, r1
 80027bc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80027c0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80027c4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027c8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027cc:	2300      	movs	r3, #0
 80027ce:	e7e5      	b.n	800279c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d0:	f000 000f 	and.w	r0, r0, #15
 80027d4:	0109      	lsls	r1, r1, #4
 80027d6:	b2c9      	uxtb	r1, r1
 80027d8:	4b02      	ldr	r3, [pc, #8]	; (80027e4 <HAL_NVIC_SetPriority+0x6c>)
 80027da:	5419      	strb	r1, [r3, r0]
 80027dc:	e7f4      	b.n	80027c8 <HAL_NVIC_SetPriority+0x50>
 80027de:	bf00      	nop
 80027e0:	e000ed00 	.word	0xe000ed00
 80027e4:	e000ed14 	.word	0xe000ed14

080027e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027e8:	2800      	cmp	r0, #0
 80027ea:	db07      	blt.n	80027fc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ec:	f000 021f 	and.w	r2, r0, #31
 80027f0:	0940      	lsrs	r0, r0, #5
 80027f2:	2301      	movs	r3, #1
 80027f4:	4093      	lsls	r3, r2
 80027f6:	4a02      	ldr	r2, [pc, #8]	; (8002800 <HAL_NVIC_EnableIRQ+0x18>)
 80027f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002804:	2800      	cmp	r0, #0
 8002806:	db0c      	blt.n	8002822 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002808:	f000 021f 	and.w	r2, r0, #31
 800280c:	0940      	lsrs	r0, r0, #5
 800280e:	2301      	movs	r3, #1
 8002810:	4093      	lsls	r3, r2
 8002812:	3020      	adds	r0, #32
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <HAL_NVIC_DisableIRQ+0x20>)
 8002816:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800281a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800281e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100

08002828 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002828:	3801      	subs	r0, #1
 800282a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800282e:	d20b      	bcs.n	8002848 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002830:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002834:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	4a05      	ldr	r2, [pc, #20]	; (800284c <HAL_SYSTICK_Config+0x24>)
 8002838:	21f0      	movs	r1, #240	; 0xf0
 800283a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800283e:	2000      	movs	r0, #0
 8002840:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002842:	2207      	movs	r2, #7
 8002844:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002846:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002848:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800284a:	4770      	bx	lr
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002850:	b430      	push	{r4, r5}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002852:	2401      	movs	r4, #1
 8002854:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002856:	40ac      	lsls	r4, r5
 8002858:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800285a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800285c:	6804      	ldr	r4, [r0, #0]
 800285e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002860:	6843      	ldr	r3, [r0, #4]
 8002862:	2b10      	cmp	r3, #16
 8002864:	d005      	beq.n	8002872 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002866:	6803      	ldr	r3, [r0, #0]
 8002868:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800286a:	6803      	ldr	r3, [r0, #0]
 800286c:	60da      	str	r2, [r3, #12]
  }
}
 800286e:	bc30      	pop	{r4, r5}
 8002870:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002872:	6803      	ldr	r3, [r0, #0]
 8002874:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002876:	6803      	ldr	r3, [r0, #0]
 8002878:	60d9      	str	r1, [r3, #12]
 800287a:	e7f8      	b.n	800286e <DMA_SetConfig+0x1e>

0800287c <HAL_DMA_Init>:
  if(hdma == NULL)
 800287c:	b360      	cbz	r0, 80028d8 <HAL_DMA_Init+0x5c>
{
 800287e:	b410      	push	{r4}
 8002880:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002882:	6801      	ldr	r1, [r0, #0]
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_DMA_Init+0x60>)
 8002886:	440b      	add	r3, r1
 8002888:	4815      	ldr	r0, [pc, #84]	; (80028e0 <HAL_DMA_Init+0x64>)
 800288a:	fba0 0303 	umull	r0, r3, r0, r3
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_DMA_Init+0x68>)
 8002896:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8002898:	2302      	movs	r3, #2
 800289a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800289e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028a0:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 80028a4:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 80028a8:	6853      	ldr	r3, [r2, #4]
 80028aa:	6894      	ldr	r4, [r2, #8]
 80028ac:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ae:	68d4      	ldr	r4, [r2, #12]
 80028b0:	4323      	orrs	r3, r4
 80028b2:	6914      	ldr	r4, [r2, #16]
 80028b4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b6:	6954      	ldr	r4, [r2, #20]
 80028b8:	4323      	orrs	r3, r4
 80028ba:	6994      	ldr	r4, [r2, #24]
 80028bc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80028be:	69d4      	ldr	r4, [r2, #28]
 80028c0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80028c2:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 80028c4:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c6:	2000      	movs	r0, #0
 80028c8:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 80028d0:	f882 0020 	strb.w	r0, [r2, #32]
}
 80028d4:	bc10      	pop	{r4}
 80028d6:	4770      	bx	lr
    return HAL_ERROR;
 80028d8:	2001      	movs	r0, #1
}
 80028da:	4770      	bx	lr
 80028dc:	bffdfff8 	.word	0xbffdfff8
 80028e0:	cccccccd 	.word	0xcccccccd
 80028e4:	40020000 	.word	0x40020000

080028e8 <HAL_DMA_Start_IT>:
{
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80028ec:	f890 0020 	ldrb.w	r0, [r0, #32]
 80028f0:	2801      	cmp	r0, #1
 80028f2:	d031      	beq.n	8002958 <HAL_DMA_Start_IT+0x70>
 80028f4:	2001      	movs	r0, #1
 80028f6:	f884 0020 	strb.w	r0, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80028fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
 80028fe:	2801      	cmp	r0, #1
 8002900:	d004      	beq.n	800290c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8002902:	2300      	movs	r3, #0
 8002904:	f884 3020 	strb.w	r3, [r4, #32]
    status = HAL_BUSY;
 8002908:	2002      	movs	r0, #2
}
 800290a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	2002      	movs	r0, #2
 800290e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002912:	2000      	movs	r0, #0
 8002914:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8002916:	6825      	ldr	r5, [r4, #0]
 8002918:	6828      	ldr	r0, [r5, #0]
 800291a:	f020 0001 	bic.w	r0, r0, #1
 800291e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff ff95 	bl	8002850 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 8002926:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002928:	b15b      	cbz	r3, 8002942 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	f043 030e 	orr.w	r3, r3, #14
 8002932:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	f043 0301 	orr.w	r3, r3, #1
 800293c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2000      	movs	r0, #0
 8002940:	e7e3      	b.n	800290a <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800294c:	6822      	ldr	r2, [r4, #0]
 800294e:	6813      	ldr	r3, [r2, #0]
 8002950:	f043 030a 	orr.w	r3, r3, #10
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e7ed      	b.n	8002934 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002958:	2002      	movs	r0, #2
 800295a:	e7d6      	b.n	800290a <HAL_DMA_Start_IT+0x22>

0800295c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002960:	2b02      	cmp	r3, #2
 8002962:	d006      	beq.n	8002972 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002964:	2304      	movs	r3, #4
 8002966:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002968:	2300      	movs	r3, #0
 800296a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800296e:	2001      	movs	r0, #1
 8002970:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	f023 030e 	bic.w	r3, r3, #14
 800297a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800297c:	6802      	ldr	r2, [r0, #0]
 800297e:	6813      	ldr	r3, [r2, #0]
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002986:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002988:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8002992:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);      
 8002996:	2300      	movs	r3, #0
 8002998:	f880 3020 	strb.w	r3, [r0, #32]
  return status; 
 800299c:	4618      	mov	r0, r3
}
 800299e:	4770      	bx	lr

080029a0 <HAL_DMA_Abort_IT>:
{  
 80029a0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d003      	beq.n	80029b2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029aa:	2304      	movs	r3, #4
 80029ac:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80029ae:	2001      	movs	r0, #1
}
 80029b0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b2:	6802      	ldr	r2, [r0, #0]
 80029b4:	6813      	ldr	r3, [r2, #0]
 80029b6:	f023 030e 	bic.w	r3, r3, #14
 80029ba:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80029bc:	6802      	ldr	r2, [r0, #0]
 80029be:	6813      	ldr	r3, [r2, #0]
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_DMA_Abort_IT+0x90>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d014      	beq.n	80029f8 <HAL_DMA_Abort_IT+0x58>
 80029ce:	3214      	adds	r2, #20
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01f      	beq.n	8002a14 <HAL_DMA_Abort_IT+0x74>
 80029d4:	3214      	adds	r2, #20
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d01e      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x78>
 80029da:	3214      	adds	r2, #20
 80029dc:	4293      	cmp	r3, r2
 80029de:	d01e      	beq.n	8002a1e <HAL_DMA_Abort_IT+0x7e>
 80029e0:	3214      	adds	r2, #20
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d01e      	beq.n	8002a24 <HAL_DMA_Abort_IT+0x84>
 80029e6:	3214      	adds	r2, #20
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d002      	beq.n	80029f2 <HAL_DMA_Abort_IT+0x52>
 80029ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029f0:	e003      	b.n	80029fa <HAL_DMA_Abort_IT+0x5a>
 80029f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029f6:	e000      	b.n	80029fa <HAL_DMA_Abort_IT+0x5a>
 80029f8:	2201      	movs	r2, #1
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_DMA_Abort_IT+0x94>)
 80029fc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002a04:	2300      	movs	r3, #0
 8002a06:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002a0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a0c:	b16b      	cbz	r3, 8002a2a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8002a0e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2000      	movs	r0, #0
 8002a12:	e7cd      	b.n	80029b0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a14:	2210      	movs	r2, #16
 8002a16:	e7f0      	b.n	80029fa <HAL_DMA_Abort_IT+0x5a>
 8002a18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1c:	e7ed      	b.n	80029fa <HAL_DMA_Abort_IT+0x5a>
 8002a1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a22:	e7ea      	b.n	80029fa <HAL_DMA_Abort_IT+0x5a>
 8002a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a28:	e7e7      	b.n	80029fa <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	e7c0      	b.n	80029b0 <HAL_DMA_Abort_IT+0x10>
 8002a2e:	bf00      	nop
 8002a30:	40020008 	.word	0x40020008
 8002a34:	40020000 	.word	0x40020000

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b570      	push	{r4, r5, r6, lr}
 8002a3a:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a3c:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8002a3e:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a40:	e0a6      	b.n	8002b90 <HAL_GPIO_Init+0x158>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a42:	4d80      	ldr	r5, [pc, #512]	; (8002c44 <HAL_GPIO_Init+0x20c>)
 8002a44:	42aa      	cmp	r2, r5
 8002a46:	d010      	beq.n	8002a6a <HAL_GPIO_Init+0x32>
 8002a48:	d907      	bls.n	8002a5a <HAL_GPIO_Init+0x22>
 8002a4a:	4d7f      	ldr	r5, [pc, #508]	; (8002c48 <HAL_GPIO_Init+0x210>)
 8002a4c:	42aa      	cmp	r2, r5
 8002a4e:	d00c      	beq.n	8002a6a <HAL_GPIO_Init+0x32>
 8002a50:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
 8002a54:	42aa      	cmp	r2, r5
 8002a56:	d008      	beq.n	8002a6a <HAL_GPIO_Init+0x32>
 8002a58:	e013      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
 8002a5a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002a5e:	42aa      	cmp	r2, r5
 8002a60:	d003      	beq.n	8002a6a <HAL_GPIO_Init+0x32>
 8002a62:	f505 2570 	add.w	r5, r5, #983040	; 0xf0000
 8002a66:	42aa      	cmp	r2, r5
 8002a68:	d107      	bne.n	8002a7a <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a6a:	688a      	ldr	r2, [r1, #8]
 8002a6c:	2a00      	cmp	r2, #0
 8002a6e:	d058      	beq.n	8002b22 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a70:	2a01      	cmp	r2, #1
 8002a72:	d051      	beq.n	8002b18 <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8002a74:	6143      	str	r3, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a76:	2408      	movs	r4, #8
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8002a7a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002a7e:	42aa      	cmp	r2, r5
 8002a80:	d0f3      	beq.n	8002a6a <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a82:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002a86:	d84e      	bhi.n	8002b26 <HAL_GPIO_Init+0xee>
 8002a88:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a8a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8002a8e:	d84c      	bhi.n	8002b2a <HAL_GPIO_Init+0xf2>
 8002a90:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a94:	6833      	ldr	r3, [r6, #0]
 8002a96:	250f      	movs	r5, #15
 8002a98:	4095      	lsls	r5, r2
 8002a9a:	ea23 0305 	bic.w	r3, r3, r5
 8002a9e:	fa04 f202 	lsl.w	r2, r4, r2
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aa6:	684b      	ldr	r3, [r1, #4]
 8002aa8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002aac:	d06e      	beq.n	8002b8c <HAL_GPIO_Init+0x154>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002aae:	4b67      	ldr	r3, [pc, #412]	; (8002c4c <HAL_GPIO_Init+0x214>)
 8002ab0:	699a      	ldr	r2, [r3, #24]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	619a      	str	r2, [r3, #24]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002ac2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8002ac6:	1c95      	adds	r5, r2, #2
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_GPIO_Init+0x218>)
 8002aca:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ace:	f00c 0303 	and.w	r3, ip, #3
 8002ad2:	009d      	lsls	r5, r3, #2
 8002ad4:	230f      	movs	r3, #15
 8002ad6:	40ab      	lsls	r3, r5
 8002ad8:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002adc:	4b5d      	ldr	r3, [pc, #372]	; (8002c54 <HAL_GPIO_Init+0x21c>)
 8002ade:	4298      	cmp	r0, r3
 8002ae0:	d029      	beq.n	8002b36 <HAL_GPIO_Init+0xfe>
 8002ae2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	f000 808e 	beq.w	8002c08 <HAL_GPIO_Init+0x1d0>
 8002aec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002af0:	4298      	cmp	r0, r3
 8002af2:	f000 808b 	beq.w	8002c0c <HAL_GPIO_Init+0x1d4>
 8002af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afa:	4298      	cmp	r0, r3
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0xfa>
 8002afe:	2304      	movs	r3, #4
 8002b00:	e01a      	b.n	8002b38 <HAL_GPIO_Init+0x100>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b02:	68cc      	ldr	r4, [r1, #12]
          break;
 8002b04:	e7bd      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b06:	68cc      	ldr	r4, [r1, #12]
 8002b08:	3404      	adds	r4, #4
          break;
 8002b0a:	e7ba      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0c:	68cc      	ldr	r4, [r1, #12]
 8002b0e:	3408      	adds	r4, #8
          break;
 8002b10:	e7b7      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b12:	68cc      	ldr	r4, [r1, #12]
 8002b14:	340c      	adds	r4, #12
          break;
 8002b16:	e7b4      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8002b18:	6103      	str	r3, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b1a:	2408      	movs	r4, #8
 8002b1c:	e7b1      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b1e:	2400      	movs	r4, #0
 8002b20:	e7af      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b22:	2404      	movs	r4, #4
 8002b24:	e7ad      	b.n	8002a82 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b26:	1d06      	adds	r6, r0, #4
 8002b28:	e7af      	b.n	8002a8a <HAL_GPIO_Init+0x52>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b2a:	f1ac 0208 	sub.w	r2, ip, #8
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	e7b0      	b.n	8002a94 <HAL_GPIO_Init+0x5c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b32:	2303      	movs	r3, #3
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x100>
 8002b36:	2300      	movs	r3, #0
 8002b38:	40ab      	lsls	r3, r5
 8002b3a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8002b3c:	3202      	adds	r2, #2
 8002b3e:	4d44      	ldr	r5, [pc, #272]	; (8002c50 <HAL_GPIO_Init+0x218>)
 8002b40:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b44:	684b      	ldr	r3, [r1, #4]
 8002b46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002b4a:	d061      	beq.n	8002c10 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b4c:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002b4e:	6813      	ldr	r3, [r2, #0]
 8002b50:	ea43 030e 	orr.w	r3, r3, lr
 8002b54:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b56:	684b      	ldr	r3, [r1, #4]
 8002b58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b5c:	d05e      	beq.n	8002c1c <HAL_GPIO_Init+0x1e4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b5e:	4a3e      	ldr	r2, [pc, #248]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002b60:	6853      	ldr	r3, [r2, #4]
 8002b62:	ea43 030e 	orr.w	r3, r3, lr
 8002b66:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b68:	684b      	ldr	r3, [r1, #4]
 8002b6a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002b6e:	d05b      	beq.n	8002c28 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b70:	4a39      	ldr	r2, [pc, #228]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002b72:	6893      	ldr	r3, [r2, #8]
 8002b74:	ea43 030e 	orr.w	r3, r3, lr
 8002b78:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b7a:	684b      	ldr	r3, [r1, #4]
 8002b7c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002b80:	d058      	beq.n	8002c34 <HAL_GPIO_Init+0x1fc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b82:	4a35      	ldr	r2, [pc, #212]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002b84:	68d3      	ldr	r3, [r2, #12]
 8002b86:	ea43 030e 	orr.w	r3, r3, lr
 8002b8a:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8002b8c:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	680a      	ldr	r2, [r1, #0]
 8002b92:	fa32 f30c 	lsrs.w	r3, r2, ip
 8002b96:	d053      	beq.n	8002c40 <HAL_GPIO_Init+0x208>
    ioposition = (0x01uL << position);
 8002b98:	2301      	movs	r3, #1
 8002b9a:	fa03 f30c 	lsl.w	r3, r3, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	ea02 0e03 	and.w	lr, r2, r3
    if (iocurrent == ioposition)
 8002ba2:	ea33 0202 	bics.w	r2, r3, r2
 8002ba6:	d1f1      	bne.n	8002b8c <HAL_GPIO_Init+0x154>
      switch (GPIO_Init->Mode)
 8002ba8:	684a      	ldr	r2, [r1, #4]
 8002baa:	2a12      	cmp	r2, #18
 8002bac:	f63f af49 	bhi.w	8002a42 <HAL_GPIO_Init+0xa>
 8002bb0:	2a12      	cmp	r2, #18
 8002bb2:	f63f af66 	bhi.w	8002a82 <HAL_GPIO_Init+0x4a>
 8002bb6:	a501      	add	r5, pc, #4	; (adr r5, 8002bbc <HAL_GPIO_Init+0x184>)
 8002bb8:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8002bbc:	08002a6b 	.word	0x08002a6b
 8002bc0:	08002b03 	.word	0x08002b03
 8002bc4:	08002b0d 	.word	0x08002b0d
 8002bc8:	08002b1f 	.word	0x08002b1f
 8002bcc:	08002a83 	.word	0x08002a83
 8002bd0:	08002a83 	.word	0x08002a83
 8002bd4:	08002a83 	.word	0x08002a83
 8002bd8:	08002a83 	.word	0x08002a83
 8002bdc:	08002a83 	.word	0x08002a83
 8002be0:	08002a83 	.word	0x08002a83
 8002be4:	08002a83 	.word	0x08002a83
 8002be8:	08002a83 	.word	0x08002a83
 8002bec:	08002a83 	.word	0x08002a83
 8002bf0:	08002a83 	.word	0x08002a83
 8002bf4:	08002a83 	.word	0x08002a83
 8002bf8:	08002a83 	.word	0x08002a83
 8002bfc:	08002a83 	.word	0x08002a83
 8002c00:	08002b07 	.word	0x08002b07
 8002c04:	08002b13 	.word	0x08002b13
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e795      	b.n	8002b38 <HAL_GPIO_Init+0x100>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e793      	b.n	8002b38 <HAL_GPIO_Init+0x100>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c10:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002c12:	6813      	ldr	r3, [r2, #0]
 8002c14:	ea23 030e 	bic.w	r3, r3, lr
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e79c      	b.n	8002b56 <HAL_GPIO_Init+0x11e>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c1c:	4a0e      	ldr	r2, [pc, #56]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002c1e:	6853      	ldr	r3, [r2, #4]
 8002c20:	ea23 030e 	bic.w	r3, r3, lr
 8002c24:	6053      	str	r3, [r2, #4]
 8002c26:	e79f      	b.n	8002b68 <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c28:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002c2a:	6893      	ldr	r3, [r2, #8]
 8002c2c:	ea23 030e 	bic.w	r3, r3, lr
 8002c30:	6093      	str	r3, [r2, #8]
 8002c32:	e7a2      	b.n	8002b7a <HAL_GPIO_Init+0x142>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c34:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <HAL_GPIO_Init+0x220>)
 8002c36:	68d3      	ldr	r3, [r2, #12]
 8002c38:	ea23 030e 	bic.w	r3, r3, lr
 8002c3c:	60d3      	str	r3, [r2, #12]
 8002c3e:	e7a5      	b.n	8002b8c <HAL_GPIO_Init+0x154>
  }
}
 8002c40:	b002      	add	sp, #8
 8002c42:	bd70      	pop	{r4, r5, r6, pc}
 8002c44:	10220000 	.word	0x10220000
 8002c48:	10310000 	.word	0x10310000
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010800 	.word	0x40010800
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8002c5c:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8002c5e:	e06d      	b.n	8002d3c <HAL_GPIO_DeInit+0xe0>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c60:	2503      	movs	r5, #3
 8002c62:	e000      	b.n	8002c66 <HAL_GPIO_DeInit+0xa>
 8002c64:	2500      	movs	r5, #0
 8002c66:	fa05 f404 	lsl.w	r4, r5, r4
 8002c6a:	4564      	cmp	r4, ip
 8002c6c:	d042      	beq.n	8002cf4 <HAL_GPIO_DeInit+0x98>
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c6e:	2bff      	cmp	r3, #255	; 0xff
 8002c70:	d85b      	bhi.n	8002d2a <HAL_GPIO_DeInit+0xce>
 8002c72:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c74:	2bff      	cmp	r3, #255	; 0xff
 8002c76:	d85a      	bhi.n	8002d2e <HAL_GPIO_DeInit+0xd2>
 8002c78:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8002c7a:	6834      	ldr	r4, [r6, #0]
 8002c7c:	f04f 0e0f 	mov.w	lr, #15
 8002c80:	fa0e fe05 	lsl.w	lr, lr, r5
 8002c84:	ea24 040e 	bic.w	r4, r4, lr
 8002c88:	f04f 0c04 	mov.w	ip, #4
 8002c8c:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c90:	ea44 040c 	orr.w	r4, r4, ip
 8002c94:	6034      	str	r4, [r6, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8002c96:	68c4      	ldr	r4, [r0, #12]
 8002c98:	ea24 0303 	bic.w	r3, r4, r3
 8002c9c:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8002c9e:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8002ca0:	fa31 f302 	lsrs.w	r3, r1, r2
 8002ca4:	d048      	beq.n	8002d38 <HAL_GPIO_DeInit+0xdc>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	4093      	lsls	r3, r2
    if (iocurrent)
 8002caa:	400b      	ands	r3, r1
 8002cac:	d0f7      	beq.n	8002c9e <HAL_GPIO_DeInit+0x42>
      tmp = AFIO->EXTICR[position >> 2u];
 8002cae:	ea4f 0e92 	mov.w	lr, r2, lsr #2
 8002cb2:	f10e 0502 	add.w	r5, lr, #2
 8002cb6:	4c26      	ldr	r4, [pc, #152]	; (8002d50 <HAL_GPIO_DeInit+0xf4>)
 8002cb8:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8002cbc:	f002 0403 	and.w	r4, r2, #3
 8002cc0:	00a4      	lsls	r4, r4, #2
 8002cc2:	260f      	movs	r6, #15
 8002cc4:	40a6      	lsls	r6, r4
 8002cc6:	ea06 0c05 	and.w	ip, r6, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002cca:	4d22      	ldr	r5, [pc, #136]	; (8002d54 <HAL_GPIO_DeInit+0xf8>)
 8002ccc:	42a8      	cmp	r0, r5
 8002cce:	d0c9      	beq.n	8002c64 <HAL_GPIO_DeInit+0x8>
 8002cd0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cd4:	42a8      	cmp	r0, r5
 8002cd6:	d009      	beq.n	8002cec <HAL_GPIO_DeInit+0x90>
 8002cd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cdc:	42a8      	cmp	r0, r5
 8002cde:	d007      	beq.n	8002cf0 <HAL_GPIO_DeInit+0x94>
 8002ce0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ce4:	42a8      	cmp	r0, r5
 8002ce6:	d0bb      	beq.n	8002c60 <HAL_GPIO_DeInit+0x4>
 8002ce8:	2504      	movs	r5, #4
 8002cea:	e7bc      	b.n	8002c66 <HAL_GPIO_DeInit+0xa>
 8002cec:	2501      	movs	r5, #1
 8002cee:	e7ba      	b.n	8002c66 <HAL_GPIO_DeInit+0xa>
 8002cf0:	2502      	movs	r5, #2
 8002cf2:	e7b8      	b.n	8002c66 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8002cf4:	4f16      	ldr	r7, [pc, #88]	; (8002d50 <HAL_GPIO_DeInit+0xf4>)
 8002cf6:	f10e 0402 	add.w	r4, lr, #2
 8002cfa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002cfe:	ea25 0606 	bic.w	r6, r5, r6
 8002d02:	f847 6024 	str.w	r6, [r7, r4, lsl #2]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8002d06:	4c14      	ldr	r4, [pc, #80]	; (8002d58 <HAL_GPIO_DeInit+0xfc>)
 8002d08:	6825      	ldr	r5, [r4, #0]
 8002d0a:	ea25 0503 	bic.w	r5, r5, r3
 8002d0e:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8002d10:	6865      	ldr	r5, [r4, #4]
 8002d12:	ea25 0503 	bic.w	r5, r5, r3
 8002d16:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8002d18:	68a5      	ldr	r5, [r4, #8]
 8002d1a:	ea25 0503 	bic.w	r5, r5, r3
 8002d1e:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8002d20:	68e5      	ldr	r5, [r4, #12]
 8002d22:	ea25 0503 	bic.w	r5, r5, r3
 8002d26:	60e5      	str	r5, [r4, #12]
 8002d28:	e7a1      	b.n	8002c6e <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d2a:	1d06      	adds	r6, r0, #4
 8002d2c:	e7a2      	b.n	8002c74 <HAL_GPIO_DeInit+0x18>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d2e:	f1a2 0c08 	sub.w	ip, r2, #8
 8002d32:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8002d36:	e7a0      	b.n	8002c7a <HAL_GPIO_DeInit+0x1e>
  }
}
 8002d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8002d3a:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8002d3c:	fa31 f302 	lsrs.w	r3, r1, r2
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_DeInit+0xf2>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d42:	2301      	movs	r3, #1
 8002d44:	4093      	lsls	r3, r2
    if (iocurrent)
 8002d46:	400b      	ands	r3, r1
 8002d48:	d0f7      	beq.n	8002d3a <HAL_GPIO_DeInit+0xde>
{
 8002d4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4c:	e7af      	b.n	8002cae <HAL_GPIO_DeInit+0x52>
 8002d4e:	4770      	bx	lr
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40010800 	.word	0x40010800
 8002d58:	40010400 	.word	0x40010400

08002d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d5c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <RCC_Delay+0x24>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <RCC_Delay+0x28>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0a5b      	lsrs	r3, r3, #9
 8002d6a:	fb00 f303 	mul.w	r3, r0, r3
 8002d6e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002d70:	bf00      	nop
  }
  while (Delay --);
 8002d72:	9b01      	ldr	r3, [sp, #4]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	9201      	str	r2, [sp, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <RCC_Delay+0x14>
}
 8002d7c:	b002      	add	sp, #8
 8002d7e:	4770      	bx	lr
 8002d80:	20000000 	.word	0x20000000
 8002d84:	10624dd3 	.word	0x10624dd3

08002d88 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	f000 81f1 	beq.w	8003170 <HAL_RCC_OscConfig+0x3e8>
{
 8002d8e:	b570      	push	{r4, r5, r6, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d94:	6803      	ldr	r3, [r0, #0]
 8002d96:	f013 0f01 	tst.w	r3, #1
 8002d9a:	d02c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d9c:	4b99      	ldr	r3, [pc, #612]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b04      	cmp	r3, #4
 8002da6:	d01d      	beq.n	8002de4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002da8:	4b96      	ldr	r3, [pc, #600]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d012      	beq.n	8002dda <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db4:	6863      	ldr	r3, [r4, #4]
 8002db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dba:	d041      	beq.n	8002e40 <HAL_RCC_OscConfig+0xb8>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d155      	bne.n	8002e6c <HAL_RCC_OscConfig+0xe4>
 8002dc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dc4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	e037      	b.n	8002e4a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002dda:	4b8a      	ldr	r3, [pc, #552]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002de2:	d0e7      	beq.n	8002db4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	4b87      	ldr	r3, [pc, #540]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_OscConfig+0x6e>
 8002dee:	6863      	ldr	r3, [r4, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 81bf 	beq.w	8003174 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	f013 0f02 	tst.w	r3, #2
 8002dfc:	d075      	beq.n	8002eea <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f013 0f0c 	tst.w	r3, #12
 8002e06:	d05f      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e08:	4b7e      	ldr	r3, [pc, #504]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d054      	beq.n	8002ebe <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 808a 	beq.w	8002f30 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e22:	f7ff fb29 	bl	8002478 <HAL_GetTick>
 8002e26:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	4b76      	ldr	r3, [pc, #472]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f013 0f02 	tst.w	r3, #2
 8002e30:	d175      	bne.n	8002f1e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e32:	f7ff fb21 	bl	8002478 <HAL_GetTick>
 8002e36:	1b40      	subs	r0, r0, r5
 8002e38:	2802      	cmp	r0, #2
 8002e3a:	d9f5      	bls.n	8002e28 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8002e3c:	2003      	movs	r0, #3
 8002e3e:	e19e      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e40:	4a70      	ldr	r2, [pc, #448]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	6813      	ldr	r3, [r2, #0]
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e4a:	6863      	ldr	r3, [r4, #4]
 8002e4c:	b343      	cbz	r3, 8002ea0 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8002e4e:	f7ff fb13 	bl	8002478 <HAL_GetTick>
 8002e52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e54:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002e5c:	d1cb      	bne.n	8002df6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e5e:	f7ff fb0b 	bl	8002478 <HAL_GetTick>
 8002e62:	1b40      	subs	r0, r0, r5
 8002e64:	2864      	cmp	r0, #100	; 0x64
 8002e66:	d9f5      	bls.n	8002e54 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	e188      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_OscConfig+0xfe>
 8002e72:	4b64      	ldr	r3, [pc, #400]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e7e1      	b.n	8002e4a <HAL_RCC_OscConfig+0xc2>
 8002e86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e8a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e7d4      	b.n	8002e4a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8002ea0:	f7ff faea 	bl	8002478 <HAL_GetTick>
 8002ea4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b57      	ldr	r3, [pc, #348]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002eae:	d0a2      	beq.n	8002df6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7ff fae2 	bl	8002478 <HAL_GetTick>
 8002eb4:	1b40      	subs	r0, r0, r5
 8002eb6:	2864      	cmp	r0, #100	; 0x64
 8002eb8:	d9f5      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8002eba:	2003      	movs	r0, #3
 8002ebc:	e15f      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ec6:	d1a5      	bne.n	8002e14 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec8:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f013 0f02 	tst.w	r3, #2
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_OscConfig+0x152>
 8002ed2:	6923      	ldr	r3, [r4, #16]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 814f 	bne.w	8003178 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eda:	4a4a      	ldr	r2, [pc, #296]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ee2:	6961      	ldr	r1, [r4, #20]
 8002ee4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002ee8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eea:	6823      	ldr	r3, [r4, #0]
 8002eec:	f013 0f08 	tst.w	r3, #8
 8002ef0:	d033      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef2:	69a3      	ldr	r3, [r4, #24]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d05c      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_RCC_OscConfig+0x280>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002f00:	f7ff faba 	bl	8002478 <HAL_GetTick>
 8002f04:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f013 0f02 	tst.w	r3, #2
 8002f0e:	d121      	bne.n	8002f54 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f10:	f7ff fab2 	bl	8002478 <HAL_GetTick>
 8002f14:	1b40      	subs	r0, r0, r5
 8002f16:	2802      	cmp	r0, #2
 8002f18:	d9f5      	bls.n	8002f06 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	e12f      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1e:	4a39      	ldr	r2, [pc, #228]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002f26:	6961      	ldr	r1, [r4, #20]
 8002f28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e7dc      	b.n	8002eea <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8002f30:	4b35      	ldr	r3, [pc, #212]	; (8003008 <HAL_RCC_OscConfig+0x280>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f36:	f7ff fa9f 	bl	8002478 <HAL_GetTick>
 8002f3a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3c:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f013 0f02 	tst.w	r3, #2
 8002f44:	d0d1      	beq.n	8002eea <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f46:	f7ff fa97 	bl	8002478 <HAL_GetTick>
 8002f4a:	1b40      	subs	r0, r0, r5
 8002f4c:	2802      	cmp	r0, #2
 8002f4e:	d9f5      	bls.n	8002f3c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8002f50:	2003      	movs	r0, #3
 8002f52:	e114      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8002f54:	2001      	movs	r0, #1
 8002f56:	f7ff ff01 	bl	8002d5c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	f013 0f04 	tst.w	r3, #4
 8002f60:	f000 8096 	beq.w	8003090 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002f6c:	d134      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6e:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f76:	61da      	str	r2, [r3, #28]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f82:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f84:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_OscConfig+0x284>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f8c:	d026      	beq.n	8002fdc <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f8e:	68e3      	ldr	r3, [r4, #12]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d03d      	beq.n	8003010 <HAL_RCC_OscConfig+0x288>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d153      	bne.n	8003040 <HAL_RCC_OscConfig+0x2b8>
 8002f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f9c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002fa0:	6a1a      	ldr	r2, [r3, #32]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	621a      	str	r2, [r3, #32]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	621a      	str	r2, [r3, #32]
 8002fb0:	e033      	b.n	800301a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_RCC_OscConfig+0x280>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8002fba:	f7ff fa5d 	bl	8002478 <HAL_GetTick>
 8002fbe:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fc0:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	f013 0f02 	tst.w	r3, #2
 8002fc8:	d0c7      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fca:	f7ff fa55 	bl	8002478 <HAL_GetTick>
 8002fce:	1b40      	subs	r0, r0, r5
 8002fd0:	2802      	cmp	r0, #2
 8002fd2:	d9f5      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	e0d2      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8002fd8:	2500      	movs	r5, #0
 8002fda:	e7d3      	b.n	8002f84 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <HAL_RCC_OscConfig+0x284>)
 8002fde:	6813      	ldr	r3, [r2, #0]
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002fe6:	f7ff fa47 	bl	8002478 <HAL_GetTick>
 8002fea:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RCC_OscConfig+0x284>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ff4:	d1cb      	bne.n	8002f8e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7ff fa3f 	bl	8002478 <HAL_GetTick>
 8002ffa:	1b80      	subs	r0, r0, r6
 8002ffc:	2864      	cmp	r0, #100	; 0x64
 8002ffe:	d9f5      	bls.n	8002fec <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003000:	2003      	movs	r0, #3
 8003002:	e0bc      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
 8003004:	40021000 	.word	0x40021000
 8003008:	42420000 	.word	0x42420000
 800300c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003010:	4a5f      	ldr	r2, [pc, #380]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003012:	6a13      	ldr	r3, [r2, #32]
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301a:	68e3      	ldr	r3, [r4, #12]
 800301c:	b333      	cbz	r3, 800306c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800301e:	f7ff fa2b 	bl	8002478 <HAL_GetTick>
 8003022:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003024:	4b5a      	ldr	r3, [pc, #360]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	f013 0f02 	tst.w	r3, #2
 800302c:	d12f      	bne.n	800308e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7ff fa23 	bl	8002478 <HAL_GetTick>
 8003032:	1b80      	subs	r0, r0, r6
 8003034:	f241 3388 	movw	r3, #5000	; 0x1388
 8003038:	4298      	cmp	r0, r3
 800303a:	d9f3      	bls.n	8003024 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800303c:	2003      	movs	r0, #3
 800303e:	e09e      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	2b05      	cmp	r3, #5
 8003042:	d009      	beq.n	8003058 <HAL_RCC_OscConfig+0x2d0>
 8003044:	4b52      	ldr	r3, [pc, #328]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003046:	6a1a      	ldr	r2, [r3, #32]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	621a      	str	r2, [r3, #32]
 800304e:	6a1a      	ldr	r2, [r3, #32]
 8003050:	f022 0204 	bic.w	r2, r2, #4
 8003054:	621a      	str	r2, [r3, #32]
 8003056:	e7e0      	b.n	800301a <HAL_RCC_OscConfig+0x292>
 8003058:	4b4d      	ldr	r3, [pc, #308]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	f042 0204 	orr.w	r2, r2, #4
 8003060:	621a      	str	r2, [r3, #32]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	621a      	str	r2, [r3, #32]
 800306a:	e7d6      	b.n	800301a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800306c:	f7ff fa04 	bl	8002478 <HAL_GetTick>
 8003070:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f013 0f02 	tst.w	r3, #2
 800307a:	d008      	beq.n	800308e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7ff f9fc 	bl	8002478 <HAL_GetTick>
 8003080:	1b80      	subs	r0, r0, r6
 8003082:	f241 3388 	movw	r3, #5000	; 0x1388
 8003086:	4298      	cmp	r0, r3
 8003088:	d9f3      	bls.n	8003072 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800308a:	2003      	movs	r0, #3
 800308c:	e077      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800308e:	b9e5      	cbnz	r5, 80030ca <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003090:	69e3      	ldr	r3, [r4, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d072      	beq.n	800317c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003096:	4a3e      	ldr	r2, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003098:	6852      	ldr	r2, [r2, #4]
 800309a:	f002 020c 	and.w	r2, r2, #12
 800309e:	2a08      	cmp	r2, #8
 80030a0:	d056      	beq.n	8003150 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d017      	beq.n	80030d6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCC_OscConfig+0x40c>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80030ac:	f7ff f9e4 	bl	8002478 <HAL_GetTick>
 80030b0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030ba:	d047      	beq.n	800314c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030bc:	f7ff f9dc 	bl	8002478 <HAL_GetTick>
 80030c0:	1b00      	subs	r0, r0, r4
 80030c2:	2802      	cmp	r0, #2
 80030c4:	d9f5      	bls.n	80030b2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80030c6:	2003      	movs	r0, #3
 80030c8:	e059      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ca:	4a31      	ldr	r2, [pc, #196]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 80030cc:	69d3      	ldr	r3, [r2, #28]
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	61d3      	str	r3, [r2, #28]
 80030d4:	e7dc      	b.n	8003090 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCC_OscConfig+0x40c>)
 80030d8:	2200      	movs	r2, #0
 80030da:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80030dc:	f7ff f9cc 	bl	8002478 <HAL_GetTick>
 80030e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80030ea:	d006      	beq.n	80030fa <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7ff f9c4 	bl	8002478 <HAL_GetTick>
 80030f0:	1b40      	subs	r0, r0, r5
 80030f2:	2802      	cmp	r0, #2
 80030f4:	d9f5      	bls.n	80030e2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80030f6:	2003      	movs	r0, #3
 80030f8:	e041      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030fa:	6a23      	ldr	r3, [r4, #32]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d01a      	beq.n	8003138 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003102:	4923      	ldr	r1, [pc, #140]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003104:	684b      	ldr	r3, [r1, #4]
 8003106:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800310a:	6a22      	ldr	r2, [r4, #32]
 800310c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800310e:	4302      	orrs	r2, r0
 8003110:	4313      	orrs	r3, r2
 8003112:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8003114:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_RCC_OscConfig+0x40c>)
 8003116:	2201      	movs	r2, #1
 8003118:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800311a:	f7ff f9ad 	bl	8002478 <HAL_GetTick>
 800311e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003128:	d10e      	bne.n	8003148 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7ff f9a5 	bl	8002478 <HAL_GetTick>
 800312e:	1b00      	subs	r0, r0, r4
 8003130:	2802      	cmp	r0, #2
 8003132:	d9f5      	bls.n	8003120 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8003134:	2003      	movs	r0, #3
 8003136:	e022      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 800313a:	6853      	ldr	r3, [r2, #4]
 800313c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003140:	68a1      	ldr	r1, [r4, #8]
 8003142:	430b      	orrs	r3, r1
 8003144:	6053      	str	r3, [r2, #4]
 8003146:	e7dc      	b.n	8003102 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8003148:	2000      	movs	r0, #0
 800314a:	e018      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
 800314c:	2000      	movs	r0, #0
 800314e:	e016      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003150:	2b01      	cmp	r3, #1
 8003152:	d016      	beq.n	8003182 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_RCC_OscConfig+0x408>)
 8003156:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003158:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800315c:	6a22      	ldr	r2, [r4, #32]
 800315e:	4291      	cmp	r1, r2
 8003160:	d111      	bne.n	8003186 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003162:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003166:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003168:	4293      	cmp	r3, r2
 800316a:	d10e      	bne.n	800318a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800316c:	2000      	movs	r0, #0
 800316e:	e006      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8003170:	2001      	movs	r0, #1
}
 8003172:	4770      	bx	lr
        return HAL_ERROR;
 8003174:	2001      	movs	r0, #1
 8003176:	e002      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800317c:	2000      	movs	r0, #0
}
 800317e:	b002      	add	sp, #8
 8003180:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8003182:	2001      	movs	r0, #1
 8003184:	e7fb      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8003186:	2001      	movs	r0, #1
 8003188:	e7f9      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
 800318a:	2001      	movs	r0, #1
 800318c:	e7f7      	b.n	800317e <HAL_RCC_OscConfig+0x3f6>
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	42420000 	.word	0x42420000

08003198 <HAL_RCC_GetSysClockFreq>:
{
 8003198:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x60>)
 800319c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800319e:	f10d 0c18 	add.w	ip, sp, #24
 80031a2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031a6:	f240 2301 	movw	r3, #513	; 0x201
 80031aa:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <HAL_RCC_GetSysClockFreq+0x64>)
 80031b0:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	2a08      	cmp	r2, #8
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80031ba:	4811      	ldr	r0, [pc, #68]	; (8003200 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80031bc:	b006      	add	sp, #24
 80031be:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031c0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80031c4:	3218      	adds	r2, #24
 80031c6:	446a      	add	r2, sp
 80031c8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80031d0:	d00d      	beq.n	80031ee <HAL_RCC_GetSysClockFreq+0x56>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031d2:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <HAL_RCC_GetSysClockFreq+0x64>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80031da:	3318      	adds	r3, #24
 80031dc:	446b      	add	r3, sp
 80031de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_RCC_GetSysClockFreq+0x68>)
 80031e4:	fb02 f000 	mul.w	r0, r2, r0
 80031e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80031ec:	e7e6      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_GetSysClockFreq+0x6c>)
 80031f0:	fb03 f000 	mul.w	r0, r3, r0
 80031f4:	e7e2      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x24>
 80031f6:	bf00      	nop
 80031f8:	080072a0 	.word	0x080072a0
 80031fc:	40021000 	.word	0x40021000
 8003200:	007a1200 	.word	0x007a1200
 8003204:	003d0900 	.word	0x003d0900

08003208 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003208:	2800      	cmp	r0, #0
 800320a:	f000 80a0 	beq.w	800334e <HAL_RCC_ClockConfig+0x146>
{
 800320e:	b570      	push	{r4, r5, r6, lr}
 8003210:	460d      	mov	r5, r1
 8003212:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <HAL_RCC_ClockConfig+0x158>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	428b      	cmp	r3, r1
 800321e:	d20b      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003220:	4a4f      	ldr	r2, [pc, #316]	; (8003360 <HAL_RCC_ClockConfig+0x158>)
 8003222:	6813      	ldr	r3, [r2, #0]
 8003224:	f023 0307 	bic.w	r3, r3, #7
 8003228:	430b      	orrs	r3, r1
 800322a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322c:	6813      	ldr	r3, [r2, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	428b      	cmp	r3, r1
 8003234:	f040 808d 	bne.w	8003352 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f013 0f02 	tst.w	r3, #2
 800323e:	d017      	beq.n	8003270 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	f013 0f04 	tst.w	r3, #4
 8003244:	d004      	beq.n	8003250 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003246:	4a47      	ldr	r2, [pc, #284]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 8003248:	6853      	ldr	r3, [r2, #4]
 800324a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800324e:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003250:	6823      	ldr	r3, [r4, #0]
 8003252:	f013 0f08 	tst.w	r3, #8
 8003256:	d004      	beq.n	8003262 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 800325a:	6853      	ldr	r3, [r2, #4]
 800325c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003260:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003262:	4a40      	ldr	r2, [pc, #256]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 8003264:	6853      	ldr	r3, [r2, #4]
 8003266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800326a:	68a1      	ldr	r1, [r4, #8]
 800326c:	430b      	orrs	r3, r1
 800326e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003270:	6823      	ldr	r3, [r4, #0]
 8003272:	f013 0f01 	tst.w	r3, #1
 8003276:	d031      	beq.n	80032dc <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003278:	6863      	ldr	r3, [r4, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d020      	beq.n	80032c0 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	2b02      	cmp	r3, #2
 8003280:	d025      	beq.n	80032ce <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4a38      	ldr	r2, [pc, #224]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 8003284:	6812      	ldr	r2, [r2, #0]
 8003286:	f012 0f02 	tst.w	r2, #2
 800328a:	d064      	beq.n	8003356 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328c:	4935      	ldr	r1, [pc, #212]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 800328e:	684a      	ldr	r2, [r1, #4]
 8003290:	f022 0203 	bic.w	r2, r2, #3
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8003298:	f7ff f8ee 	bl	8002478 <HAL_GetTick>
 800329c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	4b31      	ldr	r3, [pc, #196]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	6862      	ldr	r2, [r4, #4]
 80032a8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032ac:	d016      	beq.n	80032dc <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ae:	f7ff f8e3 	bl	8002478 <HAL_GetTick>
 80032b2:	1b80      	subs	r0, r0, r6
 80032b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80032b8:	4298      	cmp	r0, r3
 80032ba:	d9f0      	bls.n	800329e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80032bc:	2003      	movs	r0, #3
 80032be:	e045      	b.n	800334c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c0:	4a28      	ldr	r2, [pc, #160]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80032c8:	d1e0      	bne.n	800328c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80032ca:	2001      	movs	r0, #1
 80032cc:	e03e      	b.n	800334c <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 80032d0:	6812      	ldr	r2, [r2, #0]
 80032d2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80032d6:	d1d9      	bne.n	800328c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1
 80032da:	e037      	b.n	800334c <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_RCC_ClockConfig+0x158>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	42ab      	cmp	r3, r5
 80032e6:	d90a      	bls.n	80032fe <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_RCC_ClockConfig+0x158>)
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	f023 0307 	bic.w	r3, r3, #7
 80032f0:	432b      	orrs	r3, r5
 80032f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	42ab      	cmp	r3, r5
 80032fc:	d12d      	bne.n	800335a <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032fe:	6823      	ldr	r3, [r4, #0]
 8003300:	f013 0f04 	tst.w	r3, #4
 8003304:	d006      	beq.n	8003314 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003306:	4a17      	ldr	r2, [pc, #92]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 8003308:	6853      	ldr	r3, [r2, #4]
 800330a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800330e:	68e1      	ldr	r1, [r4, #12]
 8003310:	430b      	orrs	r3, r1
 8003312:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	f013 0f08 	tst.w	r3, #8
 800331a:	d007      	beq.n	800332c <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800331c:	4a11      	ldr	r2, [pc, #68]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 800331e:	6853      	ldr	r3, [r2, #4]
 8003320:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003324:	6921      	ldr	r1, [r4, #16]
 8003326:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800332a:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800332c:	f7ff ff34 	bl	8003198 <HAL_RCC_GetSysClockFreq>
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <HAL_RCC_ClockConfig+0x15c>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003338:	4a0b      	ldr	r2, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x160>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	40d8      	lsrs	r0, r3
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x164>)
 8003340:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_ClockConfig+0x168>)
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	f7ff f853 	bl	80023f0 <HAL_InitTick>
  return HAL_OK;
 800334a:	2000      	movs	r0, #0
}
 800334c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800334e:	2001      	movs	r0, #1
}
 8003350:	4770      	bx	lr
    return HAL_ERROR;
 8003352:	2001      	movs	r0, #1
 8003354:	e7fa      	b.n	800334c <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8003356:	2001      	movs	r0, #1
 8003358:	e7f8      	b.n	800334c <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800335a:	2001      	movs	r0, #1
 800335c:	e7f6      	b.n	800334c <HAL_RCC_ClockConfig+0x144>
 800335e:	bf00      	nop
 8003360:	40022000 	.word	0x40022000
 8003364:	40021000 	.word	0x40021000
 8003368:	080070f8 	.word	0x080070f8
 800336c:	20000000 	.word	0x20000000
 8003370:	20000048 	.word	0x20000048

08003374 <HAL_RCC_GetHCLKFreq>:
}
 8003374:	4b01      	ldr	r3, [pc, #4]	; (800337c <HAL_RCC_GetHCLKFreq+0x8>)
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	20000000 	.word	0x20000000

08003380 <HAL_RCC_GetPCLK1Freq>:
{
 8003380:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003382:	f7ff fff7 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 8003386:	4b04      	ldr	r3, [pc, #16]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800338e:	4a03      	ldr	r2, [pc, #12]	; (800339c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
}
 8003392:	40d8      	lsrs	r0, r3
 8003394:	bd08      	pop	{r3, pc}
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	08007108 	.word	0x08007108

080033a0 <HAL_RCC_GetPCLK2Freq>:
{
 80033a0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a2:	f7ff ffe7 	bl	8003374 <HAL_RCC_GetHCLKFreq>
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80033ae:	4a03      	ldr	r2, [pc, #12]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80033b2:	40d8      	lsrs	r0, r3
 80033b4:	bd08      	pop	{r3, pc}
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	08007108 	.word	0x08007108

080033c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033c2:	6a03      	ldr	r3, [r0, #32]
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033d0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033d4:	680c      	ldr	r4, [r1, #0]
 80033d6:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033da:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033de:	688b      	ldr	r3, [r1, #8]
 80033e0:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e2:	4c0d      	ldr	r4, [pc, #52]	; (8003418 <TIM_OC1_SetConfig+0x58>)
 80033e4:	42a0      	cmp	r0, r4
 80033e6:	d009      	beq.n	80033fc <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e8:	4c0b      	ldr	r4, [pc, #44]	; (8003418 <TIM_OC1_SetConfig+0x58>)
 80033ea:	42a0      	cmp	r0, r4
 80033ec:	d00d      	beq.n	800340a <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ee:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f2:	684a      	ldr	r2, [r1, #4]
 80033f4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f6:	6203      	str	r3, [r0, #32]
}
 80033f8:	bc70      	pop	{r4, r5, r6}
 80033fa:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80033fc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003400:	68ca      	ldr	r2, [r1, #12]
 8003402:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	e7ee      	b.n	80033e8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800340a:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 800340e:	694a      	ldr	r2, [r1, #20]
 8003410:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8003412:	698e      	ldr	r6, [r1, #24]
 8003414:	4316      	orrs	r6, r2
 8003416:	e7ea      	b.n	80033ee <TIM_OC1_SetConfig+0x2e>
 8003418:	40012c00 	.word	0x40012c00

0800341c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800341e:	6a03      	ldr	r3, [r0, #32]
 8003420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003424:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003428:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800342a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800342c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003430:	680c      	ldr	r4, [r1, #0]
 8003432:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003438:	688c      	ldr	r4, [r1, #8]
 800343a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800343e:	4c0f      	ldr	r4, [pc, #60]	; (800347c <TIM_OC3_SetConfig+0x60>)
 8003440:	42a0      	cmp	r0, r4
 8003442:	d009      	beq.n	8003458 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003444:	4c0d      	ldr	r4, [pc, #52]	; (800347c <TIM_OC3_SetConfig+0x60>)
 8003446:	42a0      	cmp	r0, r4
 8003448:	d00e      	beq.n	8003468 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800344e:	684a      	ldr	r2, [r1, #4]
 8003450:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003452:	6203      	str	r3, [r0, #32]
}
 8003454:	bc30      	pop	{r4, r5}
 8003456:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8003458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800345c:	68cc      	ldr	r4, [r1, #12]
 800345e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003466:	e7ed      	b.n	8003444 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003468:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346c:	694c      	ldr	r4, [r1, #20]
 800346e:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003472:	698c      	ldr	r4, [r1, #24]
 8003474:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8003478:	e7e7      	b.n	800344a <TIM_OC3_SetConfig+0x2e>
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00

08003480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003480:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003482:	6a03      	ldr	r3, [r0, #32]
 8003484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003488:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003490:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003494:	680d      	ldr	r5, [r1, #0]
 8003496:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800349a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800349e:	688d      	ldr	r5, [r1, #8]
 80034a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a4:	4d07      	ldr	r5, [pc, #28]	; (80034c4 <TIM_OC4_SetConfig+0x44>)
 80034a6:	42a8      	cmp	r0, r5
 80034a8:	d006      	beq.n	80034b8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034ac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ae:	684a      	ldr	r2, [r1, #4]
 80034b0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b2:	6203      	str	r3, [r0, #32]
}
 80034b4:	bc30      	pop	{r4, r5}
 80034b6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034b8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034bc:	694d      	ldr	r5, [r1, #20]
 80034be:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80034c2:	e7f2      	b.n	80034aa <TIM_OC4_SetConfig+0x2a>
 80034c4:	40012c00 	.word	0x40012c00

080034c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034c8:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034ca:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034cc:	6a04      	ldr	r4, [r0, #32]
 80034ce:	f024 0401 	bic.w	r4, r4, #1
 80034d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d6:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034da:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80034e2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034e4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80034e6:	6203      	str	r3, [r0, #32]
}
 80034e8:	bc10      	pop	{r4}
 80034ea:	4770      	bx	lr

080034ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ec:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ee:	6a04      	ldr	r4, [r0, #32]
 80034f0:	f024 0410 	bic.w	r4, r4, #16
 80034f4:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80034f8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034fa:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fe:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003502:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003506:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800350a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800350c:	6203      	str	r3, [r0, #32]
}
 800350e:	bc10      	pop	{r4}
 8003510:	4770      	bx	lr

08003512 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003512:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003518:	430b      	orrs	r3, r1
 800351a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351e:	6083      	str	r3, [r0, #8]
}
 8003520:	4770      	bx	lr

08003522 <HAL_TIM_Base_MspInit>:
}
 8003522:	4770      	bx	lr

08003524 <HAL_TIM_PWM_MspInit>:
}
 8003524:	4770      	bx	lr
	...

08003528 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003528:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <TIM_Base_SetConfig+0x70>)
 800352c:	4290      	cmp	r0, r2
 800352e:	d00a      	beq.n	8003546 <TIM_Base_SetConfig+0x1e>
 8003530:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003534:	d007      	beq.n	8003546 <TIM_Base_SetConfig+0x1e>
 8003536:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800353a:	4290      	cmp	r0, r2
 800353c:	d003      	beq.n	8003546 <TIM_Base_SetConfig+0x1e>
 800353e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003542:	4290      	cmp	r0, r2
 8003544:	d103      	bne.n	800354e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800354a:	684a      	ldr	r2, [r1, #4]
 800354c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800354e:	4a12      	ldr	r2, [pc, #72]	; (8003598 <TIM_Base_SetConfig+0x70>)
 8003550:	4290      	cmp	r0, r2
 8003552:	d00a      	beq.n	800356a <TIM_Base_SetConfig+0x42>
 8003554:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003558:	d007      	beq.n	800356a <TIM_Base_SetConfig+0x42>
 800355a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800355e:	4290      	cmp	r0, r2
 8003560:	d003      	beq.n	800356a <TIM_Base_SetConfig+0x42>
 8003562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003566:	4290      	cmp	r0, r2
 8003568:	d103      	bne.n	8003572 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800356a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356e:	68ca      	ldr	r2, [r1, #12]
 8003570:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003576:	694a      	ldr	r2, [r1, #20]
 8003578:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800357a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800357c:	688b      	ldr	r3, [r1, #8]
 800357e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003580:	680b      	ldr	r3, [r1, #0]
 8003582:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <TIM_Base_SetConfig+0x70>)
 8003586:	4298      	cmp	r0, r3
 8003588:	d002      	beq.n	8003590 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800358a:	2301      	movs	r3, #1
 800358c:	6143      	str	r3, [r0, #20]
}
 800358e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003590:	690b      	ldr	r3, [r1, #16]
 8003592:	6303      	str	r3, [r0, #48]	; 0x30
 8003594:	e7f9      	b.n	800358a <TIM_Base_SetConfig+0x62>
 8003596:	bf00      	nop
 8003598:	40012c00 	.word	0x40012c00

0800359c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800359c:	b340      	cbz	r0, 80035f0 <HAL_TIM_Base_Init+0x54>
{
 800359e:	b510      	push	{r4, lr}
 80035a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80035a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035a6:	b1f3      	cbz	r3, 80035e6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ae:	4621      	mov	r1, r4
 80035b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80035b4:	f7ff ffb8 	bl	8003528 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80035c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80035c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80035ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80035da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80035de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80035e2:	2000      	movs	r0, #0
}
 80035e4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80035e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80035ea:	f7ff ff9a 	bl	8003522 <HAL_TIM_Base_MspInit>
 80035ee:	e7db      	b.n	80035a8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80035f0:	2001      	movs	r0, #1
}
 80035f2:	4770      	bx	lr

080035f4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80035f4:	b340      	cbz	r0, 8003648 <HAL_TIM_PWM_Init+0x54>
{
 80035f6:	b510      	push	{r4, lr}
 80035f8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035fe:	b1f3      	cbz	r3, 800363e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003606:	4621      	mov	r1, r4
 8003608:	f851 0b04 	ldr.w	r0, [r1], #4
 800360c:	f7ff ff8c 	bl	8003528 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003610:	2301      	movs	r3, #1
 8003612:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003616:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800361a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800361e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003622:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800362a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800362e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800363a:	2000      	movs	r0, #0
}
 800363c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800363e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003642:	f7ff ff6f 	bl	8003524 <HAL_TIM_PWM_MspInit>
 8003646:	e7db      	b.n	8003600 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003648:	2001      	movs	r0, #1
}
 800364a:	4770      	bx	lr

0800364c <TIM_OC2_SetConfig>:
{
 800364c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364e:	6a03      	ldr	r3, [r0, #32]
 8003650:	f023 0310 	bic.w	r3, r3, #16
 8003654:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003656:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003658:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800365a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800365c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003660:	680d      	ldr	r5, [r1, #0]
 8003662:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8003666:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800366a:	688d      	ldr	r5, [r1, #8]
 800366c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003670:	4d0e      	ldr	r5, [pc, #56]	; (80036ac <TIM_OC2_SetConfig+0x60>)
 8003672:	42a8      	cmp	r0, r5
 8003674:	d009      	beq.n	800368a <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003676:	4d0d      	ldr	r5, [pc, #52]	; (80036ac <TIM_OC2_SetConfig+0x60>)
 8003678:	42a8      	cmp	r0, r5
 800367a:	d00e      	beq.n	800369a <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 800367c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800367e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003680:	684a      	ldr	r2, [r1, #4]
 8003682:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003684:	6203      	str	r3, [r0, #32]
}
 8003686:	bc30      	pop	{r4, r5}
 8003688:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 800368a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800368e:	68cd      	ldr	r5, [r1, #12]
 8003690:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8003694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003698:	e7ed      	b.n	8003676 <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800369a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800369e:	694d      	ldr	r5, [r1, #20]
 80036a0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a4:	698d      	ldr	r5, [r1, #24]
 80036a6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80036aa:	e7e7      	b.n	800367c <TIM_OC2_SetConfig+0x30>
 80036ac:	40012c00 	.word	0x40012c00

080036b0 <HAL_TIM_PWM_ConfigChannel>:
{
 80036b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80036b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d060      	beq.n	800377c <HAL_TIM_PWM_ConfigChannel+0xcc>
 80036ba:	4604      	mov	r4, r0
 80036bc:	460d      	mov	r5, r1
 80036be:	2301      	movs	r3, #1
 80036c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80036c4:	2a0c      	cmp	r2, #12
 80036c6:	d81a      	bhi.n	80036fe <HAL_TIM_PWM_ConfigChannel+0x4e>
 80036c8:	e8df f002 	tbb	[pc, r2]
 80036cc:	19191907 	.word	0x19191907
 80036d0:	1919191d 	.word	0x1919191d
 80036d4:	19191931 	.word	0x19191931
 80036d8:	44          	.byte	0x44
 80036d9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036da:	6800      	ldr	r0, [r0, #0]
 80036dc:	f7ff fe70 	bl	80033c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036e0:	6822      	ldr	r2, [r4, #0]
 80036e2:	6993      	ldr	r3, [r2, #24]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ea:	6822      	ldr	r2, [r4, #0]
 80036ec:	6993      	ldr	r3, [r2, #24]
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036f4:	6822      	ldr	r2, [r4, #0]
 80036f6:	6993      	ldr	r3, [r2, #24]
 80036f8:	6929      	ldr	r1, [r5, #16]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80036fe:	2000      	movs	r0, #0
 8003700:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003704:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003706:	6800      	ldr	r0, [r0, #0]
 8003708:	f7ff ffa0 	bl	800364c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800370c:	6822      	ldr	r2, [r4, #0]
 800370e:	6993      	ldr	r3, [r2, #24]
 8003710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003714:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003716:	6822      	ldr	r2, [r4, #0]
 8003718:	6993      	ldr	r3, [r2, #24]
 800371a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800371e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	6993      	ldr	r3, [r2, #24]
 8003724:	6929      	ldr	r1, [r5, #16]
 8003726:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800372a:	6193      	str	r3, [r2, #24]
      break;
 800372c:	e7e7      	b.n	80036fe <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372e:	6800      	ldr	r0, [r0, #0]
 8003730:	f7ff fe74 	bl	800341c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003734:	6822      	ldr	r2, [r4, #0]
 8003736:	69d3      	ldr	r3, [r2, #28]
 8003738:	f043 0308 	orr.w	r3, r3, #8
 800373c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800373e:	6822      	ldr	r2, [r4, #0]
 8003740:	69d3      	ldr	r3, [r2, #28]
 8003742:	f023 0304 	bic.w	r3, r3, #4
 8003746:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003748:	6822      	ldr	r2, [r4, #0]
 800374a:	69d3      	ldr	r3, [r2, #28]
 800374c:	6929      	ldr	r1, [r5, #16]
 800374e:	430b      	orrs	r3, r1
 8003750:	61d3      	str	r3, [r2, #28]
      break;
 8003752:	e7d4      	b.n	80036fe <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003754:	6800      	ldr	r0, [r0, #0]
 8003756:	f7ff fe93 	bl	8003480 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	69d3      	ldr	r3, [r2, #28]
 800375e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003762:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003764:	6822      	ldr	r2, [r4, #0]
 8003766:	69d3      	ldr	r3, [r2, #28]
 8003768:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800376c:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800376e:	6822      	ldr	r2, [r4, #0]
 8003770:	69d3      	ldr	r3, [r2, #28]
 8003772:	6929      	ldr	r1, [r5, #16]
 8003774:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003778:	61d3      	str	r3, [r2, #28]
      break;
 800377a:	e7c0      	b.n	80036fe <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 800377c:	2002      	movs	r0, #2
 800377e:	e7c1      	b.n	8003704 <HAL_TIM_PWM_ConfigChannel+0x54>

08003780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003780:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003782:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003784:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003788:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800378c:	430a      	orrs	r2, r1
 800378e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003792:	6082      	str	r2, [r0, #8]
}
 8003794:	bc10      	pop	{r4}
 8003796:	4770      	bx	lr

08003798 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003798:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800379c:	2b01      	cmp	r3, #1
 800379e:	d066      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xd6>
{
 80037a0:	b510      	push	{r4, lr}
 80037a2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80037a4:	2301      	movs	r3, #1
 80037a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80037aa:	2302      	movs	r3, #2
 80037ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80037b0:	6802      	ldr	r2, [r0, #0]
 80037b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80037bc:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80037be:	680b      	ldr	r3, [r1, #0]
 80037c0:	2b60      	cmp	r3, #96	; 0x60
 80037c2:	d040      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0xae>
 80037c4:	d822      	bhi.n	800380c <HAL_TIM_ConfigClockSource+0x74>
 80037c6:	2b40      	cmp	r3, #64	; 0x40
 80037c8:	d047      	beq.n	800385a <HAL_TIM_ConfigClockSource+0xc2>
 80037ca:	d90b      	bls.n	80037e4 <HAL_TIM_ConfigClockSource+0x4c>
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d0:	68ca      	ldr	r2, [r1, #12]
 80037d2:	6849      	ldr	r1, [r1, #4]
 80037d4:	6800      	ldr	r0, [r0, #0]
 80037d6:	f7ff fe77 	bl	80034c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037da:	2150      	movs	r1, #80	; 0x50
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	f7ff fe98 	bl	8003512 <TIM_ITRx_SetConfig>
      break;
 80037e2:	e004      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d00c      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x6a>
 80037e8:	d908      	bls.n	80037fc <HAL_TIM_ConfigClockSource+0x64>
 80037ea:	2b30      	cmp	r3, #48	; 0x30
 80037ec:	d009      	beq.n	8003802 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80037f4:	2000      	movs	r0, #0
 80037f6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80037fa:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80037fc:	b10b      	cbz	r3, 8003802 <HAL_TIM_ConfigClockSource+0x6a>
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d1f5      	bne.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003802:	4619      	mov	r1, r3
 8003804:	6820      	ldr	r0, [r4, #0]
 8003806:	f7ff fe84 	bl	8003512 <TIM_ITRx_SetConfig>
        break;
 800380a:	e7f0      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d00e      	beq.n	800382e <HAL_TIM_ConfigClockSource+0x96>
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003814:	d1eb      	bne.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	68cb      	ldr	r3, [r1, #12]
 8003818:	684a      	ldr	r2, [r1, #4]
 800381a:	6889      	ldr	r1, [r1, #8]
 800381c:	6800      	ldr	r0, [r0, #0]
 800381e:	f7ff ffaf 	bl	8003780 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	6893      	ldr	r3, [r2, #8]
 8003826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800382a:	6093      	str	r3, [r2, #8]
      break;
 800382c:	e7df      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 800382e:	68cb      	ldr	r3, [r1, #12]
 8003830:	684a      	ldr	r2, [r1, #4]
 8003832:	6889      	ldr	r1, [r1, #8]
 8003834:	6800      	ldr	r0, [r0, #0]
 8003836:	f7ff ffa3 	bl	8003780 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800383a:	6822      	ldr	r2, [r4, #0]
 800383c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800383e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003842:	6093      	str	r3, [r2, #8]
      break;
 8003844:	e7d3      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	68ca      	ldr	r2, [r1, #12]
 8003848:	6849      	ldr	r1, [r1, #4]
 800384a:	6800      	ldr	r0, [r0, #0]
 800384c:	f7ff fe4e 	bl	80034ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003850:	2160      	movs	r1, #96	; 0x60
 8003852:	6820      	ldr	r0, [r4, #0]
 8003854:	f7ff fe5d 	bl	8003512 <TIM_ITRx_SetConfig>
      break;
 8003858:	e7c9      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	68ca      	ldr	r2, [r1, #12]
 800385c:	6849      	ldr	r1, [r1, #4]
 800385e:	6800      	ldr	r0, [r0, #0]
 8003860:	f7ff fe32 	bl	80034c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003864:	2140      	movs	r1, #64	; 0x40
 8003866:	6820      	ldr	r0, [r4, #0]
 8003868:	f7ff fe53 	bl	8003512 <TIM_ITRx_SetConfig>
      break;
 800386c:	e7bf      	b.n	80037ee <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 800386e:	2002      	movs	r0, #2
}
 8003870:	4770      	bx	lr

08003872 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003872:	f001 011f 	and.w	r1, r1, #31
 8003876:	2301      	movs	r3, #1
 8003878:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800387c:	6a03      	ldr	r3, [r0, #32]
 800387e:	ea23 030c 	bic.w	r3, r3, ip
 8003882:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003884:	6a03      	ldr	r3, [r0, #32]
 8003886:	fa02 f101 	lsl.w	r1, r2, r1
 800388a:	430b      	orrs	r3, r1
 800388c:	6203      	str	r3, [r0, #32]
}
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_PWM_Start>:
{
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003894:	4608      	mov	r0, r1
 8003896:	bb51      	cbnz	r1, 80038ee <HAL_TIM_PWM_Start+0x5e>
 8003898:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800389c:	b2db      	uxtb	r3, r3
 800389e:	3b01      	subs	r3, #1
 80038a0:	bf18      	it	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d15b      	bne.n	8003960 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a8:	2800      	cmp	r0, #0
 80038aa:	d139      	bne.n	8003920 <HAL_TIM_PWM_Start+0x90>
 80038ac:	2302      	movs	r3, #2
 80038ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038b2:	2201      	movs	r2, #1
 80038b4:	4601      	mov	r1, r0
 80038b6:	6820      	ldr	r0, [r4, #0]
 80038b8:	f7ff ffdb 	bl	8003872 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	4a2a      	ldr	r2, [pc, #168]	; (8003968 <HAL_TIM_PWM_Start+0xd8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d03d      	beq.n	8003940 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_TIM_PWM_Start+0xd8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d03e      	beq.n	800394a <HAL_TIM_PWM_Start+0xba>
 80038cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d0:	d03b      	beq.n	800394a <HAL_TIM_PWM_Start+0xba>
 80038d2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d037      	beq.n	800394a <HAL_TIM_PWM_Start+0xba>
 80038da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038de:	4293      	cmp	r3, r2
 80038e0:	d033      	beq.n	800394a <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	f042 0201 	orr.w	r2, r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038ea:	2000      	movs	r0, #0
 80038ec:	e039      	b.n	8003962 <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038ee:	2904      	cmp	r1, #4
 80038f0:	d008      	beq.n	8003904 <HAL_TIM_PWM_Start+0x74>
 80038f2:	2908      	cmp	r1, #8
 80038f4:	d00d      	beq.n	8003912 <HAL_TIM_PWM_Start+0x82>
 80038f6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3b01      	subs	r3, #1
 80038fe:	bf18      	it	ne
 8003900:	2301      	movne	r3, #1
 8003902:	e7cf      	b.n	80038a4 <HAL_TIM_PWM_Start+0x14>
 8003904:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8003908:	b2db      	uxtb	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	bf18      	it	ne
 800390e:	2301      	movne	r3, #1
 8003910:	e7c8      	b.n	80038a4 <HAL_TIM_PWM_Start+0x14>
 8003912:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003916:	b2db      	uxtb	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	bf18      	it	ne
 800391c:	2301      	movne	r3, #1
 800391e:	e7c1      	b.n	80038a4 <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003920:	2804      	cmp	r0, #4
 8003922:	d005      	beq.n	8003930 <HAL_TIM_PWM_Start+0xa0>
 8003924:	2808      	cmp	r0, #8
 8003926:	d007      	beq.n	8003938 <HAL_TIM_PWM_Start+0xa8>
 8003928:	2302      	movs	r3, #2
 800392a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800392e:	e7c0      	b.n	80038b2 <HAL_TIM_PWM_Start+0x22>
 8003930:	2302      	movs	r3, #2
 8003932:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003936:	e7bc      	b.n	80038b2 <HAL_TIM_PWM_Start+0x22>
 8003938:	2302      	movs	r3, #2
 800393a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800393e:	e7b8      	b.n	80038b2 <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8003940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003942:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
 8003948:	e7bc      	b.n	80038c4 <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003950:	2a06      	cmp	r2, #6
 8003952:	d007      	beq.n	8003964 <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800395c:	2000      	movs	r0, #0
 800395e:	e000      	b.n	8003962 <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8003960:	2001      	movs	r0, #1
}
 8003962:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8003964:	2000      	movs	r0, #0
 8003966:	e7fc      	b.n	8003962 <HAL_TIM_PWM_Start+0xd2>
 8003968:	40012c00 	.word	0x40012c00

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800396c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d02c      	beq.n	80039ce <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8003974:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8003976:	2301      	movs	r3, #1
 8003978:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	2302      	movs	r3, #2
 800397e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003982:	6803      	ldr	r3, [r0, #0]
 8003984:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003986:	689c      	ldr	r4, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003988:	f022 0c70 	bic.w	ip, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398c:	680a      	ldr	r2, [r1, #0]
 800398e:	ea42 020c 	orr.w	r2, r2, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003992:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	6803      	ldr	r3, [r0, #0]
 8003996:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00a      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d007      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80039a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d003      	beq.n	80039b2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 80039aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d104      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x50>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039b2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039b6:	684a      	ldr	r2, [r1, #4]
 80039b8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ba:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	2301      	movs	r3, #1
 80039be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c2:	2300      	movs	r3, #0
 80039c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80039c8:	4618      	mov	r0, r3
}
 80039ca:	bc10      	pop	{r4}
 80039cc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80039ce:	2002      	movs	r0, #2
}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40012c00 	.word	0x40012c00

080039d8 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039d8:	6802      	ldr	r2, [r0, #0]
 80039da:	68d3      	ldr	r3, [r2, #12]
 80039dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039e0:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039e2:	2320      	movs	r3, #32
 80039e4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 80039e8:	4770      	bx	lr

080039ea <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ea:	6802      	ldr	r2, [r0, #0]
 80039ec:	68d3      	ldr	r3, [r2, #12]
 80039ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039f2:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f4:	6802      	ldr	r2, [r0, #0]
 80039f6:	6953      	ldr	r3, [r2, #20]
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6153      	str	r3, [r2, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d005      	beq.n	8003a10 <UART_EndRxTransfer+0x26>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	2320      	movs	r3, #32
 8003a06:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003a0e:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a10:	6802      	ldr	r2, [r0, #0]
 8003a12:	68d3      	ldr	r3, [r2, #12]
 8003a14:	f023 0310 	bic.w	r3, r3, #16
 8003a18:	60d3      	str	r3, [r2, #12]
 8003a1a:	e7f3      	b.n	8003a04 <UART_EndRxTransfer+0x1a>

08003a1c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a1c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b21      	cmp	r3, #33	; 0x21
 8003a24:	d001      	beq.n	8003a2a <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8003a26:	2002      	movs	r0, #2
  }
}
 8003a28:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a2a:	6883      	ldr	r3, [r0, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a30:	d017      	beq.n	8003a62 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a32:	6a03      	ldr	r3, [r0, #32]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	6202      	str	r2, [r0, #32]
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	6803      	ldr	r3, [r0, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003a3e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003a48:	b94b      	cbnz	r3, 8003a5e <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a4a:	6802      	ldr	r2, [r0, #0]
 8003a4c:	68d3      	ldr	r3, [r2, #12]
 8003a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a52:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a54:	6802      	ldr	r2, [r0, #0]
 8003a56:	68d3      	ldr	r3, [r2, #12]
 8003a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a5c:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8003a5e:	2000      	movs	r0, #0
 8003a60:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a62:	6903      	ldr	r3, [r0, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1e4      	bne.n	8003a32 <UART_Transmit_IT+0x16>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a68:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	6802      	ldr	r2, [r0, #0]
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8003a74:	6a03      	ldr	r3, [r0, #32]
 8003a76:	3302      	adds	r3, #2
 8003a78:	6203      	str	r3, [r0, #32]
 8003a7a:	e7e0      	b.n	8003a3e <UART_Transmit_IT+0x22>

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b510      	push	{r4, lr}
 8003a7e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a80:	6802      	ldr	r2, [r0, #0]
 8003a82:	6913      	ldr	r3, [r2, #16]
 8003a84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a88:	68c1      	ldr	r1, [r0, #12]
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a8e:	6883      	ldr	r3, [r0, #8]
 8003a90:	6902      	ldr	r2, [r0, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	6942      	ldr	r2, [r0, #20]
 8003a96:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8003a98:	6801      	ldr	r1, [r0, #0]
 8003a9a:	68cb      	ldr	r3, [r1, #12]
 8003a9c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003aa0:	f023 030c 	bic.w	r3, r3, #12
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa8:	6802      	ldr	r2, [r0, #0]
 8003aaa:	6953      	ldr	r3, [r2, #20]
 8003aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab0:	6981      	ldr	r1, [r0, #24]
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8003ab6:	6802      	ldr	r2, [r0, #0]
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <UART_SetConfig+0x8c>)
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d020      	beq.n	8003b00 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff fc5f 	bl	8003380 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ac4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ac8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003acc:	6863      	ldr	r3, [r4, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	480d      	ldr	r0, [pc, #52]	; (8003b0c <UART_SetConfig+0x90>)
 8003ad6:	fba0 3102 	umull	r3, r1, r0, r2
 8003ada:	0949      	lsrs	r1, r1, #5
 8003adc:	2364      	movs	r3, #100	; 0x64
 8003ade:	fb03 2311 	mls	r3, r3, r1, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3332      	adds	r3, #50	; 0x32
 8003ae6:	fba0 2303 	umull	r2, r3, r0, r3
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003af0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	6821      	ldr	r1, [r4, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8003afe:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7ff fc4e 	bl	80033a0 <HAL_RCC_GetPCLK2Freq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	e7dd      	b.n	8003ac4 <UART_SetConfig+0x48>
 8003b08:	40013800 	.word	0x40013800
 8003b0c:	51eb851f 	.word	0x51eb851f

08003b10 <UART_WaitOnFlagUntilTimeout>:
{
 8003b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b14:	4605      	mov	r5, r0
 8003b16:	460f      	mov	r7, r1
 8003b18:	4616      	mov	r6, r2
 8003b1a:	4699      	mov	r9, r3
 8003b1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b20:	682c      	ldr	r4, [r5, #0]
 8003b22:	6824      	ldr	r4, [r4, #0]
 8003b24:	ea37 0304 	bics.w	r3, r7, r4
 8003b28:	bf0c      	ite	eq
 8003b2a:	f04f 0c01 	moveq.w	ip, #1
 8003b2e:	f04f 0c00 	movne.w	ip, #0
 8003b32:	45b4      	cmp	ip, r6
 8003b34:	d11f      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0x66>
    if (Timeout != HAL_MAX_DELAY)
 8003b36:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003b3a:	d0f1      	beq.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b3c:	f1b8 0f00 	cmp.w	r8, #0
 8003b40:	d005      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0x3e>
 8003b42:	f7fe fc99 	bl	8002478 <HAL_GetTick>
 8003b46:	eba0 0009 	sub.w	r0, r0, r9
 8003b4a:	4540      	cmp	r0, r8
 8003b4c:	d9e8      	bls.n	8003b20 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4e:	682a      	ldr	r2, [r5, #0]
 8003b50:	68d3      	ldr	r3, [r2, #12]
 8003b52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b56:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b58:	682a      	ldr	r2, [r5, #0]
 8003b5a:	6953      	ldr	r3, [r2, #20]
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003b62:	2320      	movs	r3, #32
 8003b64:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b68:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_TIMEOUT;
 8003b72:	2003      	movs	r0, #3
 8003b74:	e000      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x68>
  return HAL_OK;
 8003b76:	2000      	movs	r0, #0
}
 8003b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003b7c <HAL_UART_Init>:
  if (huart == NULL)
 8003b7c:	b358      	cbz	r0, 8003bd6 <HAL_UART_Init+0x5a>
{
 8003b7e:	b510      	push	{r4, lr}
 8003b80:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b86:	b30b      	cbz	r3, 8003bcc <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8003b88:	2324      	movs	r3, #36	; 0x24
 8003b8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003b8e:	6822      	ldr	r2, [r4, #0]
 8003b90:	68d3      	ldr	r3, [r2, #12]
 8003b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b96:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7ff ff6f 	bl	8003a7c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9e:	6822      	ldr	r2, [r4, #0]
 8003ba0:	6913      	ldr	r3, [r2, #16]
 8003ba2:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003ba6:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	6953      	ldr	r3, [r2, #20]
 8003bac:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8003bb0:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	68d3      	ldr	r3, [r2, #12]
 8003bb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bba:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003bca:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003bcc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003bd0:	f7fd fd04 	bl	80015dc <HAL_UART_MspInit>
 8003bd4:	e7d8      	b.n	8003b88 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
}
 8003bd8:	4770      	bx	lr

08003bda <HAL_UART_DeInit>:
  if (huart == NULL)
 8003bda:	b1a8      	cbz	r0, 8003c08 <HAL_UART_DeInit+0x2e>
{
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8003be0:	2324      	movs	r3, #36	; 0x24
 8003be2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003be6:	6802      	ldr	r2, [r0, #0]
 8003be8:	68d3      	ldr	r3, [r2, #12]
 8003bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bee:	60d3      	str	r3, [r2, #12]
  HAL_UART_MspDeInit(huart);
 8003bf0:	f7fd fd6a 	bl	80016c8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003bf8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003bfc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	6320      	str	r0, [r4, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8003c02:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003c06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003c08:	2001      	movs	r0, #1
}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_UART_Transmit>:
{
 8003c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003c14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d154      	bne.n	8003cc8 <HAL_UART_Transmit+0xbc>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	460d      	mov	r5, r1
 8003c22:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8003c24:	2900      	cmp	r1, #0
 8003c26:	d053      	beq.n	8003cd0 <HAL_UART_Transmit+0xc4>
 8003c28:	2a00      	cmp	r2, #0
 8003c2a:	d053      	beq.n	8003cd4 <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8003c2c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d051      	beq.n	8003cd8 <HAL_UART_Transmit+0xcc>
 8003c34:	2301      	movs	r3, #1
 8003c36:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3e:	2321      	movs	r3, #33	; 0x21
 8003c40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003c44:	f7fe fc18 	bl	8002478 <HAL_GetTick>
 8003c48:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8003c4a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8003c5a:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003c64:	e012      	b.n	8003c8c <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c66:	6923      	ldr	r3, [r4, #16]
 8003c68:	b113      	cbz	r3, 8003c70 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	e7f6      	b.n	8003c5e <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 8003c70:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8003c72:	2500      	movs	r5, #0
 8003c74:	e7f3      	b.n	8003c5e <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c76:	f838 3b02 	ldrh.w	r3, [r8], #2
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c80:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003c82:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003c84:	b292      	uxth	r2, r2
 8003c86:	3a01      	subs	r2, #1
 8003c88:	b292      	uxth	r2, r2
 8003c8a:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c8c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b173      	cbz	r3, 8003cb0 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c92:	9600      	str	r6, [sp, #0]
 8003c94:	463b      	mov	r3, r7
 8003c96:	2200      	movs	r2, #0
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff ff38 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003ca0:	b9e0      	cbnz	r0, 8003cdc <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8003ca2:	2d00      	cmp	r5, #0
 8003ca4:	d0e7      	beq.n	8003c76 <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cae:	e7e8      	b.n	8003c82 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cb0:	9600      	str	r6, [sp, #0]
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff ff29 	bl	8003b10 <UART_WaitOnFlagUntilTimeout>
 8003cbe:	b978      	cbnz	r0, 8003ce0 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8003cc0:	2320      	movs	r3, #32
 8003cc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003cc6:	e000      	b.n	8003cca <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8003cc8:	2002      	movs	r0, #2
}
 8003cca:	b002      	add	sp, #8
 8003ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	e7fa      	b.n	8003cca <HAL_UART_Transmit+0xbe>
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	e7f8      	b.n	8003cca <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8003cd8:	2002      	movs	r0, #2
 8003cda:	e7f6      	b.n	8003cca <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8003cdc:	2003      	movs	r0, #3
 8003cde:	e7f4      	b.n	8003cca <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	e7f2      	b.n	8003cca <HAL_UART_Transmit+0xbe>

08003ce4 <HAL_UART_TxCpltCallback>:
}
 8003ce4:	4770      	bx	lr

08003ce6 <UART_EndTransmit_IT>:
{
 8003ce6:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ce8:	6801      	ldr	r1, [r0, #0]
 8003cea:	68ca      	ldr	r2, [r1, #12]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf0:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8003cf8:	f7ff fff4 	bl	8003ce4 <HAL_UART_TxCpltCallback>
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	bd08      	pop	{r3, pc}

08003d00 <HAL_UART_RxHalfCpltCallback>:
}
 8003d00:	4770      	bx	lr

08003d02 <UART_DMAError>:
{
 8003d02:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d04:	6a44      	ldr	r4, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d0a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b21      	cmp	r3, #33	; 0x21
 8003d12:	d010      	beq.n	8003d36 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d1c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b22      	cmp	r3, #34	; 0x22
 8003d24:	d011      	beq.n	8003d4a <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d28:	f043 0310 	orr.w	r3, r3, #16
 8003d2c:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f7fd fc3a 	bl	80015a8 <HAL_UART_ErrorCallback>
}
 8003d34:	bd10      	pop	{r4, pc}
 8003d36:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d3a:	2a00      	cmp	r2, #0
 8003d3c:	d0ea      	beq.n	8003d14 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff fe48 	bl	80039d8 <UART_EndTxTransfer>
 8003d48:	e7e4      	b.n	8003d14 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d0eb      	beq.n	8003d26 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d52:	4620      	mov	r0, r4
 8003d54:	f7ff fe49 	bl	80039ea <UART_EndRxTransfer>
 8003d58:	e7e5      	b.n	8003d26 <UART_DMAError+0x24>

08003d5a <UART_DMAAbortOnError>:
{
 8003d5a:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d62:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003d64:	f7fd fc20 	bl	80015a8 <HAL_UART_ErrorCallback>
}
 8003d68:	bd08      	pop	{r3, pc}

08003d6a <HAL_UARTEx_RxEventCallback>:
}
 8003d6a:	4770      	bx	lr

08003d6c <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d6c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b22      	cmp	r3, #34	; 0x22
 8003d74:	d160      	bne.n	8003e38 <UART_Receive_IT+0xcc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d76:	6883      	ldr	r3, [r0, #8]
 8003d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7c:	d046      	beq.n	8003e0c <UART_Receive_IT+0xa0>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d7e:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d84:	d004      	beq.n	8003d90 <UART_Receive_IT+0x24>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d14d      	bne.n	8003e26 <UART_Receive_IT+0xba>
 8003d8a:	6903      	ldr	r3, [r0, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d14a      	bne.n	8003e26 <UART_Receive_IT+0xba>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d90:	6803      	ldr	r3, [r0, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003d96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003d98:	3301      	adds	r3, #1
 8003d9a:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003d9c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d148      	bne.n	8003e3c <UART_Receive_IT+0xd0>
{
 8003daa:	b500      	push	{lr}
 8003dac:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dae:	6802      	ldr	r2, [r0, #0]
 8003db0:	68d3      	ldr	r3, [r2, #12]
 8003db2:	f023 0320 	bic.w	r3, r3, #32
 8003db6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db8:	6802      	ldr	r2, [r0, #0]
 8003dba:	68d3      	ldr	r3, [r2, #12]
 8003dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dc0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc2:	6802      	ldr	r2, [r0, #0]
 8003dc4:	6953      	ldr	r3, [r2, #20]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	2320      	movs	r3, #32
 8003dce:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d12c      	bne.n	8003e32 <UART_Receive_IT+0xc6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	6802      	ldr	r2, [r0, #0]
 8003dde:	68d3      	ldr	r3, [r2, #12]
 8003de0:	f023 0310 	bic.w	r3, r3, #16
 8003de4:	60d3      	str	r3, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003de6:	6803      	ldr	r3, [r0, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	f012 0f10 	tst.w	r2, #16
 8003dee:	d006      	beq.n	8003dfe <UART_Receive_IT+0x92>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df0:	2200      	movs	r2, #0
 8003df2:	9201      	str	r2, [sp, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	9201      	str	r2, [sp, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dfe:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003e00:	f7ff ffb3 	bl	8003d6a <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8003e04:	2000      	movs	r0, #0
}
 8003e06:	b003      	add	sp, #12
 8003e08:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	6902      	ldr	r2, [r0, #16]
 8003e0e:	2a00      	cmp	r2, #0
 8003e10:	d1b5      	bne.n	8003d7e <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e12:	6a82      	ldr	r2, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e14:	6803      	ldr	r3, [r0, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e1c:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003e1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e20:	3302      	adds	r3, #2
 8003e22:	6283      	str	r3, [r0, #40]	; 0x28
 8003e24:	e7ba      	b.n	8003d9c <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e26:	6803      	ldr	r3, [r0, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e2e:	7013      	strb	r3, [r2, #0]
 8003e30:	e7b1      	b.n	8003d96 <UART_Receive_IT+0x2a>
       HAL_UART_RxCpltCallback(huart);
 8003e32:	f7fd fbad 	bl	8001590 <HAL_UART_RxCpltCallback>
 8003e36:	e7e5      	b.n	8003e04 <UART_Receive_IT+0x98>
    return HAL_BUSY;
 8003e38:	2002      	movs	r0, #2
 8003e3a:	4770      	bx	lr
    return HAL_OK;
 8003e3c:	2000      	movs	r0, #0
}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_IRQHandler>:
{
 8003e40:	b530      	push	{r4, r5, lr}
 8003e42:	b083      	sub	sp, #12
 8003e44:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e46:	6802      	ldr	r2, [r0, #0]
 8003e48:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e4a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e4c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8003e4e:	f013 050f 	ands.w	r5, r3, #15
 8003e52:	d105      	bne.n	8003e60 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e54:	f013 0f20 	tst.w	r3, #32
 8003e58:	d002      	beq.n	8003e60 <HAL_UART_IRQHandler+0x20>
 8003e5a:	f010 0f20 	tst.w	r0, #32
 8003e5e:	d119      	bne.n	8003e94 <HAL_UART_IRQHandler+0x54>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e60:	b12d      	cbz	r5, 8003e6e <HAL_UART_IRQHandler+0x2e>
 8003e62:	f011 0101 	ands.w	r1, r1, #1
 8003e66:	d119      	bne.n	8003e9c <HAL_UART_IRQHandler+0x5c>
 8003e68:	f410 7f90 	tst.w	r0, #288	; 0x120
 8003e6c:	d116      	bne.n	8003e9c <HAL_UART_IRQHandler+0x5c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e70:	2901      	cmp	r1, #1
 8003e72:	d075      	beq.n	8003f60 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003e78:	d003      	beq.n	8003e82 <HAL_UART_IRQHandler+0x42>
 8003e7a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003e7e:	f040 80d7 	bne.w	8004030 <HAL_UART_IRQHandler+0x1f0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e86:	d003      	beq.n	8003e90 <HAL_UART_IRQHandler+0x50>
 8003e88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e8c:	f040 80d4 	bne.w	8004038 <HAL_UART_IRQHandler+0x1f8>
}
 8003e90:	b003      	add	sp, #12
 8003e92:	bd30      	pop	{r4, r5, pc}
      UART_Receive_IT(huart);
 8003e94:	4620      	mov	r0, r4
 8003e96:	f7ff ff69 	bl	8003d6c <UART_Receive_IT>
      return;
 8003e9a:	e7f9      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e9c:	f013 0f01 	tst.w	r3, #1
 8003ea0:	d006      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x70>
 8003ea2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003ea6:	d003      	beq.n	8003eb0 <HAL_UART_IRQHandler+0x70>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb0:	f013 0f04 	tst.w	r3, #4
 8003eb4:	d004      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x80>
 8003eb6:	b119      	cbz	r1, 8003ec0 <HAL_UART_IRQHandler+0x80>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003eba:	f042 0202 	orr.w	r2, r2, #2
 8003ebe:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ec0:	f013 0f02 	tst.w	r3, #2
 8003ec4:	d004      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x90>
 8003ec6:	b119      	cbz	r1, 8003ed0 <HAL_UART_IRQHandler+0x90>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003eca:	f042 0204 	orr.w	r2, r2, #4
 8003ece:	6422      	str	r2, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ed0:	f013 0f08 	tst.w	r3, #8
 8003ed4:	d007      	beq.n	8003ee6 <HAL_UART_IRQHandler+0xa6>
 8003ed6:	f010 0f20 	tst.w	r0, #32
 8003eda:	d100      	bne.n	8003ede <HAL_UART_IRQHandler+0x9e>
 8003edc:	b119      	cbz	r1, 8003ee6 <HAL_UART_IRQHandler+0xa6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ede:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ee0:	f042 0208 	orr.w	r2, r2, #8
 8003ee4:	6422      	str	r2, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ee6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ee8:	2a00      	cmp	r2, #0
 8003eea:	d0d1      	beq.n	8003e90 <HAL_UART_IRQHandler+0x50>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eec:	f013 0f20 	tst.w	r3, #32
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_IRQHandler+0xb8>
 8003ef2:	f010 0f20 	tst.w	r0, #32
 8003ef6:	d121      	bne.n	8003f3c <HAL_UART_IRQHandler+0xfc>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef8:	6823      	ldr	r3, [r4, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f00:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f02:	f012 0f08 	tst.w	r2, #8
 8003f06:	d100      	bne.n	8003f0a <HAL_UART_IRQHandler+0xca>
 8003f08:	b323      	cbz	r3, 8003f54 <HAL_UART_IRQHandler+0x114>
        UART_EndRxTransfer(huart);
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff fd6d 	bl	80039ea <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f18:	d018      	beq.n	8003f4c <HAL_UART_IRQHandler+0x10c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f1a:	695a      	ldr	r2, [r3, #20]
 8003f1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f20:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8003f22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f24:	b173      	cbz	r3, 8003f44 <HAL_UART_IRQHandler+0x104>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f26:	4a46      	ldr	r2, [pc, #280]	; (8004040 <HAL_UART_IRQHandler+0x200>)
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f2a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f2c:	f7fe fd38 	bl	80029a0 <HAL_DMA_Abort_IT>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0ad      	beq.n	8003e90 <HAL_UART_IRQHandler+0x50>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f34:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f38:	4798      	blx	r3
 8003f3a:	e7a9      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
        UART_Receive_IT(huart);
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7ff ff15 	bl	8003d6c <UART_Receive_IT>
 8003f42:	e7d9      	b.n	8003ef8 <HAL_UART_IRQHandler+0xb8>
            HAL_UART_ErrorCallback(huart);
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7fd fb2f 	bl	80015a8 <HAL_UART_ErrorCallback>
 8003f4a:	e7a1      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
          HAL_UART_ErrorCallback(huart);
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7fd fb2b 	bl	80015a8 <HAL_UART_ErrorCallback>
 8003f52:	e79d      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 8003f54:	4620      	mov	r0, r4
 8003f56:	f7fd fb27 	bl	80015a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	6423      	str	r3, [r4, #64]	; 0x40
    return;
 8003f5e:	e797      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f60:	f013 0f10 	tst.w	r3, #16
 8003f64:	d086      	beq.n	8003e74 <HAL_UART_IRQHandler+0x34>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f66:	f010 0f10 	tst.w	r0, #16
 8003f6a:	d083      	beq.n	8003e74 <HAL_UART_IRQHandler+0x34>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	6813      	ldr	r3, [r2, #0]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	6853      	ldr	r3, [r2, #4]
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7a:	6953      	ldr	r3, [r2, #20]
 8003f7c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f80:	d032      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x1a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f84:	680b      	ldr	r3, [r1, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d080      	beq.n	8003e90 <HAL_UART_IRQHandler+0x50>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f8e:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003f90:	4298      	cmp	r0, r3
 8003f92:	f67f af7d 	bls.w	8003e90 <HAL_UART_IRQHandler+0x50>
        huart->RxXferCount = nb_remaining_rx_data;
 8003f96:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f98:	698b      	ldr	r3, [r1, #24]
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d108      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x170>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f9e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003fa0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	1ac9      	subs	r1, r1, r3
 8003fa6:	b289      	uxth	r1, r1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f7ff fede 	bl	8003d6a <HAL_UARTEx_RxEventCallback>
      return;
 8003fae:	e76f      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb0:	68d3      	ldr	r3, [r2, #12]
 8003fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb6:	60d3      	str	r3, [r2, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	6953      	ldr	r3, [r2, #20]
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6153      	str	r3, [r2, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	6953      	ldr	r3, [r2, #20]
 8003fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fca:	6153      	str	r3, [r2, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6323      	str	r3, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd6:	6822      	ldr	r2, [r4, #0]
 8003fd8:	68d3      	ldr	r3, [r2, #12]
 8003fda:	f023 0310 	bic.w	r3, r3, #16
 8003fde:	60d3      	str	r3, [r2, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003fe2:	f7fe fcbb 	bl	800295c <HAL_DMA_Abort>
 8003fe6:	e7da      	b.n	8003f9e <HAL_UART_IRQHandler+0x15e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003fe8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003fea:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	1ac9      	subs	r1, r1, r3
 8003ff0:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 8003ff2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f43f af4a 	beq.w	8003e90 <HAL_UART_IRQHandler+0x50>
          &&(nb_rx_data > 0U) )
 8003ffc:	2900      	cmp	r1, #0
 8003ffe:	f43f af47 	beq.w	8003e90 <HAL_UART_IRQHandler+0x50>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004002:	68d3      	ldr	r3, [r2, #12]
 8004004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004008:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400a:	6822      	ldr	r2, [r4, #0]
 800400c:	6953      	ldr	r3, [r2, #20]
 800400e:	f023 0301 	bic.w	r3, r3, #1
 8004012:	6153      	str	r3, [r2, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8004014:	2320      	movs	r3, #32
 8004016:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800401a:	2300      	movs	r3, #0
 800401c:	6323      	str	r3, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	68d3      	ldr	r3, [r2, #12]
 8004022:	f023 0310 	bic.w	r3, r3, #16
 8004026:	60d3      	str	r3, [r2, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004028:	4620      	mov	r0, r4
 800402a:	f7ff fe9e 	bl	8003d6a <HAL_UARTEx_RxEventCallback>
      return;
 800402e:	e72f      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
    UART_Transmit_IT(huart);
 8004030:	4620      	mov	r0, r4
 8004032:	f7ff fcf3 	bl	8003a1c <UART_Transmit_IT>
    return;
 8004036:	e72b      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
    UART_EndTransmit_IT(huart);
 8004038:	4620      	mov	r0, r4
 800403a:	f7ff fe54 	bl	8003ce6 <UART_EndTransmit_IT>
    return;
 800403e:	e727      	b.n	8003e90 <HAL_UART_IRQHandler+0x50>
 8004040:	08003d5b 	.word	0x08003d5b

08004044 <UART_DMARxHalfCplt>:
{
 8004044:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004046:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004048:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800404a:	2b01      	cmp	r3, #1
 800404c:	d002      	beq.n	8004054 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 800404e:	f7ff fe57 	bl	8003d00 <HAL_UART_RxHalfCpltCallback>
}
 8004052:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004054:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004056:	0849      	lsrs	r1, r1, #1
 8004058:	f7ff fe87 	bl	8003d6a <HAL_UARTEx_RxEventCallback>
 800405c:	e7f9      	b.n	8004052 <UART_DMARxHalfCplt+0xe>

0800405e <UART_DMAReceiveCplt>:
{
 800405e:	b508      	push	{r3, lr}
 8004060:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004062:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f013 0f20 	tst.w	r3, #32
 800406c:	d116      	bne.n	800409c <UART_DMAReceiveCplt+0x3e>
    huart->RxXferCount = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004072:	6802      	ldr	r2, [r0, #0]
 8004074:	68d3      	ldr	r3, [r2, #12]
 8004076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800407a:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800407c:	6802      	ldr	r2, [r0, #0]
 800407e:	6953      	ldr	r3, [r2, #20]
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004086:	6802      	ldr	r2, [r0, #0]
 8004088:	6953      	ldr	r3, [r2, #20]
 800408a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8004090:	2320      	movs	r3, #32
 8004092:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004096:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004098:	2b01      	cmp	r3, #1
 800409a:	d005      	beq.n	80040a8 <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800409c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d008      	beq.n	80040b4 <UART_DMAReceiveCplt+0x56>
    HAL_UART_RxCpltCallback(huart);
 80040a2:	f7fd fa75 	bl	8001590 <HAL_UART_RxCpltCallback>
}
 80040a6:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040a8:	6802      	ldr	r2, [r0, #0]
 80040aa:	68d3      	ldr	r3, [r2, #12]
 80040ac:	f023 0310 	bic.w	r3, r3, #16
 80040b0:	60d3      	str	r3, [r2, #12]
 80040b2:	e7f3      	b.n	800409c <UART_DMAReceiveCplt+0x3e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040b4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80040b6:	f7ff fe58 	bl	8003d6a <HAL_UARTEx_RxEventCallback>
 80040ba:	e7f4      	b.n	80040a6 <UART_DMAReceiveCplt+0x48>

080040bc <UART_Start_Receive_IT>:
{
 80040bc:	4603      	mov	r3, r0
  huart->pRxBuffPtr = pData;
 80040be:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 80040c0:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxXferCount = Size;
 80040c2:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	2000      	movs	r0, #0
 80040c6:	6418      	str	r0, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040c8:	2222      	movs	r2, #34	; 0x22
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UNLOCK(huart);
 80040ce:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	68ca      	ldr	r2, [r1, #12]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040da:	60ca      	str	r2, [r1, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040dc:	6819      	ldr	r1, [r3, #0]
 80040de:	694a      	ldr	r2, [r1, #20]
 80040e0:	f042 0201 	orr.w	r2, r2, #1
 80040e4:	614a      	str	r2, [r1, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68d3      	ldr	r3, [r2, #12]
 80040ea:	f043 0320 	orr.w	r3, r3, #32
 80040ee:	60d3      	str	r3, [r2, #12]
}
 80040f0:	4770      	bx	lr

080040f2 <HAL_UART_Receive_IT>:
{
 80040f2:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80040f4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d10d      	bne.n	800411a <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 80040fe:	b171      	cbz	r1, 800411e <HAL_UART_Receive_IT+0x2c>
 8004100:	b17a      	cbz	r2, 8004122 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8004102:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d00d      	beq.n	8004126 <HAL_UART_Receive_IT+0x34>
 800410a:	2301      	movs	r3, #1
 800410c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	2300      	movs	r3, #0
 8004112:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004114:	f7ff ffd2 	bl	80040bc <UART_Start_Receive_IT>
 8004118:	e000      	b.n	800411c <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 800411a:	2002      	movs	r0, #2
}
 800411c:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 800411e:	2001      	movs	r0, #1
 8004120:	e7fc      	b.n	800411c <HAL_UART_Receive_IT+0x2a>
 8004122:	2001      	movs	r0, #1
 8004124:	e7fa      	b.n	800411c <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 8004126:	2002      	movs	r0, #2
 8004128:	e7f8      	b.n	800411c <HAL_UART_Receive_IT+0x2a>
	...

0800412c <UART_Start_Receive_DMA>:
{
 800412c:	b530      	push	{r4, r5, lr}
 800412e:	b083      	sub	sp, #12
 8004130:	4604      	mov	r4, r0
 8004132:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8004134:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004136:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004138:	2500      	movs	r5, #0
 800413a:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800413c:	2222      	movs	r2, #34	; 0x22
 800413e:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004142:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8004144:	4814      	ldr	r0, [pc, #80]	; (8004198 <UART_Start_Receive_DMA+0x6c>)
 8004146:	6290      	str	r0, [r2, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004148:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800414a:	4814      	ldr	r0, [pc, #80]	; (800419c <UART_Start_Receive_DMA+0x70>)
 800414c:	62d0      	str	r0, [r2, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800414e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004150:	4813      	ldr	r0, [pc, #76]	; (80041a0 <UART_Start_Receive_DMA+0x74>)
 8004152:	6310      	str	r0, [r2, #48]	; 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8004154:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004156:	6355      	str	r5, [r2, #52]	; 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004158:	6820      	ldr	r0, [r4, #0]
 800415a:	460a      	mov	r2, r1
 800415c:	1d01      	adds	r1, r0, #4
 800415e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004160:	f7fe fbc2 	bl	80028e8 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004164:	9501      	str	r5, [sp, #4]
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	9201      	str	r2, [sp, #4]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	9201      	str	r2, [sp, #4]
 8004170:	9a01      	ldr	r2, [sp, #4]
  __HAL_UNLOCK(huart);
 8004172:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004176:	68da      	ldr	r2, [r3, #12]
 8004178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800417c:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800417e:	6822      	ldr	r2, [r4, #0]
 8004180:	6953      	ldr	r3, [r2, #20]
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004188:	6822      	ldr	r2, [r4, #0]
 800418a:	6953      	ldr	r3, [r2, #20]
 800418c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004190:	6153      	str	r3, [r2, #20]
}
 8004192:	4628      	mov	r0, r5
 8004194:	b003      	add	sp, #12
 8004196:	bd30      	pop	{r4, r5, pc}
 8004198:	0800405f 	.word	0x0800405f
 800419c:	08004045 	.word	0x08004045
 80041a0:	08003d03 	.word	0x08003d03

080041a4 <HAL_UART_Receive_DMA>:
{
 80041a4:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d10d      	bne.n	80041cc <HAL_UART_Receive_DMA+0x28>
    if ((pData == NULL) || (Size == 0U))
 80041b0:	b171      	cbz	r1, 80041d0 <HAL_UART_Receive_DMA+0x2c>
 80041b2:	b17a      	cbz	r2, 80041d4 <HAL_UART_Receive_DMA+0x30>
    __HAL_LOCK(huart);
 80041b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d00d      	beq.n	80041d8 <HAL_UART_Receive_DMA+0x34>
 80041bc:	2301      	movs	r3, #1
 80041be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c2:	2300      	movs	r3, #0
 80041c4:	6303      	str	r3, [r0, #48]	; 0x30
    return(UART_Start_Receive_DMA(huart, pData, Size));
 80041c6:	f7ff ffb1 	bl	800412c <UART_Start_Receive_DMA>
 80041ca:	e000      	b.n	80041ce <HAL_UART_Receive_DMA+0x2a>
    return HAL_BUSY;
 80041cc:	2002      	movs	r0, #2
}
 80041ce:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
 80041d2:	e7fc      	b.n	80041ce <HAL_UART_Receive_DMA+0x2a>
 80041d4:	2001      	movs	r0, #1
 80041d6:	e7fa      	b.n	80041ce <HAL_UART_Receive_DMA+0x2a>
    __HAL_LOCK(huart);
 80041d8:	2002      	movs	r0, #2
 80041da:	e7f8      	b.n	80041ce <HAL_UART_Receive_DMA+0x2a>

080041dc <main>:

//static void threadMain(void const *argument);
//static void threadMain2(void const *argument);

int main(void)
{	hwInit();
 80041dc:	b508      	push	{r3, lr}
 80041de:	f7fd fa95 	bl	800170c <hwInit>
	appInit();
 80041e2:	f7fc fc8f 	bl	8000b04 <appInit>
		while(1);
	}

	osKernelStart();
	*/
	appMain();
 80041e6:	f7fc fcbf 	bl	8000b68 <appMain>
	return 0;
	//appMain();
}
 80041ea:	2000      	movs	r0, #0
 80041ec:	bd08      	pop	{r3, pc}
	...

080041f0 <__libc_init_array>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	2600      	movs	r6, #0
 80041f4:	4d0c      	ldr	r5, [pc, #48]	; (8004228 <__libc_init_array+0x38>)
 80041f6:	4c0d      	ldr	r4, [pc, #52]	; (800422c <__libc_init_array+0x3c>)
 80041f8:	1b64      	subs	r4, r4, r5
 80041fa:	10a4      	asrs	r4, r4, #2
 80041fc:	42a6      	cmp	r6, r4
 80041fe:	d109      	bne.n	8004214 <__libc_init_array+0x24>
 8004200:	f002 ff4c 	bl	800709c <_init>
 8004204:	2600      	movs	r6, #0
 8004206:	4d0a      	ldr	r5, [pc, #40]	; (8004230 <__libc_init_array+0x40>)
 8004208:	4c0a      	ldr	r4, [pc, #40]	; (8004234 <__libc_init_array+0x44>)
 800420a:	1b64      	subs	r4, r4, r5
 800420c:	10a4      	asrs	r4, r4, #2
 800420e:	42a6      	cmp	r6, r4
 8004210:	d105      	bne.n	800421e <__libc_init_array+0x2e>
 8004212:	bd70      	pop	{r4, r5, r6, pc}
 8004214:	f855 3b04 	ldr.w	r3, [r5], #4
 8004218:	4798      	blx	r3
 800421a:	3601      	adds	r6, #1
 800421c:	e7ee      	b.n	80041fc <__libc_init_array+0xc>
 800421e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004222:	4798      	blx	r3
 8004224:	3601      	adds	r6, #1
 8004226:	e7f2      	b.n	800420e <__libc_init_array+0x1e>
 8004228:	0800768c 	.word	0x0800768c
 800422c:	0800768c 	.word	0x0800768c
 8004230:	0800768c 	.word	0x0800768c
 8004234:	08007690 	.word	0x08007690

08004238 <memcpy>:
 8004238:	440a      	add	r2, r1
 800423a:	4291      	cmp	r1, r2
 800423c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004240:	d100      	bne.n	8004244 <memcpy+0xc>
 8004242:	4770      	bx	lr
 8004244:	b510      	push	{r4, lr}
 8004246:	f811 4b01 	ldrb.w	r4, [r1], #1
 800424a:	4291      	cmp	r1, r2
 800424c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004250:	d1f9      	bne.n	8004246 <memcpy+0xe>
 8004252:	bd10      	pop	{r4, pc}

08004254 <memset>:
 8004254:	4603      	mov	r3, r0
 8004256:	4402      	add	r2, r0
 8004258:	4293      	cmp	r3, r2
 800425a:	d100      	bne.n	800425e <memset+0xa>
 800425c:	4770      	bx	lr
 800425e:	f803 1b01 	strb.w	r1, [r3], #1
 8004262:	e7f9      	b.n	8004258 <memset+0x4>

08004264 <__cvt>:
 8004264:	2b00      	cmp	r3, #0
 8004266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426a:	461f      	mov	r7, r3
 800426c:	bfbb      	ittet	lt
 800426e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004272:	461f      	movlt	r7, r3
 8004274:	2300      	movge	r3, #0
 8004276:	232d      	movlt	r3, #45	; 0x2d
 8004278:	b088      	sub	sp, #32
 800427a:	4614      	mov	r4, r2
 800427c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800427e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004280:	7013      	strb	r3, [r2, #0]
 8004282:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004284:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004288:	f023 0820 	bic.w	r8, r3, #32
 800428c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004290:	d005      	beq.n	800429e <__cvt+0x3a>
 8004292:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004296:	d100      	bne.n	800429a <__cvt+0x36>
 8004298:	3501      	adds	r5, #1
 800429a:	2302      	movs	r3, #2
 800429c:	e000      	b.n	80042a0 <__cvt+0x3c>
 800429e:	2303      	movs	r3, #3
 80042a0:	aa07      	add	r2, sp, #28
 80042a2:	9204      	str	r2, [sp, #16]
 80042a4:	aa06      	add	r2, sp, #24
 80042a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042aa:	e9cd 3500 	strd	r3, r5, [sp]
 80042ae:	4622      	mov	r2, r4
 80042b0:	463b      	mov	r3, r7
 80042b2:	f000 fce5 	bl	8004c80 <_dtoa_r>
 80042b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042ba:	4606      	mov	r6, r0
 80042bc:	d102      	bne.n	80042c4 <__cvt+0x60>
 80042be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042c0:	07db      	lsls	r3, r3, #31
 80042c2:	d522      	bpl.n	800430a <__cvt+0xa6>
 80042c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042c8:	eb06 0905 	add.w	r9, r6, r5
 80042cc:	d110      	bne.n	80042f0 <__cvt+0x8c>
 80042ce:	7833      	ldrb	r3, [r6, #0]
 80042d0:	2b30      	cmp	r3, #48	; 0x30
 80042d2:	d10a      	bne.n	80042ea <__cvt+0x86>
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	4620      	mov	r0, r4
 80042da:	4639      	mov	r1, r7
 80042dc:	f7fc fb6e 	bl	80009bc <__aeabi_dcmpeq>
 80042e0:	b918      	cbnz	r0, 80042ea <__cvt+0x86>
 80042e2:	f1c5 0501 	rsb	r5, r5, #1
 80042e6:	f8ca 5000 	str.w	r5, [sl]
 80042ea:	f8da 3000 	ldr.w	r3, [sl]
 80042ee:	4499      	add	r9, r3
 80042f0:	2200      	movs	r2, #0
 80042f2:	2300      	movs	r3, #0
 80042f4:	4620      	mov	r0, r4
 80042f6:	4639      	mov	r1, r7
 80042f8:	f7fc fb60 	bl	80009bc <__aeabi_dcmpeq>
 80042fc:	b108      	cbz	r0, 8004302 <__cvt+0x9e>
 80042fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8004302:	2230      	movs	r2, #48	; 0x30
 8004304:	9b07      	ldr	r3, [sp, #28]
 8004306:	454b      	cmp	r3, r9
 8004308:	d307      	bcc.n	800431a <__cvt+0xb6>
 800430a:	4630      	mov	r0, r6
 800430c:	9b07      	ldr	r3, [sp, #28]
 800430e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004310:	1b9b      	subs	r3, r3, r6
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	b008      	add	sp, #32
 8004316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431a:	1c59      	adds	r1, r3, #1
 800431c:	9107      	str	r1, [sp, #28]
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e7f0      	b.n	8004304 <__cvt+0xa0>

08004322 <__exponent>:
 8004322:	4603      	mov	r3, r0
 8004324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004326:	2900      	cmp	r1, #0
 8004328:	f803 2b02 	strb.w	r2, [r3], #2
 800432c:	bfb6      	itet	lt
 800432e:	222d      	movlt	r2, #45	; 0x2d
 8004330:	222b      	movge	r2, #43	; 0x2b
 8004332:	4249      	neglt	r1, r1
 8004334:	2909      	cmp	r1, #9
 8004336:	7042      	strb	r2, [r0, #1]
 8004338:	dd2b      	ble.n	8004392 <__exponent+0x70>
 800433a:	f10d 0407 	add.w	r4, sp, #7
 800433e:	46a4      	mov	ip, r4
 8004340:	270a      	movs	r7, #10
 8004342:	fb91 f6f7 	sdiv	r6, r1, r7
 8004346:	460a      	mov	r2, r1
 8004348:	46a6      	mov	lr, r4
 800434a:	fb07 1516 	mls	r5, r7, r6, r1
 800434e:	2a63      	cmp	r2, #99	; 0x63
 8004350:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004354:	4631      	mov	r1, r6
 8004356:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800435a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800435e:	dcf0      	bgt.n	8004342 <__exponent+0x20>
 8004360:	3130      	adds	r1, #48	; 0x30
 8004362:	f1ae 0502 	sub.w	r5, lr, #2
 8004366:	f804 1c01 	strb.w	r1, [r4, #-1]
 800436a:	4629      	mov	r1, r5
 800436c:	1c44      	adds	r4, r0, #1
 800436e:	4561      	cmp	r1, ip
 8004370:	d30a      	bcc.n	8004388 <__exponent+0x66>
 8004372:	f10d 0209 	add.w	r2, sp, #9
 8004376:	eba2 020e 	sub.w	r2, r2, lr
 800437a:	4565      	cmp	r5, ip
 800437c:	bf88      	it	hi
 800437e:	2200      	movhi	r2, #0
 8004380:	4413      	add	r3, r2
 8004382:	1a18      	subs	r0, r3, r0
 8004384:	b003      	add	sp, #12
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004388:	f811 2b01 	ldrb.w	r2, [r1], #1
 800438c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004390:	e7ed      	b.n	800436e <__exponent+0x4c>
 8004392:	2330      	movs	r3, #48	; 0x30
 8004394:	3130      	adds	r1, #48	; 0x30
 8004396:	7083      	strb	r3, [r0, #2]
 8004398:	70c1      	strb	r1, [r0, #3]
 800439a:	1d03      	adds	r3, r0, #4
 800439c:	e7f1      	b.n	8004382 <__exponent+0x60>
	...

080043a0 <_printf_float>:
 80043a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a4:	b091      	sub	sp, #68	; 0x44
 80043a6:	460c      	mov	r4, r1
 80043a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80043ac:	4616      	mov	r6, r2
 80043ae:	461f      	mov	r7, r3
 80043b0:	4605      	mov	r5, r0
 80043b2:	f001 fa53 	bl	800585c <_localeconv_r>
 80043b6:	6803      	ldr	r3, [r0, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	9309      	str	r3, [sp, #36]	; 0x24
 80043bc:	f7fb fed2 	bl	8000164 <strlen>
 80043c0:	2300      	movs	r3, #0
 80043c2:	930e      	str	r3, [sp, #56]	; 0x38
 80043c4:	f8d8 3000 	ldr.w	r3, [r8]
 80043c8:	900a      	str	r0, [sp, #40]	; 0x28
 80043ca:	3307      	adds	r3, #7
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	f103 0208 	add.w	r2, r3, #8
 80043d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043d8:	f8d4 b000 	ldr.w	fp, [r4]
 80043dc:	f8c8 2000 	str.w	r2, [r8]
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80043ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80043f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043f6:	4640      	mov	r0, r8
 80043f8:	4b9c      	ldr	r3, [pc, #624]	; (800466c <_printf_float+0x2cc>)
 80043fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043fc:	f7fc fb10 	bl	8000a20 <__aeabi_dcmpun>
 8004400:	bb70      	cbnz	r0, 8004460 <_printf_float+0xc0>
 8004402:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004406:	4640      	mov	r0, r8
 8004408:	4b98      	ldr	r3, [pc, #608]	; (800466c <_printf_float+0x2cc>)
 800440a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800440c:	f7fc faea 	bl	80009e4 <__aeabi_dcmple>
 8004410:	bb30      	cbnz	r0, 8004460 <_printf_float+0xc0>
 8004412:	2200      	movs	r2, #0
 8004414:	2300      	movs	r3, #0
 8004416:	4640      	mov	r0, r8
 8004418:	4651      	mov	r1, sl
 800441a:	f7fc fad9 	bl	80009d0 <__aeabi_dcmplt>
 800441e:	b110      	cbz	r0, 8004426 <_printf_float+0x86>
 8004420:	232d      	movs	r3, #45	; 0x2d
 8004422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004426:	4b92      	ldr	r3, [pc, #584]	; (8004670 <_printf_float+0x2d0>)
 8004428:	4892      	ldr	r0, [pc, #584]	; (8004674 <_printf_float+0x2d4>)
 800442a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800442e:	bf94      	ite	ls
 8004430:	4698      	movls	r8, r3
 8004432:	4680      	movhi	r8, r0
 8004434:	2303      	movs	r3, #3
 8004436:	f04f 0a00 	mov.w	sl, #0
 800443a:	6123      	str	r3, [r4, #16]
 800443c:	f02b 0304 	bic.w	r3, fp, #4
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	4633      	mov	r3, r6
 8004444:	4621      	mov	r1, r4
 8004446:	4628      	mov	r0, r5
 8004448:	9700      	str	r7, [sp, #0]
 800444a:	aa0f      	add	r2, sp, #60	; 0x3c
 800444c:	f000 f9d4 	bl	80047f8 <_printf_common>
 8004450:	3001      	adds	r0, #1
 8004452:	f040 8090 	bne.w	8004576 <_printf_float+0x1d6>
 8004456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800445a:	b011      	add	sp, #68	; 0x44
 800445c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004460:	4642      	mov	r2, r8
 8004462:	4653      	mov	r3, sl
 8004464:	4640      	mov	r0, r8
 8004466:	4651      	mov	r1, sl
 8004468:	f7fc fada 	bl	8000a20 <__aeabi_dcmpun>
 800446c:	b148      	cbz	r0, 8004482 <_printf_float+0xe2>
 800446e:	f1ba 0f00 	cmp.w	sl, #0
 8004472:	bfb8      	it	lt
 8004474:	232d      	movlt	r3, #45	; 0x2d
 8004476:	4880      	ldr	r0, [pc, #512]	; (8004678 <_printf_float+0x2d8>)
 8004478:	bfb8      	it	lt
 800447a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800447e:	4b7f      	ldr	r3, [pc, #508]	; (800467c <_printf_float+0x2dc>)
 8004480:	e7d3      	b.n	800442a <_printf_float+0x8a>
 8004482:	6863      	ldr	r3, [r4, #4]
 8004484:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	d142      	bne.n	8004512 <_printf_float+0x172>
 800448c:	2306      	movs	r3, #6
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	9206      	str	r2, [sp, #24]
 8004494:	aa0e      	add	r2, sp, #56	; 0x38
 8004496:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800449a:	aa0d      	add	r2, sp, #52	; 0x34
 800449c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80044a0:	9203      	str	r2, [sp, #12]
 80044a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80044a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	6863      	ldr	r3, [r4, #4]
 80044ae:	4642      	mov	r2, r8
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4628      	mov	r0, r5
 80044b4:	4653      	mov	r3, sl
 80044b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80044b8:	f7ff fed4 	bl	8004264 <__cvt>
 80044bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044be:	4680      	mov	r8, r0
 80044c0:	2947      	cmp	r1, #71	; 0x47
 80044c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044c4:	d108      	bne.n	80044d8 <_printf_float+0x138>
 80044c6:	1cc8      	adds	r0, r1, #3
 80044c8:	db02      	blt.n	80044d0 <_printf_float+0x130>
 80044ca:	6863      	ldr	r3, [r4, #4]
 80044cc:	4299      	cmp	r1, r3
 80044ce:	dd40      	ble.n	8004552 <_printf_float+0x1b2>
 80044d0:	f1a9 0902 	sub.w	r9, r9, #2
 80044d4:	fa5f f989 	uxtb.w	r9, r9
 80044d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044dc:	d81f      	bhi.n	800451e <_printf_float+0x17e>
 80044de:	464a      	mov	r2, r9
 80044e0:	3901      	subs	r1, #1
 80044e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044e6:	910d      	str	r1, [sp, #52]	; 0x34
 80044e8:	f7ff ff1b 	bl	8004322 <__exponent>
 80044ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044ee:	4682      	mov	sl, r0
 80044f0:	1813      	adds	r3, r2, r0
 80044f2:	2a01      	cmp	r2, #1
 80044f4:	6123      	str	r3, [r4, #16]
 80044f6:	dc02      	bgt.n	80044fe <_printf_float+0x15e>
 80044f8:	6822      	ldr	r2, [r4, #0]
 80044fa:	07d2      	lsls	r2, r2, #31
 80044fc:	d501      	bpl.n	8004502 <_printf_float+0x162>
 80044fe:	3301      	adds	r3, #1
 8004500:	6123      	str	r3, [r4, #16]
 8004502:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004506:	2b00      	cmp	r3, #0
 8004508:	d09b      	beq.n	8004442 <_printf_float+0xa2>
 800450a:	232d      	movs	r3, #45	; 0x2d
 800450c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004510:	e797      	b.n	8004442 <_printf_float+0xa2>
 8004512:	2947      	cmp	r1, #71	; 0x47
 8004514:	d1bc      	bne.n	8004490 <_printf_float+0xf0>
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1ba      	bne.n	8004490 <_printf_float+0xf0>
 800451a:	2301      	movs	r3, #1
 800451c:	e7b7      	b.n	800448e <_printf_float+0xee>
 800451e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004522:	d118      	bne.n	8004556 <_printf_float+0x1b6>
 8004524:	2900      	cmp	r1, #0
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	dd0b      	ble.n	8004542 <_printf_float+0x1a2>
 800452a:	6121      	str	r1, [r4, #16]
 800452c:	b913      	cbnz	r3, 8004534 <_printf_float+0x194>
 800452e:	6822      	ldr	r2, [r4, #0]
 8004530:	07d0      	lsls	r0, r2, #31
 8004532:	d502      	bpl.n	800453a <_printf_float+0x19a>
 8004534:	3301      	adds	r3, #1
 8004536:	440b      	add	r3, r1
 8004538:	6123      	str	r3, [r4, #16]
 800453a:	f04f 0a00 	mov.w	sl, #0
 800453e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004540:	e7df      	b.n	8004502 <_printf_float+0x162>
 8004542:	b913      	cbnz	r3, 800454a <_printf_float+0x1aa>
 8004544:	6822      	ldr	r2, [r4, #0]
 8004546:	07d2      	lsls	r2, r2, #31
 8004548:	d501      	bpl.n	800454e <_printf_float+0x1ae>
 800454a:	3302      	adds	r3, #2
 800454c:	e7f4      	b.n	8004538 <_printf_float+0x198>
 800454e:	2301      	movs	r3, #1
 8004550:	e7f2      	b.n	8004538 <_printf_float+0x198>
 8004552:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004556:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004558:	4299      	cmp	r1, r3
 800455a:	db05      	blt.n	8004568 <_printf_float+0x1c8>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	6121      	str	r1, [r4, #16]
 8004560:	07d8      	lsls	r0, r3, #31
 8004562:	d5ea      	bpl.n	800453a <_printf_float+0x19a>
 8004564:	1c4b      	adds	r3, r1, #1
 8004566:	e7e7      	b.n	8004538 <_printf_float+0x198>
 8004568:	2900      	cmp	r1, #0
 800456a:	bfcc      	ite	gt
 800456c:	2201      	movgt	r2, #1
 800456e:	f1c1 0202 	rsble	r2, r1, #2
 8004572:	4413      	add	r3, r2
 8004574:	e7e0      	b.n	8004538 <_printf_float+0x198>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	055a      	lsls	r2, r3, #21
 800457a:	d407      	bmi.n	800458c <_printf_float+0x1ec>
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	4642      	mov	r2, r8
 8004580:	4631      	mov	r1, r6
 8004582:	4628      	mov	r0, r5
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	d12b      	bne.n	80045e2 <_printf_float+0x242>
 800458a:	e764      	b.n	8004456 <_printf_float+0xb6>
 800458c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004590:	f240 80dd 	bls.w	800474e <_printf_float+0x3ae>
 8004594:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004598:	2200      	movs	r2, #0
 800459a:	2300      	movs	r3, #0
 800459c:	f7fc fa0e 	bl	80009bc <__aeabi_dcmpeq>
 80045a0:	2800      	cmp	r0, #0
 80045a2:	d033      	beq.n	800460c <_printf_float+0x26c>
 80045a4:	2301      	movs	r3, #1
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	4a35      	ldr	r2, [pc, #212]	; (8004680 <_printf_float+0x2e0>)
 80045ac:	47b8      	blx	r7
 80045ae:	3001      	adds	r0, #1
 80045b0:	f43f af51 	beq.w	8004456 <_printf_float+0xb6>
 80045b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045b8:	429a      	cmp	r2, r3
 80045ba:	db02      	blt.n	80045c2 <_printf_float+0x222>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	07d8      	lsls	r0, r3, #31
 80045c0:	d50f      	bpl.n	80045e2 <_printf_float+0x242>
 80045c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	f43f af42 	beq.w	8004456 <_printf_float+0xb6>
 80045d2:	f04f 0800 	mov.w	r8, #0
 80045d6:	f104 091a 	add.w	r9, r4, #26
 80045da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045dc:	3b01      	subs	r3, #1
 80045de:	4543      	cmp	r3, r8
 80045e0:	dc09      	bgt.n	80045f6 <_printf_float+0x256>
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	079b      	lsls	r3, r3, #30
 80045e6:	f100 8102 	bmi.w	80047ee <_printf_float+0x44e>
 80045ea:	68e0      	ldr	r0, [r4, #12]
 80045ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80045ee:	4298      	cmp	r0, r3
 80045f0:	bfb8      	it	lt
 80045f2:	4618      	movlt	r0, r3
 80045f4:	e731      	b.n	800445a <_printf_float+0xba>
 80045f6:	2301      	movs	r3, #1
 80045f8:	464a      	mov	r2, r9
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	f43f af28 	beq.w	8004456 <_printf_float+0xb6>
 8004606:	f108 0801 	add.w	r8, r8, #1
 800460a:	e7e6      	b.n	80045da <_printf_float+0x23a>
 800460c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800460e:	2b00      	cmp	r3, #0
 8004610:	dc38      	bgt.n	8004684 <_printf_float+0x2e4>
 8004612:	2301      	movs	r3, #1
 8004614:	4631      	mov	r1, r6
 8004616:	4628      	mov	r0, r5
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <_printf_float+0x2e0>)
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	f43f af1a 	beq.w	8004456 <_printf_float+0xb6>
 8004622:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004626:	4313      	orrs	r3, r2
 8004628:	d102      	bne.n	8004630 <_printf_float+0x290>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	07d9      	lsls	r1, r3, #31
 800462e:	d5d8      	bpl.n	80045e2 <_printf_float+0x242>
 8004630:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	f43f af0b 	beq.w	8004456 <_printf_float+0xb6>
 8004640:	f04f 0900 	mov.w	r9, #0
 8004644:	f104 0a1a 	add.w	sl, r4, #26
 8004648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800464a:	425b      	negs	r3, r3
 800464c:	454b      	cmp	r3, r9
 800464e:	dc01      	bgt.n	8004654 <_printf_float+0x2b4>
 8004650:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004652:	e794      	b.n	800457e <_printf_float+0x1de>
 8004654:	2301      	movs	r3, #1
 8004656:	4652      	mov	r2, sl
 8004658:	4631      	mov	r1, r6
 800465a:	4628      	mov	r0, r5
 800465c:	47b8      	blx	r7
 800465e:	3001      	adds	r0, #1
 8004660:	f43f aef9 	beq.w	8004456 <_printf_float+0xb6>
 8004664:	f109 0901 	add.w	r9, r9, #1
 8004668:	e7ee      	b.n	8004648 <_printf_float+0x2a8>
 800466a:	bf00      	nop
 800466c:	7fefffff 	.word	0x7fefffff
 8004670:	080072b8 	.word	0x080072b8
 8004674:	080072bc 	.word	0x080072bc
 8004678:	080072c4 	.word	0x080072c4
 800467c:	080072c0 	.word	0x080072c0
 8004680:	080072c8 	.word	0x080072c8
 8004684:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004688:	429a      	cmp	r2, r3
 800468a:	bfa8      	it	ge
 800468c:	461a      	movge	r2, r3
 800468e:	2a00      	cmp	r2, #0
 8004690:	4691      	mov	r9, r2
 8004692:	dc37      	bgt.n	8004704 <_printf_float+0x364>
 8004694:	f04f 0b00 	mov.w	fp, #0
 8004698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800469c:	f104 021a 	add.w	r2, r4, #26
 80046a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046a4:	ebaa 0309 	sub.w	r3, sl, r9
 80046a8:	455b      	cmp	r3, fp
 80046aa:	dc33      	bgt.n	8004714 <_printf_float+0x374>
 80046ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046b0:	429a      	cmp	r2, r3
 80046b2:	db3b      	blt.n	800472c <_printf_float+0x38c>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	07da      	lsls	r2, r3, #31
 80046b8:	d438      	bmi.n	800472c <_printf_float+0x38c>
 80046ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046be:	eba3 020a 	sub.w	r2, r3, sl
 80046c2:	eba3 0901 	sub.w	r9, r3, r1
 80046c6:	4591      	cmp	r9, r2
 80046c8:	bfa8      	it	ge
 80046ca:	4691      	movge	r9, r2
 80046cc:	f1b9 0f00 	cmp.w	r9, #0
 80046d0:	dc34      	bgt.n	800473c <_printf_float+0x39c>
 80046d2:	f04f 0800 	mov.w	r8, #0
 80046d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046da:	f104 0a1a 	add.w	sl, r4, #26
 80046de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	eba3 0309 	sub.w	r3, r3, r9
 80046e8:	4543      	cmp	r3, r8
 80046ea:	f77f af7a 	ble.w	80045e2 <_printf_float+0x242>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4652      	mov	r2, sl
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	f43f aeac 	beq.w	8004456 <_printf_float+0xb6>
 80046fe:	f108 0801 	add.w	r8, r8, #1
 8004702:	e7ec      	b.n	80046de <_printf_float+0x33e>
 8004704:	4613      	mov	r3, r2
 8004706:	4631      	mov	r1, r6
 8004708:	4642      	mov	r2, r8
 800470a:	4628      	mov	r0, r5
 800470c:	47b8      	blx	r7
 800470e:	3001      	adds	r0, #1
 8004710:	d1c0      	bne.n	8004694 <_printf_float+0x2f4>
 8004712:	e6a0      	b.n	8004456 <_printf_float+0xb6>
 8004714:	2301      	movs	r3, #1
 8004716:	4631      	mov	r1, r6
 8004718:	4628      	mov	r0, r5
 800471a:	920b      	str	r2, [sp, #44]	; 0x2c
 800471c:	47b8      	blx	r7
 800471e:	3001      	adds	r0, #1
 8004720:	f43f ae99 	beq.w	8004456 <_printf_float+0xb6>
 8004724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004726:	f10b 0b01 	add.w	fp, fp, #1
 800472a:	e7b9      	b.n	80046a0 <_printf_float+0x300>
 800472c:	4631      	mov	r1, r6
 800472e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004732:	4628      	mov	r0, r5
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	d1bf      	bne.n	80046ba <_printf_float+0x31a>
 800473a:	e68c      	b.n	8004456 <_printf_float+0xb6>
 800473c:	464b      	mov	r3, r9
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	eb08 020a 	add.w	r2, r8, sl
 8004746:	47b8      	blx	r7
 8004748:	3001      	adds	r0, #1
 800474a:	d1c2      	bne.n	80046d2 <_printf_float+0x332>
 800474c:	e683      	b.n	8004456 <_printf_float+0xb6>
 800474e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004750:	2a01      	cmp	r2, #1
 8004752:	dc01      	bgt.n	8004758 <_printf_float+0x3b8>
 8004754:	07db      	lsls	r3, r3, #31
 8004756:	d537      	bpl.n	80047c8 <_printf_float+0x428>
 8004758:	2301      	movs	r3, #1
 800475a:	4642      	mov	r2, r8
 800475c:	4631      	mov	r1, r6
 800475e:	4628      	mov	r0, r5
 8004760:	47b8      	blx	r7
 8004762:	3001      	adds	r0, #1
 8004764:	f43f ae77 	beq.w	8004456 <_printf_float+0xb6>
 8004768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f ae6f 	beq.w	8004456 <_printf_float+0xb6>
 8004778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800477c:	2200      	movs	r2, #0
 800477e:	2300      	movs	r3, #0
 8004780:	f7fc f91c 	bl	80009bc <__aeabi_dcmpeq>
 8004784:	b9d8      	cbnz	r0, 80047be <_printf_float+0x41e>
 8004786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004788:	f108 0201 	add.w	r2, r8, #1
 800478c:	3b01      	subs	r3, #1
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	d10e      	bne.n	80047b6 <_printf_float+0x416>
 8004798:	e65d      	b.n	8004456 <_printf_float+0xb6>
 800479a:	2301      	movs	r3, #1
 800479c:	464a      	mov	r2, r9
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	f43f ae56 	beq.w	8004456 <_printf_float+0xb6>
 80047aa:	f108 0801 	add.w	r8, r8, #1
 80047ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047b0:	3b01      	subs	r3, #1
 80047b2:	4543      	cmp	r3, r8
 80047b4:	dcf1      	bgt.n	800479a <_printf_float+0x3fa>
 80047b6:	4653      	mov	r3, sl
 80047b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047bc:	e6e0      	b.n	8004580 <_printf_float+0x1e0>
 80047be:	f04f 0800 	mov.w	r8, #0
 80047c2:	f104 091a 	add.w	r9, r4, #26
 80047c6:	e7f2      	b.n	80047ae <_printf_float+0x40e>
 80047c8:	2301      	movs	r3, #1
 80047ca:	4642      	mov	r2, r8
 80047cc:	e7df      	b.n	800478e <_printf_float+0x3ee>
 80047ce:	2301      	movs	r3, #1
 80047d0:	464a      	mov	r2, r9
 80047d2:	4631      	mov	r1, r6
 80047d4:	4628      	mov	r0, r5
 80047d6:	47b8      	blx	r7
 80047d8:	3001      	adds	r0, #1
 80047da:	f43f ae3c 	beq.w	8004456 <_printf_float+0xb6>
 80047de:	f108 0801 	add.w	r8, r8, #1
 80047e2:	68e3      	ldr	r3, [r4, #12]
 80047e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047e6:	1a5b      	subs	r3, r3, r1
 80047e8:	4543      	cmp	r3, r8
 80047ea:	dcf0      	bgt.n	80047ce <_printf_float+0x42e>
 80047ec:	e6fd      	b.n	80045ea <_printf_float+0x24a>
 80047ee:	f04f 0800 	mov.w	r8, #0
 80047f2:	f104 0919 	add.w	r9, r4, #25
 80047f6:	e7f4      	b.n	80047e2 <_printf_float+0x442>

080047f8 <_printf_common>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	4616      	mov	r6, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	688a      	ldr	r2, [r1, #8]
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	4607      	mov	r7, r0
 8004806:	4293      	cmp	r3, r2
 8004808:	bfb8      	it	lt
 800480a:	4613      	movlt	r3, r2
 800480c:	6033      	str	r3, [r6, #0]
 800480e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004812:	460c      	mov	r4, r1
 8004814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004818:	b10a      	cbz	r2, 800481e <_printf_common+0x26>
 800481a:	3301      	adds	r3, #1
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	0699      	lsls	r1, r3, #26
 8004822:	bf42      	ittt	mi
 8004824:	6833      	ldrmi	r3, [r6, #0]
 8004826:	3302      	addmi	r3, #2
 8004828:	6033      	strmi	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	f015 0506 	ands.w	r5, r5, #6
 8004830:	d106      	bne.n	8004840 <_printf_common+0x48>
 8004832:	f104 0a19 	add.w	sl, r4, #25
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	6832      	ldr	r2, [r6, #0]
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	42ab      	cmp	r3, r5
 800483e:	dc28      	bgt.n	8004892 <_printf_common+0x9a>
 8004840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004844:	1e13      	subs	r3, r2, #0
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	bf18      	it	ne
 800484a:	2301      	movne	r3, #1
 800484c:	0692      	lsls	r2, r2, #26
 800484e:	d42d      	bmi.n	80048ac <_printf_common+0xb4>
 8004850:	4649      	mov	r1, r9
 8004852:	4638      	mov	r0, r7
 8004854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d020      	beq.n	80048a0 <_printf_common+0xa8>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	68e5      	ldr	r5, [r4, #12]
 8004862:	f003 0306 	and.w	r3, r3, #6
 8004866:	2b04      	cmp	r3, #4
 8004868:	bf18      	it	ne
 800486a:	2500      	movne	r5, #0
 800486c:	6832      	ldr	r2, [r6, #0]
 800486e:	f04f 0600 	mov.w	r6, #0
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	bf08      	it	eq
 8004876:	1aad      	subeq	r5, r5, r2
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	bf08      	it	eq
 800487c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004880:	4293      	cmp	r3, r2
 8004882:	bfc4      	itt	gt
 8004884:	1a9b      	subgt	r3, r3, r2
 8004886:	18ed      	addgt	r5, r5, r3
 8004888:	341a      	adds	r4, #26
 800488a:	42b5      	cmp	r5, r6
 800488c:	d11a      	bne.n	80048c4 <_printf_common+0xcc>
 800488e:	2000      	movs	r0, #0
 8004890:	e008      	b.n	80048a4 <_printf_common+0xac>
 8004892:	2301      	movs	r3, #1
 8004894:	4652      	mov	r2, sl
 8004896:	4649      	mov	r1, r9
 8004898:	4638      	mov	r0, r7
 800489a:	47c0      	blx	r8
 800489c:	3001      	adds	r0, #1
 800489e:	d103      	bne.n	80048a8 <_printf_common+0xb0>
 80048a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a8:	3501      	adds	r5, #1
 80048aa:	e7c4      	b.n	8004836 <_printf_common+0x3e>
 80048ac:	2030      	movs	r0, #48	; 0x30
 80048ae:	18e1      	adds	r1, r4, r3
 80048b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048ba:	4422      	add	r2, r4
 80048bc:	3302      	adds	r3, #2
 80048be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048c2:	e7c5      	b.n	8004850 <_printf_common+0x58>
 80048c4:	2301      	movs	r3, #1
 80048c6:	4622      	mov	r2, r4
 80048c8:	4649      	mov	r1, r9
 80048ca:	4638      	mov	r0, r7
 80048cc:	47c0      	blx	r8
 80048ce:	3001      	adds	r0, #1
 80048d0:	d0e6      	beq.n	80048a0 <_printf_common+0xa8>
 80048d2:	3601      	adds	r6, #1
 80048d4:	e7d9      	b.n	800488a <_printf_common+0x92>
	...

080048d8 <_printf_i>:
 80048d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	7e0f      	ldrb	r7, [r1, #24]
 80048de:	4691      	mov	r9, r2
 80048e0:	2f78      	cmp	r7, #120	; 0x78
 80048e2:	4680      	mov	r8, r0
 80048e4:	460c      	mov	r4, r1
 80048e6:	469a      	mov	sl, r3
 80048e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ee:	d807      	bhi.n	8004900 <_printf_i+0x28>
 80048f0:	2f62      	cmp	r7, #98	; 0x62
 80048f2:	d80a      	bhi.n	800490a <_printf_i+0x32>
 80048f4:	2f00      	cmp	r7, #0
 80048f6:	f000 80d9 	beq.w	8004aac <_printf_i+0x1d4>
 80048fa:	2f58      	cmp	r7, #88	; 0x58
 80048fc:	f000 80a4 	beq.w	8004a48 <_printf_i+0x170>
 8004900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004908:	e03a      	b.n	8004980 <_printf_i+0xa8>
 800490a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490e:	2b15      	cmp	r3, #21
 8004910:	d8f6      	bhi.n	8004900 <_printf_i+0x28>
 8004912:	a101      	add	r1, pc, #4	; (adr r1, 8004918 <_printf_i+0x40>)
 8004914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004918:	08004971 	.word	0x08004971
 800491c:	08004985 	.word	0x08004985
 8004920:	08004901 	.word	0x08004901
 8004924:	08004901 	.word	0x08004901
 8004928:	08004901 	.word	0x08004901
 800492c:	08004901 	.word	0x08004901
 8004930:	08004985 	.word	0x08004985
 8004934:	08004901 	.word	0x08004901
 8004938:	08004901 	.word	0x08004901
 800493c:	08004901 	.word	0x08004901
 8004940:	08004901 	.word	0x08004901
 8004944:	08004a93 	.word	0x08004a93
 8004948:	080049b5 	.word	0x080049b5
 800494c:	08004a75 	.word	0x08004a75
 8004950:	08004901 	.word	0x08004901
 8004954:	08004901 	.word	0x08004901
 8004958:	08004ab5 	.word	0x08004ab5
 800495c:	08004901 	.word	0x08004901
 8004960:	080049b5 	.word	0x080049b5
 8004964:	08004901 	.word	0x08004901
 8004968:	08004901 	.word	0x08004901
 800496c:	08004a7d 	.word	0x08004a7d
 8004970:	682b      	ldr	r3, [r5, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	602a      	str	r2, [r5, #0]
 8004978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800497c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004980:	2301      	movs	r3, #1
 8004982:	e0a4      	b.n	8004ace <_printf_i+0x1f6>
 8004984:	6820      	ldr	r0, [r4, #0]
 8004986:	6829      	ldr	r1, [r5, #0]
 8004988:	0606      	lsls	r6, r0, #24
 800498a:	f101 0304 	add.w	r3, r1, #4
 800498e:	d50a      	bpl.n	80049a6 <_printf_i+0xce>
 8004990:	680e      	ldr	r6, [r1, #0]
 8004992:	602b      	str	r3, [r5, #0]
 8004994:	2e00      	cmp	r6, #0
 8004996:	da03      	bge.n	80049a0 <_printf_i+0xc8>
 8004998:	232d      	movs	r3, #45	; 0x2d
 800499a:	4276      	negs	r6, r6
 800499c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a0:	230a      	movs	r3, #10
 80049a2:	485e      	ldr	r0, [pc, #376]	; (8004b1c <_printf_i+0x244>)
 80049a4:	e019      	b.n	80049da <_printf_i+0x102>
 80049a6:	680e      	ldr	r6, [r1, #0]
 80049a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049ac:	602b      	str	r3, [r5, #0]
 80049ae:	bf18      	it	ne
 80049b0:	b236      	sxthne	r6, r6
 80049b2:	e7ef      	b.n	8004994 <_printf_i+0xbc>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	6820      	ldr	r0, [r4, #0]
 80049b8:	1d19      	adds	r1, r3, #4
 80049ba:	6029      	str	r1, [r5, #0]
 80049bc:	0601      	lsls	r1, r0, #24
 80049be:	d501      	bpl.n	80049c4 <_printf_i+0xec>
 80049c0:	681e      	ldr	r6, [r3, #0]
 80049c2:	e002      	b.n	80049ca <_printf_i+0xf2>
 80049c4:	0646      	lsls	r6, r0, #25
 80049c6:	d5fb      	bpl.n	80049c0 <_printf_i+0xe8>
 80049c8:	881e      	ldrh	r6, [r3, #0]
 80049ca:	2f6f      	cmp	r7, #111	; 0x6f
 80049cc:	bf0c      	ite	eq
 80049ce:	2308      	moveq	r3, #8
 80049d0:	230a      	movne	r3, #10
 80049d2:	4852      	ldr	r0, [pc, #328]	; (8004b1c <_printf_i+0x244>)
 80049d4:	2100      	movs	r1, #0
 80049d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049da:	6865      	ldr	r5, [r4, #4]
 80049dc:	2d00      	cmp	r5, #0
 80049de:	bfa8      	it	ge
 80049e0:	6821      	ldrge	r1, [r4, #0]
 80049e2:	60a5      	str	r5, [r4, #8]
 80049e4:	bfa4      	itt	ge
 80049e6:	f021 0104 	bicge.w	r1, r1, #4
 80049ea:	6021      	strge	r1, [r4, #0]
 80049ec:	b90e      	cbnz	r6, 80049f2 <_printf_i+0x11a>
 80049ee:	2d00      	cmp	r5, #0
 80049f0:	d04d      	beq.n	8004a8e <_printf_i+0x1b6>
 80049f2:	4615      	mov	r5, r2
 80049f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80049f8:	fb03 6711 	mls	r7, r3, r1, r6
 80049fc:	5dc7      	ldrb	r7, [r0, r7]
 80049fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a02:	4637      	mov	r7, r6
 8004a04:	42bb      	cmp	r3, r7
 8004a06:	460e      	mov	r6, r1
 8004a08:	d9f4      	bls.n	80049f4 <_printf_i+0x11c>
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d10b      	bne.n	8004a26 <_printf_i+0x14e>
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	07de      	lsls	r6, r3, #31
 8004a12:	d508      	bpl.n	8004a26 <_printf_i+0x14e>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	6861      	ldr	r1, [r4, #4]
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	bfde      	ittt	le
 8004a1c:	2330      	movle	r3, #48	; 0x30
 8004a1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a22:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a26:	1b52      	subs	r2, r2, r5
 8004a28:	6122      	str	r2, [r4, #16]
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	aa03      	add	r2, sp, #12
 8004a36:	f7ff fedf 	bl	80047f8 <_printf_common>
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	d14c      	bne.n	8004ad8 <_printf_i+0x200>
 8004a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a42:	b004      	add	sp, #16
 8004a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a48:	4834      	ldr	r0, [pc, #208]	; (8004b1c <_printf_i+0x244>)
 8004a4a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a4e:	6829      	ldr	r1, [r5, #0]
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a56:	6029      	str	r1, [r5, #0]
 8004a58:	061d      	lsls	r5, r3, #24
 8004a5a:	d514      	bpl.n	8004a86 <_printf_i+0x1ae>
 8004a5c:	07df      	lsls	r7, r3, #31
 8004a5e:	bf44      	itt	mi
 8004a60:	f043 0320 	orrmi.w	r3, r3, #32
 8004a64:	6023      	strmi	r3, [r4, #0]
 8004a66:	b91e      	cbnz	r6, 8004a70 <_printf_i+0x198>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f023 0320 	bic.w	r3, r3, #32
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	2310      	movs	r3, #16
 8004a72:	e7af      	b.n	80049d4 <_printf_i+0xfc>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	f043 0320 	orr.w	r3, r3, #32
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	2378      	movs	r3, #120	; 0x78
 8004a7e:	4828      	ldr	r0, [pc, #160]	; (8004b20 <_printf_i+0x248>)
 8004a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a84:	e7e3      	b.n	8004a4e <_printf_i+0x176>
 8004a86:	0659      	lsls	r1, r3, #25
 8004a88:	bf48      	it	mi
 8004a8a:	b2b6      	uxthmi	r6, r6
 8004a8c:	e7e6      	b.n	8004a5c <_printf_i+0x184>
 8004a8e:	4615      	mov	r5, r2
 8004a90:	e7bb      	b.n	8004a0a <_printf_i+0x132>
 8004a92:	682b      	ldr	r3, [r5, #0]
 8004a94:	6826      	ldr	r6, [r4, #0]
 8004a96:	1d18      	adds	r0, r3, #4
 8004a98:	6961      	ldr	r1, [r4, #20]
 8004a9a:	6028      	str	r0, [r5, #0]
 8004a9c:	0635      	lsls	r5, r6, #24
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	d501      	bpl.n	8004aa6 <_printf_i+0x1ce>
 8004aa2:	6019      	str	r1, [r3, #0]
 8004aa4:	e002      	b.n	8004aac <_printf_i+0x1d4>
 8004aa6:	0670      	lsls	r0, r6, #25
 8004aa8:	d5fb      	bpl.n	8004aa2 <_printf_i+0x1ca>
 8004aaa:	8019      	strh	r1, [r3, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	4615      	mov	r5, r2
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	e7ba      	b.n	8004a2a <_printf_i+0x152>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	602a      	str	r2, [r5, #0]
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	f000 fed7 	bl	8005874 <memchr>
 8004ac6:	b108      	cbz	r0, 8004acc <_printf_i+0x1f4>
 8004ac8:	1b40      	subs	r0, r0, r5
 8004aca:	6060      	str	r0, [r4, #4]
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad6:	e7a8      	b.n	8004a2a <_printf_i+0x152>
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4649      	mov	r1, r9
 8004adc:	4640      	mov	r0, r8
 8004ade:	6923      	ldr	r3, [r4, #16]
 8004ae0:	47d0      	blx	sl
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	d0ab      	beq.n	8004a3e <_printf_i+0x166>
 8004ae6:	6823      	ldr	r3, [r4, #0]
 8004ae8:	079b      	lsls	r3, r3, #30
 8004aea:	d413      	bmi.n	8004b14 <_printf_i+0x23c>
 8004aec:	68e0      	ldr	r0, [r4, #12]
 8004aee:	9b03      	ldr	r3, [sp, #12]
 8004af0:	4298      	cmp	r0, r3
 8004af2:	bfb8      	it	lt
 8004af4:	4618      	movlt	r0, r3
 8004af6:	e7a4      	b.n	8004a42 <_printf_i+0x16a>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4632      	mov	r2, r6
 8004afc:	4649      	mov	r1, r9
 8004afe:	4640      	mov	r0, r8
 8004b00:	47d0      	blx	sl
 8004b02:	3001      	adds	r0, #1
 8004b04:	d09b      	beq.n	8004a3e <_printf_i+0x166>
 8004b06:	3501      	adds	r5, #1
 8004b08:	68e3      	ldr	r3, [r4, #12]
 8004b0a:	9903      	ldr	r1, [sp, #12]
 8004b0c:	1a5b      	subs	r3, r3, r1
 8004b0e:	42ab      	cmp	r3, r5
 8004b10:	dcf2      	bgt.n	8004af8 <_printf_i+0x220>
 8004b12:	e7eb      	b.n	8004aec <_printf_i+0x214>
 8004b14:	2500      	movs	r5, #0
 8004b16:	f104 0619 	add.w	r6, r4, #25
 8004b1a:	e7f5      	b.n	8004b08 <_printf_i+0x230>
 8004b1c:	080072ca 	.word	0x080072ca
 8004b20:	080072db 	.word	0x080072db

08004b24 <siprintf>:
 8004b24:	b40e      	push	{r1, r2, r3}
 8004b26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b2a:	b500      	push	{lr}
 8004b2c:	b09c      	sub	sp, #112	; 0x70
 8004b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b30:	9002      	str	r0, [sp, #8]
 8004b32:	9006      	str	r0, [sp, #24]
 8004b34:	9107      	str	r1, [sp, #28]
 8004b36:	9104      	str	r1, [sp, #16]
 8004b38:	4808      	ldr	r0, [pc, #32]	; (8004b5c <siprintf+0x38>)
 8004b3a:	4909      	ldr	r1, [pc, #36]	; (8004b60 <siprintf+0x3c>)
 8004b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b40:	9105      	str	r1, [sp, #20]
 8004b42:	6800      	ldr	r0, [r0, #0]
 8004b44:	a902      	add	r1, sp, #8
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	f001 fb70 	bl	800622c <_svfiprintf_r>
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	9b02      	ldr	r3, [sp, #8]
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	b01c      	add	sp, #112	; 0x70
 8004b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b58:	b003      	add	sp, #12
 8004b5a:	4770      	bx	lr
 8004b5c:	2000004c 	.word	0x2000004c
 8004b60:	ffff0208 	.word	0xffff0208

08004b64 <quorem>:
 8004b64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b68:	6903      	ldr	r3, [r0, #16]
 8004b6a:	690c      	ldr	r4, [r1, #16]
 8004b6c:	4607      	mov	r7, r0
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	f2c0 8082 	blt.w	8004c78 <quorem+0x114>
 8004b74:	3c01      	subs	r4, #1
 8004b76:	f100 0514 	add.w	r5, r0, #20
 8004b7a:	f101 0814 	add.w	r8, r1, #20
 8004b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b82:	9301      	str	r3, [sp, #4]
 8004b84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b9c:	d331      	bcc.n	8004c02 <quorem+0x9e>
 8004b9e:	f04f 0e00 	mov.w	lr, #0
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	46ac      	mov	ip, r5
 8004ba6:	46f2      	mov	sl, lr
 8004ba8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bac:	b293      	uxth	r3, r2
 8004bae:	fb06 e303 	mla	r3, r6, r3, lr
 8004bb2:	0c12      	lsrs	r2, r2, #16
 8004bb4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	fb06 e202 	mla	r2, r6, r2, lr
 8004bbe:	ebaa 0303 	sub.w	r3, sl, r3
 8004bc2:	f8dc a000 	ldr.w	sl, [ip]
 8004bc6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bca:	fa1f fa8a 	uxth.w	sl, sl
 8004bce:	4453      	add	r3, sl
 8004bd0:	f8dc a000 	ldr.w	sl, [ip]
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004be4:	4581      	cmp	r9, r0
 8004be6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bea:	f84c 3b04 	str.w	r3, [ip], #4
 8004bee:	d2db      	bcs.n	8004ba8 <quorem+0x44>
 8004bf0:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bf4:	b92b      	cbnz	r3, 8004c02 <quorem+0x9e>
 8004bf6:	9b01      	ldr	r3, [sp, #4]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	429d      	cmp	r5, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	d32f      	bcc.n	8004c60 <quorem+0xfc>
 8004c00:	613c      	str	r4, [r7, #16]
 8004c02:	4638      	mov	r0, r7
 8004c04:	f001 f8c2 	bl	8005d8c <__mcmp>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	db25      	blt.n	8004c58 <quorem+0xf4>
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	f04f 0c00 	mov.w	ip, #0
 8004c12:	3601      	adds	r6, #1
 8004c14:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c18:	f8d0 e000 	ldr.w	lr, [r0]
 8004c1c:	b28b      	uxth	r3, r1
 8004c1e:	ebac 0303 	sub.w	r3, ip, r3
 8004c22:	fa1f f28e 	uxth.w	r2, lr
 8004c26:	4413      	add	r3, r2
 8004c28:	0c0a      	lsrs	r2, r1, #16
 8004c2a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c2e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c38:	45c1      	cmp	r9, r8
 8004c3a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c3e:	f840 3b04 	str.w	r3, [r0], #4
 8004c42:	d2e7      	bcs.n	8004c14 <quorem+0xb0>
 8004c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c4c:	b922      	cbnz	r2, 8004c58 <quorem+0xf4>
 8004c4e:	3b04      	subs	r3, #4
 8004c50:	429d      	cmp	r5, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	d30a      	bcc.n	8004c6c <quorem+0x108>
 8004c56:	613c      	str	r4, [r7, #16]
 8004c58:	4630      	mov	r0, r6
 8004c5a:	b003      	add	sp, #12
 8004c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	3b04      	subs	r3, #4
 8004c64:	2a00      	cmp	r2, #0
 8004c66:	d1cb      	bne.n	8004c00 <quorem+0x9c>
 8004c68:	3c01      	subs	r4, #1
 8004c6a:	e7c6      	b.n	8004bfa <quorem+0x96>
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	3b04      	subs	r3, #4
 8004c70:	2a00      	cmp	r2, #0
 8004c72:	d1f0      	bne.n	8004c56 <quorem+0xf2>
 8004c74:	3c01      	subs	r4, #1
 8004c76:	e7eb      	b.n	8004c50 <quorem+0xec>
 8004c78:	2000      	movs	r0, #0
 8004c7a:	e7ee      	b.n	8004c5a <quorem+0xf6>
 8004c7c:	0000      	movs	r0, r0
	...

08004c80 <_dtoa_r>:
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	4616      	mov	r6, r2
 8004c86:	461f      	mov	r7, r3
 8004c88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c8a:	b099      	sub	sp, #100	; 0x64
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c96:	b974      	cbnz	r4, 8004cb6 <_dtoa_r+0x36>
 8004c98:	2010      	movs	r0, #16
 8004c9a:	f000 fde3 	bl	8005864 <malloc>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ca2:	b920      	cbnz	r0, 8004cae <_dtoa_r+0x2e>
 8004ca4:	21ea      	movs	r1, #234	; 0xea
 8004ca6:	4ba8      	ldr	r3, [pc, #672]	; (8004f48 <_dtoa_r+0x2c8>)
 8004ca8:	48a8      	ldr	r0, [pc, #672]	; (8004f4c <_dtoa_r+0x2cc>)
 8004caa:	f001 fbcf 	bl	800644c <__assert_func>
 8004cae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cb2:	6004      	str	r4, [r0, #0]
 8004cb4:	60c4      	str	r4, [r0, #12]
 8004cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cb8:	6819      	ldr	r1, [r3, #0]
 8004cba:	b151      	cbz	r1, 8004cd2 <_dtoa_r+0x52>
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	4093      	lsls	r3, r2
 8004cc2:	604a      	str	r2, [r1, #4]
 8004cc4:	608b      	str	r3, [r1, #8]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 fe22 	bl	8005910 <_Bfree>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	1e3b      	subs	r3, r7, #0
 8004cd4:	bfaf      	iteee	ge
 8004cd6:	2300      	movge	r3, #0
 8004cd8:	2201      	movlt	r2, #1
 8004cda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cde:	9305      	strlt	r3, [sp, #20]
 8004ce0:	bfa8      	it	ge
 8004ce2:	f8c8 3000 	strge.w	r3, [r8]
 8004ce6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cea:	4b99      	ldr	r3, [pc, #612]	; (8004f50 <_dtoa_r+0x2d0>)
 8004cec:	bfb8      	it	lt
 8004cee:	f8c8 2000 	strlt.w	r2, [r8]
 8004cf2:	ea33 0309 	bics.w	r3, r3, r9
 8004cf6:	d119      	bne.n	8004d2c <_dtoa_r+0xac>
 8004cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d04:	4333      	orrs	r3, r6
 8004d06:	f000 857f 	beq.w	8005808 <_dtoa_r+0xb88>
 8004d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d0c:	b953      	cbnz	r3, 8004d24 <_dtoa_r+0xa4>
 8004d0e:	4b91      	ldr	r3, [pc, #580]	; (8004f54 <_dtoa_r+0x2d4>)
 8004d10:	e022      	b.n	8004d58 <_dtoa_r+0xd8>
 8004d12:	4b91      	ldr	r3, [pc, #580]	; (8004f58 <_dtoa_r+0x2d8>)
 8004d14:	9303      	str	r3, [sp, #12]
 8004d16:	3308      	adds	r3, #8
 8004d18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	9803      	ldr	r0, [sp, #12]
 8004d1e:	b019      	add	sp, #100	; 0x64
 8004d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d24:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <_dtoa_r+0x2d4>)
 8004d26:	9303      	str	r3, [sp, #12]
 8004d28:	3303      	adds	r3, #3
 8004d2a:	e7f5      	b.n	8004d18 <_dtoa_r+0x98>
 8004d2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f7fb fe3e 	bl	80009bc <__aeabi_dcmpeq>
 8004d40:	4680      	mov	r8, r0
 8004d42:	b158      	cbz	r0, 8004d5c <_dtoa_r+0xdc>
 8004d44:	2301      	movs	r3, #1
 8004d46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8558 	beq.w	8005802 <_dtoa_r+0xb82>
 8004d52:	4882      	ldr	r0, [pc, #520]	; (8004f5c <_dtoa_r+0x2dc>)
 8004d54:	6018      	str	r0, [r3, #0]
 8004d56:	1e43      	subs	r3, r0, #1
 8004d58:	9303      	str	r3, [sp, #12]
 8004d5a:	e7df      	b.n	8004d1c <_dtoa_r+0x9c>
 8004d5c:	ab16      	add	r3, sp, #88	; 0x58
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	ab17      	add	r3, sp, #92	; 0x5c
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	4628      	mov	r0, r5
 8004d66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d6a:	f001 f8b7 	bl	8005edc <__d2b>
 8004d6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d72:	4683      	mov	fp, r0
 8004d74:	2c00      	cmp	r4, #0
 8004d76:	d07f      	beq.n	8004e78 <_dtoa_r+0x1f8>
 8004d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d92:	2200      	movs	r2, #0
 8004d94:	4b72      	ldr	r3, [pc, #456]	; (8004f60 <_dtoa_r+0x2e0>)
 8004d96:	f7fb f9f1 	bl	800017c <__aeabi_dsub>
 8004d9a:	a365      	add	r3, pc, #404	; (adr r3, 8004f30 <_dtoa_r+0x2b0>)
 8004d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da0:	f7fb fba4 	bl	80004ec <__aeabi_dmul>
 8004da4:	a364      	add	r3, pc, #400	; (adr r3, 8004f38 <_dtoa_r+0x2b8>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb f9e9 	bl	8000180 <__adddf3>
 8004dae:	4606      	mov	r6, r0
 8004db0:	4620      	mov	r0, r4
 8004db2:	460f      	mov	r7, r1
 8004db4:	f7fb fb30 	bl	8000418 <__aeabi_i2d>
 8004db8:	a361      	add	r3, pc, #388	; (adr r3, 8004f40 <_dtoa_r+0x2c0>)
 8004dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbe:	f7fb fb95 	bl	80004ec <__aeabi_dmul>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4630      	mov	r0, r6
 8004dc8:	4639      	mov	r1, r7
 8004dca:	f7fb f9d9 	bl	8000180 <__adddf3>
 8004dce:	4606      	mov	r6, r0
 8004dd0:	460f      	mov	r7, r1
 8004dd2:	f7fb fe3b 	bl	8000a4c <__aeabi_d2iz>
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	4682      	mov	sl, r0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	4630      	mov	r0, r6
 8004dde:	4639      	mov	r1, r7
 8004de0:	f7fb fdf6 	bl	80009d0 <__aeabi_dcmplt>
 8004de4:	b148      	cbz	r0, 8004dfa <_dtoa_r+0x17a>
 8004de6:	4650      	mov	r0, sl
 8004de8:	f7fb fb16 	bl	8000418 <__aeabi_i2d>
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	f7fb fde4 	bl	80009bc <__aeabi_dcmpeq>
 8004df4:	b908      	cbnz	r0, 8004dfa <_dtoa_r+0x17a>
 8004df6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004dfa:	f1ba 0f16 	cmp.w	sl, #22
 8004dfe:	d858      	bhi.n	8004eb2 <_dtoa_r+0x232>
 8004e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e04:	4b57      	ldr	r3, [pc, #348]	; (8004f64 <_dtoa_r+0x2e4>)
 8004e06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0e:	f7fb fddf 	bl	80009d0 <__aeabi_dcmplt>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d04f      	beq.n	8004eb6 <_dtoa_r+0x236>
 8004e16:	2300      	movs	r3, #0
 8004e18:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e1c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e1e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e20:	1b1c      	subs	r4, r3, r4
 8004e22:	1e63      	subs	r3, r4, #1
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	bf49      	itett	mi
 8004e28:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e2c:	2300      	movpl	r3, #0
 8004e2e:	9306      	strmi	r3, [sp, #24]
 8004e30:	2300      	movmi	r3, #0
 8004e32:	bf54      	ite	pl
 8004e34:	9306      	strpl	r3, [sp, #24]
 8004e36:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e38:	f1ba 0f00 	cmp.w	sl, #0
 8004e3c:	db3d      	blt.n	8004eba <_dtoa_r+0x23a>
 8004e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e40:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e44:	4453      	add	r3, sl
 8004e46:	9309      	str	r3, [sp, #36]	; 0x24
 8004e48:	2300      	movs	r3, #0
 8004e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e4e:	2b09      	cmp	r3, #9
 8004e50:	f200 808c 	bhi.w	8004f6c <_dtoa_r+0x2ec>
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	bfc4      	itt	gt
 8004e58:	3b04      	subgt	r3, #4
 8004e5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e5e:	bfc8      	it	gt
 8004e60:	2400      	movgt	r4, #0
 8004e62:	f1a3 0302 	sub.w	r3, r3, #2
 8004e66:	bfd8      	it	le
 8004e68:	2401      	movle	r4, #1
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	f200 808a 	bhi.w	8004f84 <_dtoa_r+0x304>
 8004e70:	e8df f003 	tbb	[pc, r3]
 8004e74:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e7c:	441c      	add	r4, r3
 8004e7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	bfc3      	ittte	gt
 8004e86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e8a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e8e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e92:	f1c3 0320 	rsble	r3, r3, #32
 8004e96:	bfc6      	itte	gt
 8004e98:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e9c:	4318      	orrgt	r0, r3
 8004e9e:	fa06 f003 	lslle.w	r0, r6, r3
 8004ea2:	f7fb faa9 	bl	80003f8 <__aeabi_ui2d>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eac:	3c01      	subs	r4, #1
 8004eae:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eb0:	e76f      	b.n	8004d92 <_dtoa_r+0x112>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e7b2      	b.n	8004e1c <_dtoa_r+0x19c>
 8004eb6:	900f      	str	r0, [sp, #60]	; 0x3c
 8004eb8:	e7b1      	b.n	8004e1e <_dtoa_r+0x19e>
 8004eba:	9b06      	ldr	r3, [sp, #24]
 8004ebc:	eba3 030a 	sub.w	r3, r3, sl
 8004ec0:	9306      	str	r3, [sp, #24]
 8004ec2:	f1ca 0300 	rsb	r3, sl, #0
 8004ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ec8:	2300      	movs	r3, #0
 8004eca:	930e      	str	r3, [sp, #56]	; 0x38
 8004ecc:	e7be      	b.n	8004e4c <_dtoa_r+0x1cc>
 8004ece:	2300      	movs	r3, #0
 8004ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ed2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	dc58      	bgt.n	8004f8a <_dtoa_r+0x30a>
 8004ed8:	f04f 0901 	mov.w	r9, #1
 8004edc:	464b      	mov	r3, r9
 8004ede:	f8cd 9020 	str.w	r9, [sp, #32]
 8004ee2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004eea:	6042      	str	r2, [r0, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	f102 0614 	add.w	r6, r2, #20
 8004ef2:	429e      	cmp	r6, r3
 8004ef4:	6841      	ldr	r1, [r0, #4]
 8004ef6:	d94e      	bls.n	8004f96 <_dtoa_r+0x316>
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 fcc9 	bl	8005890 <_Balloc>
 8004efe:	9003      	str	r0, [sp, #12]
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d14c      	bne.n	8004f9e <_dtoa_r+0x31e>
 8004f04:	4602      	mov	r2, r0
 8004f06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <_dtoa_r+0x2e8>)
 8004f0c:	e6cc      	b.n	8004ca8 <_dtoa_r+0x28>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e7de      	b.n	8004ed0 <_dtoa_r+0x250>
 8004f12:	2300      	movs	r3, #0
 8004f14:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f18:	eb0a 0903 	add.w	r9, sl, r3
 8004f1c:	f109 0301 	add.w	r3, r9, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	9308      	str	r3, [sp, #32]
 8004f24:	bfb8      	it	lt
 8004f26:	2301      	movlt	r3, #1
 8004f28:	e7dd      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7f2      	b.n	8004f14 <_dtoa_r+0x294>
 8004f2e:	bf00      	nop
 8004f30:	636f4361 	.word	0x636f4361
 8004f34:	3fd287a7 	.word	0x3fd287a7
 8004f38:	8b60c8b3 	.word	0x8b60c8b3
 8004f3c:	3fc68a28 	.word	0x3fc68a28
 8004f40:	509f79fb 	.word	0x509f79fb
 8004f44:	3fd34413 	.word	0x3fd34413
 8004f48:	080072f9 	.word	0x080072f9
 8004f4c:	08007310 	.word	0x08007310
 8004f50:	7ff00000 	.word	0x7ff00000
 8004f54:	080072f5 	.word	0x080072f5
 8004f58:	080072ec 	.word	0x080072ec
 8004f5c:	080072c9 	.word	0x080072c9
 8004f60:	3ff80000 	.word	0x3ff80000
 8004f64:	08007400 	.word	0x08007400
 8004f68:	0800736b 	.word	0x0800736b
 8004f6c:	2401      	movs	r4, #1
 8004f6e:	2300      	movs	r3, #0
 8004f70:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f72:	9322      	str	r3, [sp, #136]	; 0x88
 8004f74:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f80:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f82:	e7b0      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f84:	2301      	movs	r3, #1
 8004f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f88:	e7f4      	b.n	8004f74 <_dtoa_r+0x2f4>
 8004f8a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f8e:	464b      	mov	r3, r9
 8004f90:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f94:	e7a7      	b.n	8004ee6 <_dtoa_r+0x266>
 8004f96:	3101      	adds	r1, #1
 8004f98:	6041      	str	r1, [r0, #4]
 8004f9a:	0052      	lsls	r2, r2, #1
 8004f9c:	e7a7      	b.n	8004eee <_dtoa_r+0x26e>
 8004f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fa0:	9a03      	ldr	r2, [sp, #12]
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	9b08      	ldr	r3, [sp, #32]
 8004fa6:	2b0e      	cmp	r3, #14
 8004fa8:	f200 80a8 	bhi.w	80050fc <_dtoa_r+0x47c>
 8004fac:	2c00      	cmp	r4, #0
 8004fae:	f000 80a5 	beq.w	80050fc <_dtoa_r+0x47c>
 8004fb2:	f1ba 0f00 	cmp.w	sl, #0
 8004fb6:	dd34      	ble.n	8005022 <_dtoa_r+0x3a2>
 8004fb8:	4a9a      	ldr	r2, [pc, #616]	; (8005224 <_dtoa_r+0x5a4>)
 8004fba:	f00a 030f 	and.w	r3, sl, #15
 8004fbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fc2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fc6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fce:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fd2:	d016      	beq.n	8005002 <_dtoa_r+0x382>
 8004fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fd8:	4b93      	ldr	r3, [pc, #588]	; (8005228 <_dtoa_r+0x5a8>)
 8004fda:	2703      	movs	r7, #3
 8004fdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe0:	f7fb fbae 	bl	8000740 <__aeabi_ddiv>
 8004fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fe8:	f004 040f 	and.w	r4, r4, #15
 8004fec:	4e8e      	ldr	r6, [pc, #568]	; (8005228 <_dtoa_r+0x5a8>)
 8004fee:	b954      	cbnz	r4, 8005006 <_dtoa_r+0x386>
 8004ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ff4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ff8:	f7fb fba2 	bl	8000740 <__aeabi_ddiv>
 8004ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005000:	e029      	b.n	8005056 <_dtoa_r+0x3d6>
 8005002:	2702      	movs	r7, #2
 8005004:	e7f2      	b.n	8004fec <_dtoa_r+0x36c>
 8005006:	07e1      	lsls	r1, r4, #31
 8005008:	d508      	bpl.n	800501c <_dtoa_r+0x39c>
 800500a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800500e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005012:	f7fb fa6b 	bl	80004ec <__aeabi_dmul>
 8005016:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800501a:	3701      	adds	r7, #1
 800501c:	1064      	asrs	r4, r4, #1
 800501e:	3608      	adds	r6, #8
 8005020:	e7e5      	b.n	8004fee <_dtoa_r+0x36e>
 8005022:	f000 80a5 	beq.w	8005170 <_dtoa_r+0x4f0>
 8005026:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800502a:	f1ca 0400 	rsb	r4, sl, #0
 800502e:	4b7d      	ldr	r3, [pc, #500]	; (8005224 <_dtoa_r+0x5a4>)
 8005030:	f004 020f 	and.w	r2, r4, #15
 8005034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	f7fb fa56 	bl	80004ec <__aeabi_dmul>
 8005040:	2702      	movs	r7, #2
 8005042:	2300      	movs	r3, #0
 8005044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005048:	4e77      	ldr	r6, [pc, #476]	; (8005228 <_dtoa_r+0x5a8>)
 800504a:	1124      	asrs	r4, r4, #4
 800504c:	2c00      	cmp	r4, #0
 800504e:	f040 8084 	bne.w	800515a <_dtoa_r+0x4da>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1d2      	bne.n	8004ffc <_dtoa_r+0x37c>
 8005056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 808b 	beq.w	8005174 <_dtoa_r+0x4f4>
 800505e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005062:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800506a:	2200      	movs	r2, #0
 800506c:	4b6f      	ldr	r3, [pc, #444]	; (800522c <_dtoa_r+0x5ac>)
 800506e:	f7fb fcaf 	bl	80009d0 <__aeabi_dcmplt>
 8005072:	2800      	cmp	r0, #0
 8005074:	d07e      	beq.n	8005174 <_dtoa_r+0x4f4>
 8005076:	9b08      	ldr	r3, [sp, #32]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d07b      	beq.n	8005174 <_dtoa_r+0x4f4>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	dd38      	ble.n	80050f4 <_dtoa_r+0x474>
 8005082:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005086:	2200      	movs	r2, #0
 8005088:	4b69      	ldr	r3, [pc, #420]	; (8005230 <_dtoa_r+0x5b0>)
 800508a:	f7fb fa2f 	bl	80004ec <__aeabi_dmul>
 800508e:	464c      	mov	r4, r9
 8005090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005094:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005098:	3701      	adds	r7, #1
 800509a:	4638      	mov	r0, r7
 800509c:	f7fb f9bc 	bl	8000418 <__aeabi_i2d>
 80050a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a4:	f7fb fa22 	bl	80004ec <__aeabi_dmul>
 80050a8:	2200      	movs	r2, #0
 80050aa:	4b62      	ldr	r3, [pc, #392]	; (8005234 <_dtoa_r+0x5b4>)
 80050ac:	f7fb f868 	bl	8000180 <__adddf3>
 80050b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050b8:	9611      	str	r6, [sp, #68]	; 0x44
 80050ba:	2c00      	cmp	r4, #0
 80050bc:	d15d      	bne.n	800517a <_dtoa_r+0x4fa>
 80050be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050c2:	2200      	movs	r2, #0
 80050c4:	4b5c      	ldr	r3, [pc, #368]	; (8005238 <_dtoa_r+0x5b8>)
 80050c6:	f7fb f859 	bl	800017c <__aeabi_dsub>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050d2:	4633      	mov	r3, r6
 80050d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050d6:	f7fb fc99 	bl	8000a0c <__aeabi_dcmpgt>
 80050da:	2800      	cmp	r0, #0
 80050dc:	f040 829c 	bne.w	8005618 <_dtoa_r+0x998>
 80050e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050ea:	f7fb fc71 	bl	80009d0 <__aeabi_dcmplt>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	f040 8290 	bne.w	8005614 <_dtoa_r+0x994>
 80050f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80050f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80050fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f2c0 8152 	blt.w	80053a8 <_dtoa_r+0x728>
 8005104:	f1ba 0f0e 	cmp.w	sl, #14
 8005108:	f300 814e 	bgt.w	80053a8 <_dtoa_r+0x728>
 800510c:	4b45      	ldr	r3, [pc, #276]	; (8005224 <_dtoa_r+0x5a4>)
 800510e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005112:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005116:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800511a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800511c:	2b00      	cmp	r3, #0
 800511e:	f280 80db 	bge.w	80052d8 <_dtoa_r+0x658>
 8005122:	9b08      	ldr	r3, [sp, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	f300 80d7 	bgt.w	80052d8 <_dtoa_r+0x658>
 800512a:	f040 8272 	bne.w	8005612 <_dtoa_r+0x992>
 800512e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005132:	2200      	movs	r2, #0
 8005134:	4b40      	ldr	r3, [pc, #256]	; (8005238 <_dtoa_r+0x5b8>)
 8005136:	f7fb f9d9 	bl	80004ec <__aeabi_dmul>
 800513a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800513e:	f7fb fc5b 	bl	80009f8 <__aeabi_dcmpge>
 8005142:	9c08      	ldr	r4, [sp, #32]
 8005144:	4626      	mov	r6, r4
 8005146:	2800      	cmp	r0, #0
 8005148:	f040 8248 	bne.w	80055dc <_dtoa_r+0x95c>
 800514c:	2331      	movs	r3, #49	; 0x31
 800514e:	9f03      	ldr	r7, [sp, #12]
 8005150:	f10a 0a01 	add.w	sl, sl, #1
 8005154:	f807 3b01 	strb.w	r3, [r7], #1
 8005158:	e244      	b.n	80055e4 <_dtoa_r+0x964>
 800515a:	07e2      	lsls	r2, r4, #31
 800515c:	d505      	bpl.n	800516a <_dtoa_r+0x4ea>
 800515e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005162:	f7fb f9c3 	bl	80004ec <__aeabi_dmul>
 8005166:	2301      	movs	r3, #1
 8005168:	3701      	adds	r7, #1
 800516a:	1064      	asrs	r4, r4, #1
 800516c:	3608      	adds	r6, #8
 800516e:	e76d      	b.n	800504c <_dtoa_r+0x3cc>
 8005170:	2702      	movs	r7, #2
 8005172:	e770      	b.n	8005056 <_dtoa_r+0x3d6>
 8005174:	46d0      	mov	r8, sl
 8005176:	9c08      	ldr	r4, [sp, #32]
 8005178:	e78f      	b.n	800509a <_dtoa_r+0x41a>
 800517a:	9903      	ldr	r1, [sp, #12]
 800517c:	4b29      	ldr	r3, [pc, #164]	; (8005224 <_dtoa_r+0x5a4>)
 800517e:	4421      	add	r1, r4
 8005180:	9112      	str	r1, [sp, #72]	; 0x48
 8005182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005184:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005188:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800518c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005190:	2900      	cmp	r1, #0
 8005192:	d055      	beq.n	8005240 <_dtoa_r+0x5c0>
 8005194:	2000      	movs	r0, #0
 8005196:	4929      	ldr	r1, [pc, #164]	; (800523c <_dtoa_r+0x5bc>)
 8005198:	f7fb fad2 	bl	8000740 <__aeabi_ddiv>
 800519c:	463b      	mov	r3, r7
 800519e:	4632      	mov	r2, r6
 80051a0:	f7fa ffec 	bl	800017c <__aeabi_dsub>
 80051a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051a8:	9f03      	ldr	r7, [sp, #12]
 80051aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ae:	f7fb fc4d 	bl	8000a4c <__aeabi_d2iz>
 80051b2:	4604      	mov	r4, r0
 80051b4:	f7fb f930 	bl	8000418 <__aeabi_i2d>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c0:	f7fa ffdc 	bl	800017c <__aeabi_dsub>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	3430      	adds	r4, #48	; 0x30
 80051ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051d2:	f807 4b01 	strb.w	r4, [r7], #1
 80051d6:	f7fb fbfb 	bl	80009d0 <__aeabi_dcmplt>
 80051da:	2800      	cmp	r0, #0
 80051dc:	d174      	bne.n	80052c8 <_dtoa_r+0x648>
 80051de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051e2:	2000      	movs	r0, #0
 80051e4:	4911      	ldr	r1, [pc, #68]	; (800522c <_dtoa_r+0x5ac>)
 80051e6:	f7fa ffc9 	bl	800017c <__aeabi_dsub>
 80051ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051ee:	f7fb fbef 	bl	80009d0 <__aeabi_dcmplt>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f040 80b7 	bne.w	8005366 <_dtoa_r+0x6e6>
 80051f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80051fa:	429f      	cmp	r7, r3
 80051fc:	f43f af7a 	beq.w	80050f4 <_dtoa_r+0x474>
 8005200:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005204:	2200      	movs	r2, #0
 8005206:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <_dtoa_r+0x5b0>)
 8005208:	f7fb f970 	bl	80004ec <__aeabi_dmul>
 800520c:	2200      	movs	r2, #0
 800520e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005212:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <_dtoa_r+0x5b0>)
 8005218:	f7fb f968 	bl	80004ec <__aeabi_dmul>
 800521c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005220:	e7c3      	b.n	80051aa <_dtoa_r+0x52a>
 8005222:	bf00      	nop
 8005224:	08007400 	.word	0x08007400
 8005228:	080073d8 	.word	0x080073d8
 800522c:	3ff00000 	.word	0x3ff00000
 8005230:	40240000 	.word	0x40240000
 8005234:	401c0000 	.word	0x401c0000
 8005238:	40140000 	.word	0x40140000
 800523c:	3fe00000 	.word	0x3fe00000
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	f7fb f952 	bl	80004ec <__aeabi_dmul>
 8005248:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800524a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800524e:	9c03      	ldr	r4, [sp, #12]
 8005250:	9314      	str	r3, [sp, #80]	; 0x50
 8005252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005256:	f7fb fbf9 	bl	8000a4c <__aeabi_d2iz>
 800525a:	9015      	str	r0, [sp, #84]	; 0x54
 800525c:	f7fb f8dc 	bl	8000418 <__aeabi_i2d>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005268:	f7fa ff88 	bl	800017c <__aeabi_dsub>
 800526c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800526e:	4606      	mov	r6, r0
 8005270:	3330      	adds	r3, #48	; 0x30
 8005272:	f804 3b01 	strb.w	r3, [r4], #1
 8005276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005278:	460f      	mov	r7, r1
 800527a:	429c      	cmp	r4, r3
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	d124      	bne.n	80052cc <_dtoa_r+0x64c>
 8005282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005286:	4bb0      	ldr	r3, [pc, #704]	; (8005548 <_dtoa_r+0x8c8>)
 8005288:	f7fa ff7a 	bl	8000180 <__adddf3>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f7fb fbba 	bl	8000a0c <__aeabi_dcmpgt>
 8005298:	2800      	cmp	r0, #0
 800529a:	d163      	bne.n	8005364 <_dtoa_r+0x6e4>
 800529c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052a0:	2000      	movs	r0, #0
 80052a2:	49a9      	ldr	r1, [pc, #676]	; (8005548 <_dtoa_r+0x8c8>)
 80052a4:	f7fa ff6a 	bl	800017c <__aeabi_dsub>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4630      	mov	r0, r6
 80052ae:	4639      	mov	r1, r7
 80052b0:	f7fb fb8e 	bl	80009d0 <__aeabi_dcmplt>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	f43f af1d 	beq.w	80050f4 <_dtoa_r+0x474>
 80052ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052bc:	1e7b      	subs	r3, r7, #1
 80052be:	9314      	str	r3, [sp, #80]	; 0x50
 80052c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052c4:	2b30      	cmp	r3, #48	; 0x30
 80052c6:	d0f8      	beq.n	80052ba <_dtoa_r+0x63a>
 80052c8:	46c2      	mov	sl, r8
 80052ca:	e03b      	b.n	8005344 <_dtoa_r+0x6c4>
 80052cc:	4b9f      	ldr	r3, [pc, #636]	; (800554c <_dtoa_r+0x8cc>)
 80052ce:	f7fb f90d 	bl	80004ec <__aeabi_dmul>
 80052d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052d6:	e7bc      	b.n	8005252 <_dtoa_r+0x5d2>
 80052d8:	9f03      	ldr	r7, [sp, #12]
 80052da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052e2:	4640      	mov	r0, r8
 80052e4:	4649      	mov	r1, r9
 80052e6:	f7fb fa2b 	bl	8000740 <__aeabi_ddiv>
 80052ea:	f7fb fbaf 	bl	8000a4c <__aeabi_d2iz>
 80052ee:	4604      	mov	r4, r0
 80052f0:	f7fb f892 	bl	8000418 <__aeabi_i2d>
 80052f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052f8:	f7fb f8f8 	bl	80004ec <__aeabi_dmul>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	f7fa ff3a 	bl	800017c <__aeabi_dsub>
 8005308:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800530c:	f807 6b01 	strb.w	r6, [r7], #1
 8005310:	9e03      	ldr	r6, [sp, #12]
 8005312:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005316:	1bbe      	subs	r6, r7, r6
 8005318:	45b4      	cmp	ip, r6
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	d136      	bne.n	800538e <_dtoa_r+0x70e>
 8005320:	f7fa ff2e 	bl	8000180 <__adddf3>
 8005324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005328:	4680      	mov	r8, r0
 800532a:	4689      	mov	r9, r1
 800532c:	f7fb fb6e 	bl	8000a0c <__aeabi_dcmpgt>
 8005330:	bb58      	cbnz	r0, 800538a <_dtoa_r+0x70a>
 8005332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005336:	4640      	mov	r0, r8
 8005338:	4649      	mov	r1, r9
 800533a:	f7fb fb3f 	bl	80009bc <__aeabi_dcmpeq>
 800533e:	b108      	cbz	r0, 8005344 <_dtoa_r+0x6c4>
 8005340:	07e1      	lsls	r1, r4, #31
 8005342:	d422      	bmi.n	800538a <_dtoa_r+0x70a>
 8005344:	4628      	mov	r0, r5
 8005346:	4659      	mov	r1, fp
 8005348:	f000 fae2 	bl	8005910 <_Bfree>
 800534c:	2300      	movs	r3, #0
 800534e:	703b      	strb	r3, [r7, #0]
 8005350:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005352:	f10a 0001 	add.w	r0, sl, #1
 8005356:	6018      	str	r0, [r3, #0]
 8005358:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800535a:	2b00      	cmp	r3, #0
 800535c:	f43f acde 	beq.w	8004d1c <_dtoa_r+0x9c>
 8005360:	601f      	str	r7, [r3, #0]
 8005362:	e4db      	b.n	8004d1c <_dtoa_r+0x9c>
 8005364:	4627      	mov	r7, r4
 8005366:	463b      	mov	r3, r7
 8005368:	461f      	mov	r7, r3
 800536a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800536e:	2a39      	cmp	r2, #57	; 0x39
 8005370:	d107      	bne.n	8005382 <_dtoa_r+0x702>
 8005372:	9a03      	ldr	r2, [sp, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d1f7      	bne.n	8005368 <_dtoa_r+0x6e8>
 8005378:	2230      	movs	r2, #48	; 0x30
 800537a:	9903      	ldr	r1, [sp, #12]
 800537c:	f108 0801 	add.w	r8, r8, #1
 8005380:	700a      	strb	r2, [r1, #0]
 8005382:	781a      	ldrb	r2, [r3, #0]
 8005384:	3201      	adds	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e79e      	b.n	80052c8 <_dtoa_r+0x648>
 800538a:	46d0      	mov	r8, sl
 800538c:	e7eb      	b.n	8005366 <_dtoa_r+0x6e6>
 800538e:	2200      	movs	r2, #0
 8005390:	4b6e      	ldr	r3, [pc, #440]	; (800554c <_dtoa_r+0x8cc>)
 8005392:	f7fb f8ab 	bl	80004ec <__aeabi_dmul>
 8005396:	2200      	movs	r2, #0
 8005398:	2300      	movs	r3, #0
 800539a:	4680      	mov	r8, r0
 800539c:	4689      	mov	r9, r1
 800539e:	f7fb fb0d 	bl	80009bc <__aeabi_dcmpeq>
 80053a2:	2800      	cmp	r0, #0
 80053a4:	d09b      	beq.n	80052de <_dtoa_r+0x65e>
 80053a6:	e7cd      	b.n	8005344 <_dtoa_r+0x6c4>
 80053a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	f000 80d0 	beq.w	8005550 <_dtoa_r+0x8d0>
 80053b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053b2:	2a01      	cmp	r2, #1
 80053b4:	f300 80ae 	bgt.w	8005514 <_dtoa_r+0x894>
 80053b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	f000 80a6 	beq.w	800550c <_dtoa_r+0x88c>
 80053c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053c6:	9f06      	ldr	r7, [sp, #24]
 80053c8:	9a06      	ldr	r2, [sp, #24]
 80053ca:	2101      	movs	r1, #1
 80053cc:	441a      	add	r2, r3
 80053ce:	9206      	str	r2, [sp, #24]
 80053d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053d2:	4628      	mov	r0, r5
 80053d4:	441a      	add	r2, r3
 80053d6:	9209      	str	r2, [sp, #36]	; 0x24
 80053d8:	f000 fb50 	bl	8005a7c <__i2b>
 80053dc:	4606      	mov	r6, r0
 80053de:	2f00      	cmp	r7, #0
 80053e0:	dd0c      	ble.n	80053fc <_dtoa_r+0x77c>
 80053e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	dd09      	ble.n	80053fc <_dtoa_r+0x77c>
 80053e8:	42bb      	cmp	r3, r7
 80053ea:	bfa8      	it	ge
 80053ec:	463b      	movge	r3, r7
 80053ee:	9a06      	ldr	r2, [sp, #24]
 80053f0:	1aff      	subs	r7, r7, r3
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	9206      	str	r2, [sp, #24]
 80053f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	9309      	str	r3, [sp, #36]	; 0x24
 80053fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fe:	b1f3      	cbz	r3, 800543e <_dtoa_r+0x7be>
 8005400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80a8 	beq.w	8005558 <_dtoa_r+0x8d8>
 8005408:	2c00      	cmp	r4, #0
 800540a:	dd10      	ble.n	800542e <_dtoa_r+0x7ae>
 800540c:	4631      	mov	r1, r6
 800540e:	4622      	mov	r2, r4
 8005410:	4628      	mov	r0, r5
 8005412:	f000 fbf1 	bl	8005bf8 <__pow5mult>
 8005416:	465a      	mov	r2, fp
 8005418:	4601      	mov	r1, r0
 800541a:	4606      	mov	r6, r0
 800541c:	4628      	mov	r0, r5
 800541e:	f000 fb43 	bl	8005aa8 <__multiply>
 8005422:	4680      	mov	r8, r0
 8005424:	4659      	mov	r1, fp
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fa72 	bl	8005910 <_Bfree>
 800542c:	46c3      	mov	fp, r8
 800542e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005430:	1b1a      	subs	r2, r3, r4
 8005432:	d004      	beq.n	800543e <_dtoa_r+0x7be>
 8005434:	4659      	mov	r1, fp
 8005436:	4628      	mov	r0, r5
 8005438:	f000 fbde 	bl	8005bf8 <__pow5mult>
 800543c:	4683      	mov	fp, r0
 800543e:	2101      	movs	r1, #1
 8005440:	4628      	mov	r0, r5
 8005442:	f000 fb1b 	bl	8005a7c <__i2b>
 8005446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005448:	4604      	mov	r4, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	f340 8086 	ble.w	800555c <_dtoa_r+0x8dc>
 8005450:	461a      	mov	r2, r3
 8005452:	4601      	mov	r1, r0
 8005454:	4628      	mov	r0, r5
 8005456:	f000 fbcf 	bl	8005bf8 <__pow5mult>
 800545a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800545c:	4604      	mov	r4, r0
 800545e:	2b01      	cmp	r3, #1
 8005460:	dd7f      	ble.n	8005562 <_dtoa_r+0x8e2>
 8005462:	f04f 0800 	mov.w	r8, #0
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800546c:	6918      	ldr	r0, [r3, #16]
 800546e:	f000 fab7 	bl	80059e0 <__hi0bits>
 8005472:	f1c0 0020 	rsb	r0, r0, #32
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	4418      	add	r0, r3
 800547a:	f010 001f 	ands.w	r0, r0, #31
 800547e:	f000 8092 	beq.w	80055a6 <_dtoa_r+0x926>
 8005482:	f1c0 0320 	rsb	r3, r0, #32
 8005486:	2b04      	cmp	r3, #4
 8005488:	f340 808a 	ble.w	80055a0 <_dtoa_r+0x920>
 800548c:	f1c0 001c 	rsb	r0, r0, #28
 8005490:	9b06      	ldr	r3, [sp, #24]
 8005492:	4407      	add	r7, r0
 8005494:	4403      	add	r3, r0
 8005496:	9306      	str	r3, [sp, #24]
 8005498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549a:	4403      	add	r3, r0
 800549c:	9309      	str	r3, [sp, #36]	; 0x24
 800549e:	9b06      	ldr	r3, [sp, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dd05      	ble.n	80054b0 <_dtoa_r+0x830>
 80054a4:	4659      	mov	r1, fp
 80054a6:	461a      	mov	r2, r3
 80054a8:	4628      	mov	r0, r5
 80054aa:	f000 fbff 	bl	8005cac <__lshift>
 80054ae:	4683      	mov	fp, r0
 80054b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	dd05      	ble.n	80054c2 <_dtoa_r+0x842>
 80054b6:	4621      	mov	r1, r4
 80054b8:	461a      	mov	r2, r3
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 fbf6 	bl	8005cac <__lshift>
 80054c0:	4604      	mov	r4, r0
 80054c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d070      	beq.n	80055aa <_dtoa_r+0x92a>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4658      	mov	r0, fp
 80054cc:	f000 fc5e 	bl	8005d8c <__mcmp>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	da6a      	bge.n	80055aa <_dtoa_r+0x92a>
 80054d4:	2300      	movs	r3, #0
 80054d6:	4659      	mov	r1, fp
 80054d8:	220a      	movs	r2, #10
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 fa3a 	bl	8005954 <__multadd>
 80054e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054e2:	4683      	mov	fp, r0
 80054e4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8194 	beq.w	8005816 <_dtoa_r+0xb96>
 80054ee:	4631      	mov	r1, r6
 80054f0:	2300      	movs	r3, #0
 80054f2:	220a      	movs	r2, #10
 80054f4:	4628      	mov	r0, r5
 80054f6:	f000 fa2d 	bl	8005954 <__multadd>
 80054fa:	f1b9 0f00 	cmp.w	r9, #0
 80054fe:	4606      	mov	r6, r0
 8005500:	f300 8093 	bgt.w	800562a <_dtoa_r+0x9aa>
 8005504:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005506:	2b02      	cmp	r3, #2
 8005508:	dc57      	bgt.n	80055ba <_dtoa_r+0x93a>
 800550a:	e08e      	b.n	800562a <_dtoa_r+0x9aa>
 800550c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800550e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005512:	e757      	b.n	80053c4 <_dtoa_r+0x744>
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	1e5c      	subs	r4, r3, #1
 8005518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551a:	42a3      	cmp	r3, r4
 800551c:	bfb7      	itett	lt
 800551e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005520:	1b1c      	subge	r4, r3, r4
 8005522:	1ae2      	sublt	r2, r4, r3
 8005524:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005526:	bfbe      	ittt	lt
 8005528:	940a      	strlt	r4, [sp, #40]	; 0x28
 800552a:	189b      	addlt	r3, r3, r2
 800552c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800552e:	9b08      	ldr	r3, [sp, #32]
 8005530:	bfb8      	it	lt
 8005532:	2400      	movlt	r4, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	bfbb      	ittet	lt
 8005538:	9b06      	ldrlt	r3, [sp, #24]
 800553a:	9a08      	ldrlt	r2, [sp, #32]
 800553c:	9f06      	ldrge	r7, [sp, #24]
 800553e:	1a9f      	sublt	r7, r3, r2
 8005540:	bfac      	ite	ge
 8005542:	9b08      	ldrge	r3, [sp, #32]
 8005544:	2300      	movlt	r3, #0
 8005546:	e73f      	b.n	80053c8 <_dtoa_r+0x748>
 8005548:	3fe00000 	.word	0x3fe00000
 800554c:	40240000 	.word	0x40240000
 8005550:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005552:	9f06      	ldr	r7, [sp, #24]
 8005554:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005556:	e742      	b.n	80053de <_dtoa_r+0x75e>
 8005558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800555a:	e76b      	b.n	8005434 <_dtoa_r+0x7b4>
 800555c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800555e:	2b01      	cmp	r3, #1
 8005560:	dc19      	bgt.n	8005596 <_dtoa_r+0x916>
 8005562:	9b04      	ldr	r3, [sp, #16]
 8005564:	b9bb      	cbnz	r3, 8005596 <_dtoa_r+0x916>
 8005566:	9b05      	ldr	r3, [sp, #20]
 8005568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800556c:	b99b      	cbnz	r3, 8005596 <_dtoa_r+0x916>
 800556e:	9b05      	ldr	r3, [sp, #20]
 8005570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005574:	0d1b      	lsrs	r3, r3, #20
 8005576:	051b      	lsls	r3, r3, #20
 8005578:	b183      	cbz	r3, 800559c <_dtoa_r+0x91c>
 800557a:	f04f 0801 	mov.w	r8, #1
 800557e:	9b06      	ldr	r3, [sp, #24]
 8005580:	3301      	adds	r3, #1
 8005582:	9306      	str	r3, [sp, #24]
 8005584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005586:	3301      	adds	r3, #1
 8005588:	9309      	str	r3, [sp, #36]	; 0x24
 800558a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	f47f af6a 	bne.w	8005466 <_dtoa_r+0x7e6>
 8005592:	2001      	movs	r0, #1
 8005594:	e76f      	b.n	8005476 <_dtoa_r+0x7f6>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	e7f6      	b.n	800558a <_dtoa_r+0x90a>
 800559c:	4698      	mov	r8, r3
 800559e:	e7f4      	b.n	800558a <_dtoa_r+0x90a>
 80055a0:	f43f af7d 	beq.w	800549e <_dtoa_r+0x81e>
 80055a4:	4618      	mov	r0, r3
 80055a6:	301c      	adds	r0, #28
 80055a8:	e772      	b.n	8005490 <_dtoa_r+0x810>
 80055aa:	9b08      	ldr	r3, [sp, #32]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dc36      	bgt.n	800561e <_dtoa_r+0x99e>
 80055b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	dd33      	ble.n	800561e <_dtoa_r+0x99e>
 80055b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055ba:	f1b9 0f00 	cmp.w	r9, #0
 80055be:	d10d      	bne.n	80055dc <_dtoa_r+0x95c>
 80055c0:	4621      	mov	r1, r4
 80055c2:	464b      	mov	r3, r9
 80055c4:	2205      	movs	r2, #5
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 f9c4 	bl	8005954 <__multadd>
 80055cc:	4601      	mov	r1, r0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4658      	mov	r0, fp
 80055d2:	f000 fbdb 	bl	8005d8c <__mcmp>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	f73f adb8 	bgt.w	800514c <_dtoa_r+0x4cc>
 80055dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055de:	9f03      	ldr	r7, [sp, #12]
 80055e0:	ea6f 0a03 	mvn.w	sl, r3
 80055e4:	f04f 0800 	mov.w	r8, #0
 80055e8:	4621      	mov	r1, r4
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f990 	bl	8005910 <_Bfree>
 80055f0:	2e00      	cmp	r6, #0
 80055f2:	f43f aea7 	beq.w	8005344 <_dtoa_r+0x6c4>
 80055f6:	f1b8 0f00 	cmp.w	r8, #0
 80055fa:	d005      	beq.n	8005608 <_dtoa_r+0x988>
 80055fc:	45b0      	cmp	r8, r6
 80055fe:	d003      	beq.n	8005608 <_dtoa_r+0x988>
 8005600:	4641      	mov	r1, r8
 8005602:	4628      	mov	r0, r5
 8005604:	f000 f984 	bl	8005910 <_Bfree>
 8005608:	4631      	mov	r1, r6
 800560a:	4628      	mov	r0, r5
 800560c:	f000 f980 	bl	8005910 <_Bfree>
 8005610:	e698      	b.n	8005344 <_dtoa_r+0x6c4>
 8005612:	2400      	movs	r4, #0
 8005614:	4626      	mov	r6, r4
 8005616:	e7e1      	b.n	80055dc <_dtoa_r+0x95c>
 8005618:	46c2      	mov	sl, r8
 800561a:	4626      	mov	r6, r4
 800561c:	e596      	b.n	800514c <_dtoa_r+0x4cc>
 800561e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 80fd 	beq.w	8005824 <_dtoa_r+0xba4>
 800562a:	2f00      	cmp	r7, #0
 800562c:	dd05      	ble.n	800563a <_dtoa_r+0x9ba>
 800562e:	4631      	mov	r1, r6
 8005630:	463a      	mov	r2, r7
 8005632:	4628      	mov	r0, r5
 8005634:	f000 fb3a 	bl	8005cac <__lshift>
 8005638:	4606      	mov	r6, r0
 800563a:	f1b8 0f00 	cmp.w	r8, #0
 800563e:	d05c      	beq.n	80056fa <_dtoa_r+0xa7a>
 8005640:	4628      	mov	r0, r5
 8005642:	6871      	ldr	r1, [r6, #4]
 8005644:	f000 f924 	bl	8005890 <_Balloc>
 8005648:	4607      	mov	r7, r0
 800564a:	b928      	cbnz	r0, 8005658 <_dtoa_r+0x9d8>
 800564c:	4602      	mov	r2, r0
 800564e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005652:	4b7f      	ldr	r3, [pc, #508]	; (8005850 <_dtoa_r+0xbd0>)
 8005654:	f7ff bb28 	b.w	8004ca8 <_dtoa_r+0x28>
 8005658:	6932      	ldr	r2, [r6, #16]
 800565a:	f106 010c 	add.w	r1, r6, #12
 800565e:	3202      	adds	r2, #2
 8005660:	0092      	lsls	r2, r2, #2
 8005662:	300c      	adds	r0, #12
 8005664:	f7fe fde8 	bl	8004238 <memcpy>
 8005668:	2201      	movs	r2, #1
 800566a:	4639      	mov	r1, r7
 800566c:	4628      	mov	r0, r5
 800566e:	f000 fb1d 	bl	8005cac <__lshift>
 8005672:	46b0      	mov	r8, r6
 8005674:	4606      	mov	r6, r0
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	3301      	adds	r3, #1
 800567a:	9308      	str	r3, [sp, #32]
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	444b      	add	r3, r9
 8005680:	930a      	str	r3, [sp, #40]	; 0x28
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	9309      	str	r3, [sp, #36]	; 0x24
 800568a:	9b08      	ldr	r3, [sp, #32]
 800568c:	4621      	mov	r1, r4
 800568e:	3b01      	subs	r3, #1
 8005690:	4658      	mov	r0, fp
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	f7ff fa66 	bl	8004b64 <quorem>
 8005698:	4603      	mov	r3, r0
 800569a:	4641      	mov	r1, r8
 800569c:	3330      	adds	r3, #48	; 0x30
 800569e:	9006      	str	r0, [sp, #24]
 80056a0:	4658      	mov	r0, fp
 80056a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056a4:	f000 fb72 	bl	8005d8c <__mcmp>
 80056a8:	4632      	mov	r2, r6
 80056aa:	4681      	mov	r9, r0
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 fb88 	bl	8005dc4 <__mdiff>
 80056b4:	68c2      	ldr	r2, [r0, #12]
 80056b6:	4607      	mov	r7, r0
 80056b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ba:	bb02      	cbnz	r2, 80056fe <_dtoa_r+0xa7e>
 80056bc:	4601      	mov	r1, r0
 80056be:	4658      	mov	r0, fp
 80056c0:	f000 fb64 	bl	8005d8c <__mcmp>
 80056c4:	4602      	mov	r2, r0
 80056c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c8:	4639      	mov	r1, r7
 80056ca:	4628      	mov	r0, r5
 80056cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056d0:	f000 f91e 	bl	8005910 <_Bfree>
 80056d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056d8:	9f08      	ldr	r7, [sp, #32]
 80056da:	ea43 0102 	orr.w	r1, r3, r2
 80056de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e0:	430b      	orrs	r3, r1
 80056e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e4:	d10d      	bne.n	8005702 <_dtoa_r+0xa82>
 80056e6:	2b39      	cmp	r3, #57	; 0x39
 80056e8:	d029      	beq.n	800573e <_dtoa_r+0xabe>
 80056ea:	f1b9 0f00 	cmp.w	r9, #0
 80056ee:	dd01      	ble.n	80056f4 <_dtoa_r+0xa74>
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	3331      	adds	r3, #49	; 0x31
 80056f4:	9a04      	ldr	r2, [sp, #16]
 80056f6:	7013      	strb	r3, [r2, #0]
 80056f8:	e776      	b.n	80055e8 <_dtoa_r+0x968>
 80056fa:	4630      	mov	r0, r6
 80056fc:	e7b9      	b.n	8005672 <_dtoa_r+0x9f2>
 80056fe:	2201      	movs	r2, #1
 8005700:	e7e2      	b.n	80056c8 <_dtoa_r+0xa48>
 8005702:	f1b9 0f00 	cmp.w	r9, #0
 8005706:	db06      	blt.n	8005716 <_dtoa_r+0xa96>
 8005708:	9922      	ldr	r1, [sp, #136]	; 0x88
 800570a:	ea41 0909 	orr.w	r9, r1, r9
 800570e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005710:	ea59 0101 	orrs.w	r1, r9, r1
 8005714:	d120      	bne.n	8005758 <_dtoa_r+0xad8>
 8005716:	2a00      	cmp	r2, #0
 8005718:	ddec      	ble.n	80056f4 <_dtoa_r+0xa74>
 800571a:	4659      	mov	r1, fp
 800571c:	2201      	movs	r2, #1
 800571e:	4628      	mov	r0, r5
 8005720:	9308      	str	r3, [sp, #32]
 8005722:	f000 fac3 	bl	8005cac <__lshift>
 8005726:	4621      	mov	r1, r4
 8005728:	4683      	mov	fp, r0
 800572a:	f000 fb2f 	bl	8005d8c <__mcmp>
 800572e:	2800      	cmp	r0, #0
 8005730:	9b08      	ldr	r3, [sp, #32]
 8005732:	dc02      	bgt.n	800573a <_dtoa_r+0xaba>
 8005734:	d1de      	bne.n	80056f4 <_dtoa_r+0xa74>
 8005736:	07da      	lsls	r2, r3, #31
 8005738:	d5dc      	bpl.n	80056f4 <_dtoa_r+0xa74>
 800573a:	2b39      	cmp	r3, #57	; 0x39
 800573c:	d1d8      	bne.n	80056f0 <_dtoa_r+0xa70>
 800573e:	2339      	movs	r3, #57	; 0x39
 8005740:	9a04      	ldr	r2, [sp, #16]
 8005742:	7013      	strb	r3, [r2, #0]
 8005744:	463b      	mov	r3, r7
 8005746:	461f      	mov	r7, r3
 8005748:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800574c:	3b01      	subs	r3, #1
 800574e:	2a39      	cmp	r2, #57	; 0x39
 8005750:	d050      	beq.n	80057f4 <_dtoa_r+0xb74>
 8005752:	3201      	adds	r2, #1
 8005754:	701a      	strb	r2, [r3, #0]
 8005756:	e747      	b.n	80055e8 <_dtoa_r+0x968>
 8005758:	2a00      	cmp	r2, #0
 800575a:	dd03      	ble.n	8005764 <_dtoa_r+0xae4>
 800575c:	2b39      	cmp	r3, #57	; 0x39
 800575e:	d0ee      	beq.n	800573e <_dtoa_r+0xabe>
 8005760:	3301      	adds	r3, #1
 8005762:	e7c7      	b.n	80056f4 <_dtoa_r+0xa74>
 8005764:	9a08      	ldr	r2, [sp, #32]
 8005766:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005768:	f802 3c01 	strb.w	r3, [r2, #-1]
 800576c:	428a      	cmp	r2, r1
 800576e:	d02a      	beq.n	80057c6 <_dtoa_r+0xb46>
 8005770:	4659      	mov	r1, fp
 8005772:	2300      	movs	r3, #0
 8005774:	220a      	movs	r2, #10
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f8ec 	bl	8005954 <__multadd>
 800577c:	45b0      	cmp	r8, r6
 800577e:	4683      	mov	fp, r0
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	f04f 020a 	mov.w	r2, #10
 8005788:	4641      	mov	r1, r8
 800578a:	4628      	mov	r0, r5
 800578c:	d107      	bne.n	800579e <_dtoa_r+0xb1e>
 800578e:	f000 f8e1 	bl	8005954 <__multadd>
 8005792:	4680      	mov	r8, r0
 8005794:	4606      	mov	r6, r0
 8005796:	9b08      	ldr	r3, [sp, #32]
 8005798:	3301      	adds	r3, #1
 800579a:	9308      	str	r3, [sp, #32]
 800579c:	e775      	b.n	800568a <_dtoa_r+0xa0a>
 800579e:	f000 f8d9 	bl	8005954 <__multadd>
 80057a2:	4631      	mov	r1, r6
 80057a4:	4680      	mov	r8, r0
 80057a6:	2300      	movs	r3, #0
 80057a8:	220a      	movs	r2, #10
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 f8d2 	bl	8005954 <__multadd>
 80057b0:	4606      	mov	r6, r0
 80057b2:	e7f0      	b.n	8005796 <_dtoa_r+0xb16>
 80057b4:	f1b9 0f00 	cmp.w	r9, #0
 80057b8:	bfcc      	ite	gt
 80057ba:	464f      	movgt	r7, r9
 80057bc:	2701      	movle	r7, #1
 80057be:	f04f 0800 	mov.w	r8, #0
 80057c2:	9a03      	ldr	r2, [sp, #12]
 80057c4:	4417      	add	r7, r2
 80057c6:	4659      	mov	r1, fp
 80057c8:	2201      	movs	r2, #1
 80057ca:	4628      	mov	r0, r5
 80057cc:	9308      	str	r3, [sp, #32]
 80057ce:	f000 fa6d 	bl	8005cac <__lshift>
 80057d2:	4621      	mov	r1, r4
 80057d4:	4683      	mov	fp, r0
 80057d6:	f000 fad9 	bl	8005d8c <__mcmp>
 80057da:	2800      	cmp	r0, #0
 80057dc:	dcb2      	bgt.n	8005744 <_dtoa_r+0xac4>
 80057de:	d102      	bne.n	80057e6 <_dtoa_r+0xb66>
 80057e0:	9b08      	ldr	r3, [sp, #32]
 80057e2:	07db      	lsls	r3, r3, #31
 80057e4:	d4ae      	bmi.n	8005744 <_dtoa_r+0xac4>
 80057e6:	463b      	mov	r3, r7
 80057e8:	461f      	mov	r7, r3
 80057ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ee:	2a30      	cmp	r2, #48	; 0x30
 80057f0:	d0fa      	beq.n	80057e8 <_dtoa_r+0xb68>
 80057f2:	e6f9      	b.n	80055e8 <_dtoa_r+0x968>
 80057f4:	9a03      	ldr	r2, [sp, #12]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d1a5      	bne.n	8005746 <_dtoa_r+0xac6>
 80057fa:	2331      	movs	r3, #49	; 0x31
 80057fc:	f10a 0a01 	add.w	sl, sl, #1
 8005800:	e779      	b.n	80056f6 <_dtoa_r+0xa76>
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <_dtoa_r+0xbd4>)
 8005804:	f7ff baa8 	b.w	8004d58 <_dtoa_r+0xd8>
 8005808:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800580a:	2b00      	cmp	r3, #0
 800580c:	f47f aa81 	bne.w	8004d12 <_dtoa_r+0x92>
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <_dtoa_r+0xbd8>)
 8005812:	f7ff baa1 	b.w	8004d58 <_dtoa_r+0xd8>
 8005816:	f1b9 0f00 	cmp.w	r9, #0
 800581a:	dc03      	bgt.n	8005824 <_dtoa_r+0xba4>
 800581c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800581e:	2b02      	cmp	r3, #2
 8005820:	f73f aecb 	bgt.w	80055ba <_dtoa_r+0x93a>
 8005824:	9f03      	ldr	r7, [sp, #12]
 8005826:	4621      	mov	r1, r4
 8005828:	4658      	mov	r0, fp
 800582a:	f7ff f99b 	bl	8004b64 <quorem>
 800582e:	9a03      	ldr	r2, [sp, #12]
 8005830:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005834:	f807 3b01 	strb.w	r3, [r7], #1
 8005838:	1aba      	subs	r2, r7, r2
 800583a:	4591      	cmp	r9, r2
 800583c:	ddba      	ble.n	80057b4 <_dtoa_r+0xb34>
 800583e:	4659      	mov	r1, fp
 8005840:	2300      	movs	r3, #0
 8005842:	220a      	movs	r2, #10
 8005844:	4628      	mov	r0, r5
 8005846:	f000 f885 	bl	8005954 <__multadd>
 800584a:	4683      	mov	fp, r0
 800584c:	e7eb      	b.n	8005826 <_dtoa_r+0xba6>
 800584e:	bf00      	nop
 8005850:	0800736b 	.word	0x0800736b
 8005854:	080072c8 	.word	0x080072c8
 8005858:	080072ec 	.word	0x080072ec

0800585c <_localeconv_r>:
 800585c:	4800      	ldr	r0, [pc, #0]	; (8005860 <_localeconv_r+0x4>)
 800585e:	4770      	bx	lr
 8005860:	200001a0 	.word	0x200001a0

08005864 <malloc>:
 8005864:	4b02      	ldr	r3, [pc, #8]	; (8005870 <malloc+0xc>)
 8005866:	4601      	mov	r1, r0
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	f000 bc0f 	b.w	800608c <_malloc_r>
 800586e:	bf00      	nop
 8005870:	2000004c 	.word	0x2000004c

08005874 <memchr>:
 8005874:	4603      	mov	r3, r0
 8005876:	b510      	push	{r4, lr}
 8005878:	b2c9      	uxtb	r1, r1
 800587a:	4402      	add	r2, r0
 800587c:	4293      	cmp	r3, r2
 800587e:	4618      	mov	r0, r3
 8005880:	d101      	bne.n	8005886 <memchr+0x12>
 8005882:	2000      	movs	r0, #0
 8005884:	e003      	b.n	800588e <memchr+0x1a>
 8005886:	7804      	ldrb	r4, [r0, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	428c      	cmp	r4, r1
 800588c:	d1f6      	bne.n	800587c <memchr+0x8>
 800588e:	bd10      	pop	{r4, pc}

08005890 <_Balloc>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005894:	4604      	mov	r4, r0
 8005896:	460d      	mov	r5, r1
 8005898:	b976      	cbnz	r6, 80058b8 <_Balloc+0x28>
 800589a:	2010      	movs	r0, #16
 800589c:	f7ff ffe2 	bl	8005864 <malloc>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6260      	str	r0, [r4, #36]	; 0x24
 80058a4:	b920      	cbnz	r0, 80058b0 <_Balloc+0x20>
 80058a6:	2166      	movs	r1, #102	; 0x66
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <_Balloc+0x78>)
 80058aa:	4818      	ldr	r0, [pc, #96]	; (800590c <_Balloc+0x7c>)
 80058ac:	f000 fdce 	bl	800644c <__assert_func>
 80058b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058b4:	6006      	str	r6, [r0, #0]
 80058b6:	60c6      	str	r6, [r0, #12]
 80058b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058ba:	68f3      	ldr	r3, [r6, #12]
 80058bc:	b183      	cbz	r3, 80058e0 <_Balloc+0x50>
 80058be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058c6:	b9b8      	cbnz	r0, 80058f8 <_Balloc+0x68>
 80058c8:	2101      	movs	r1, #1
 80058ca:	fa01 f605 	lsl.w	r6, r1, r5
 80058ce:	1d72      	adds	r2, r6, #5
 80058d0:	4620      	mov	r0, r4
 80058d2:	0092      	lsls	r2, r2, #2
 80058d4:	f000 fb5e 	bl	8005f94 <_calloc_r>
 80058d8:	b160      	cbz	r0, 80058f4 <_Balloc+0x64>
 80058da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058de:	e00e      	b.n	80058fe <_Balloc+0x6e>
 80058e0:	2221      	movs	r2, #33	; 0x21
 80058e2:	2104      	movs	r1, #4
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fb55 	bl	8005f94 <_calloc_r>
 80058ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058ec:	60f0      	str	r0, [r6, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e4      	bne.n	80058be <_Balloc+0x2e>
 80058f4:	2000      	movs	r0, #0
 80058f6:	bd70      	pop	{r4, r5, r6, pc}
 80058f8:	6802      	ldr	r2, [r0, #0]
 80058fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058fe:	2300      	movs	r3, #0
 8005900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005904:	e7f7      	b.n	80058f6 <_Balloc+0x66>
 8005906:	bf00      	nop
 8005908:	080072f9 	.word	0x080072f9
 800590c:	0800737c 	.word	0x0800737c

08005910 <_Bfree>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005914:	4605      	mov	r5, r0
 8005916:	460c      	mov	r4, r1
 8005918:	b976      	cbnz	r6, 8005938 <_Bfree+0x28>
 800591a:	2010      	movs	r0, #16
 800591c:	f7ff ffa2 	bl	8005864 <malloc>
 8005920:	4602      	mov	r2, r0
 8005922:	6268      	str	r0, [r5, #36]	; 0x24
 8005924:	b920      	cbnz	r0, 8005930 <_Bfree+0x20>
 8005926:	218a      	movs	r1, #138	; 0x8a
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <_Bfree+0x3c>)
 800592a:	4809      	ldr	r0, [pc, #36]	; (8005950 <_Bfree+0x40>)
 800592c:	f000 fd8e 	bl	800644c <__assert_func>
 8005930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005934:	6006      	str	r6, [r0, #0]
 8005936:	60c6      	str	r6, [r0, #12]
 8005938:	b13c      	cbz	r4, 800594a <_Bfree+0x3a>
 800593a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800593c:	6862      	ldr	r2, [r4, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005944:	6021      	str	r1, [r4, #0]
 8005946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800594a:	bd70      	pop	{r4, r5, r6, pc}
 800594c:	080072f9 	.word	0x080072f9
 8005950:	0800737c 	.word	0x0800737c

08005954 <__multadd>:
 8005954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005958:	4607      	mov	r7, r0
 800595a:	460c      	mov	r4, r1
 800595c:	461e      	mov	r6, r3
 800595e:	2000      	movs	r0, #0
 8005960:	690d      	ldr	r5, [r1, #16]
 8005962:	f101 0c14 	add.w	ip, r1, #20
 8005966:	f8dc 3000 	ldr.w	r3, [ip]
 800596a:	3001      	adds	r0, #1
 800596c:	b299      	uxth	r1, r3
 800596e:	fb02 6101 	mla	r1, r2, r1, r6
 8005972:	0c1e      	lsrs	r6, r3, #16
 8005974:	0c0b      	lsrs	r3, r1, #16
 8005976:	fb02 3306 	mla	r3, r2, r6, r3
 800597a:	b289      	uxth	r1, r1
 800597c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005980:	4285      	cmp	r5, r0
 8005982:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005986:	f84c 1b04 	str.w	r1, [ip], #4
 800598a:	dcec      	bgt.n	8005966 <__multadd+0x12>
 800598c:	b30e      	cbz	r6, 80059d2 <__multadd+0x7e>
 800598e:	68a3      	ldr	r3, [r4, #8]
 8005990:	42ab      	cmp	r3, r5
 8005992:	dc19      	bgt.n	80059c8 <__multadd+0x74>
 8005994:	6861      	ldr	r1, [r4, #4]
 8005996:	4638      	mov	r0, r7
 8005998:	3101      	adds	r1, #1
 800599a:	f7ff ff79 	bl	8005890 <_Balloc>
 800599e:	4680      	mov	r8, r0
 80059a0:	b928      	cbnz	r0, 80059ae <__multadd+0x5a>
 80059a2:	4602      	mov	r2, r0
 80059a4:	21b5      	movs	r1, #181	; 0xb5
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <__multadd+0x84>)
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <__multadd+0x88>)
 80059aa:	f000 fd4f 	bl	800644c <__assert_func>
 80059ae:	6922      	ldr	r2, [r4, #16]
 80059b0:	f104 010c 	add.w	r1, r4, #12
 80059b4:	3202      	adds	r2, #2
 80059b6:	0092      	lsls	r2, r2, #2
 80059b8:	300c      	adds	r0, #12
 80059ba:	f7fe fc3d 	bl	8004238 <memcpy>
 80059be:	4621      	mov	r1, r4
 80059c0:	4638      	mov	r0, r7
 80059c2:	f7ff ffa5 	bl	8005910 <_Bfree>
 80059c6:	4644      	mov	r4, r8
 80059c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059cc:	3501      	adds	r5, #1
 80059ce:	615e      	str	r6, [r3, #20]
 80059d0:	6125      	str	r5, [r4, #16]
 80059d2:	4620      	mov	r0, r4
 80059d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d8:	0800736b 	.word	0x0800736b
 80059dc:	0800737c 	.word	0x0800737c

080059e0 <__hi0bits>:
 80059e0:	0c02      	lsrs	r2, r0, #16
 80059e2:	0412      	lsls	r2, r2, #16
 80059e4:	4603      	mov	r3, r0
 80059e6:	b9ca      	cbnz	r2, 8005a1c <__hi0bits+0x3c>
 80059e8:	0403      	lsls	r3, r0, #16
 80059ea:	2010      	movs	r0, #16
 80059ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80059f0:	bf04      	itt	eq
 80059f2:	021b      	lsleq	r3, r3, #8
 80059f4:	3008      	addeq	r0, #8
 80059f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80059fa:	bf04      	itt	eq
 80059fc:	011b      	lsleq	r3, r3, #4
 80059fe:	3004      	addeq	r0, #4
 8005a00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a04:	bf04      	itt	eq
 8005a06:	009b      	lsleq	r3, r3, #2
 8005a08:	3002      	addeq	r0, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	db05      	blt.n	8005a1a <__hi0bits+0x3a>
 8005a0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a12:	f100 0001 	add.w	r0, r0, #1
 8005a16:	bf08      	it	eq
 8005a18:	2020      	moveq	r0, #32
 8005a1a:	4770      	bx	lr
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	e7e5      	b.n	80059ec <__hi0bits+0xc>

08005a20 <__lo0bits>:
 8005a20:	6803      	ldr	r3, [r0, #0]
 8005a22:	4602      	mov	r2, r0
 8005a24:	f013 0007 	ands.w	r0, r3, #7
 8005a28:	d00b      	beq.n	8005a42 <__lo0bits+0x22>
 8005a2a:	07d9      	lsls	r1, r3, #31
 8005a2c:	d421      	bmi.n	8005a72 <__lo0bits+0x52>
 8005a2e:	0798      	lsls	r0, r3, #30
 8005a30:	bf49      	itett	mi
 8005a32:	085b      	lsrmi	r3, r3, #1
 8005a34:	089b      	lsrpl	r3, r3, #2
 8005a36:	2001      	movmi	r0, #1
 8005a38:	6013      	strmi	r3, [r2, #0]
 8005a3a:	bf5c      	itt	pl
 8005a3c:	2002      	movpl	r0, #2
 8005a3e:	6013      	strpl	r3, [r2, #0]
 8005a40:	4770      	bx	lr
 8005a42:	b299      	uxth	r1, r3
 8005a44:	b909      	cbnz	r1, 8005a4a <__lo0bits+0x2a>
 8005a46:	2010      	movs	r0, #16
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	b2d9      	uxtb	r1, r3
 8005a4c:	b909      	cbnz	r1, 8005a52 <__lo0bits+0x32>
 8005a4e:	3008      	adds	r0, #8
 8005a50:	0a1b      	lsrs	r3, r3, #8
 8005a52:	0719      	lsls	r1, r3, #28
 8005a54:	bf04      	itt	eq
 8005a56:	091b      	lsreq	r3, r3, #4
 8005a58:	3004      	addeq	r0, #4
 8005a5a:	0799      	lsls	r1, r3, #30
 8005a5c:	bf04      	itt	eq
 8005a5e:	089b      	lsreq	r3, r3, #2
 8005a60:	3002      	addeq	r0, #2
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d403      	bmi.n	8005a6e <__lo0bits+0x4e>
 8005a66:	085b      	lsrs	r3, r3, #1
 8005a68:	f100 0001 	add.w	r0, r0, #1
 8005a6c:	d003      	beq.n	8005a76 <__lo0bits+0x56>
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	4770      	bx	lr
 8005a72:	2000      	movs	r0, #0
 8005a74:	4770      	bx	lr
 8005a76:	2020      	movs	r0, #32
 8005a78:	4770      	bx	lr
	...

08005a7c <__i2b>:
 8005a7c:	b510      	push	{r4, lr}
 8005a7e:	460c      	mov	r4, r1
 8005a80:	2101      	movs	r1, #1
 8005a82:	f7ff ff05 	bl	8005890 <_Balloc>
 8005a86:	4602      	mov	r2, r0
 8005a88:	b928      	cbnz	r0, 8005a96 <__i2b+0x1a>
 8005a8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a8e:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <__i2b+0x24>)
 8005a90:	4804      	ldr	r0, [pc, #16]	; (8005aa4 <__i2b+0x28>)
 8005a92:	f000 fcdb 	bl	800644c <__assert_func>
 8005a96:	2301      	movs	r3, #1
 8005a98:	6144      	str	r4, [r0, #20]
 8005a9a:	6103      	str	r3, [r0, #16]
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	bf00      	nop
 8005aa0:	0800736b 	.word	0x0800736b
 8005aa4:	0800737c 	.word	0x0800737c

08005aa8 <__multiply>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	4691      	mov	r9, r2
 8005aae:	690a      	ldr	r2, [r1, #16]
 8005ab0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	bfbe      	ittt	lt
 8005aba:	460b      	movlt	r3, r1
 8005abc:	464c      	movlt	r4, r9
 8005abe:	4699      	movlt	r9, r3
 8005ac0:	6927      	ldr	r7, [r4, #16]
 8005ac2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ac6:	68a3      	ldr	r3, [r4, #8]
 8005ac8:	6861      	ldr	r1, [r4, #4]
 8005aca:	eb07 060a 	add.w	r6, r7, sl
 8005ace:	42b3      	cmp	r3, r6
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	bfb8      	it	lt
 8005ad4:	3101      	addlt	r1, #1
 8005ad6:	f7ff fedb 	bl	8005890 <_Balloc>
 8005ada:	b930      	cbnz	r0, 8005aea <__multiply+0x42>
 8005adc:	4602      	mov	r2, r0
 8005ade:	f240 115d 	movw	r1, #349	; 0x15d
 8005ae2:	4b43      	ldr	r3, [pc, #268]	; (8005bf0 <__multiply+0x148>)
 8005ae4:	4843      	ldr	r0, [pc, #268]	; (8005bf4 <__multiply+0x14c>)
 8005ae6:	f000 fcb1 	bl	800644c <__assert_func>
 8005aea:	f100 0514 	add.w	r5, r0, #20
 8005aee:	462b      	mov	r3, r5
 8005af0:	2200      	movs	r2, #0
 8005af2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005af6:	4543      	cmp	r3, r8
 8005af8:	d321      	bcc.n	8005b3e <__multiply+0x96>
 8005afa:	f104 0314 	add.w	r3, r4, #20
 8005afe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b02:	f109 0314 	add.w	r3, r9, #20
 8005b06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b0a:	9202      	str	r2, [sp, #8]
 8005b0c:	1b3a      	subs	r2, r7, r4
 8005b0e:	3a15      	subs	r2, #21
 8005b10:	f022 0203 	bic.w	r2, r2, #3
 8005b14:	3204      	adds	r2, #4
 8005b16:	f104 0115 	add.w	r1, r4, #21
 8005b1a:	428f      	cmp	r7, r1
 8005b1c:	bf38      	it	cc
 8005b1e:	2204      	movcc	r2, #4
 8005b20:	9201      	str	r2, [sp, #4]
 8005b22:	9a02      	ldr	r2, [sp, #8]
 8005b24:	9303      	str	r3, [sp, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d80c      	bhi.n	8005b44 <__multiply+0x9c>
 8005b2a:	2e00      	cmp	r6, #0
 8005b2c:	dd03      	ble.n	8005b36 <__multiply+0x8e>
 8005b2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d059      	beq.n	8005bea <__multiply+0x142>
 8005b36:	6106      	str	r6, [r0, #16]
 8005b38:	b005      	add	sp, #20
 8005b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3e:	f843 2b04 	str.w	r2, [r3], #4
 8005b42:	e7d8      	b.n	8005af6 <__multiply+0x4e>
 8005b44:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b48:	f1ba 0f00 	cmp.w	sl, #0
 8005b4c:	d023      	beq.n	8005b96 <__multiply+0xee>
 8005b4e:	46a9      	mov	r9, r5
 8005b50:	f04f 0c00 	mov.w	ip, #0
 8005b54:	f104 0e14 	add.w	lr, r4, #20
 8005b58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b5c:	f8d9 1000 	ldr.w	r1, [r9]
 8005b60:	fa1f fb82 	uxth.w	fp, r2
 8005b64:	b289      	uxth	r1, r1
 8005b66:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b6a:	4461      	add	r1, ip
 8005b6c:	f8d9 c000 	ldr.w	ip, [r9]
 8005b70:	0c12      	lsrs	r2, r2, #16
 8005b72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005b76:	fb0a c202 	mla	r2, sl, r2, ip
 8005b7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b7e:	b289      	uxth	r1, r1
 8005b80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b84:	4577      	cmp	r7, lr
 8005b86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b8a:	f849 1b04 	str.w	r1, [r9], #4
 8005b8e:	d8e3      	bhi.n	8005b58 <__multiply+0xb0>
 8005b90:	9a01      	ldr	r2, [sp, #4]
 8005b92:	f845 c002 	str.w	ip, [r5, r2]
 8005b96:	9a03      	ldr	r2, [sp, #12]
 8005b98:	3304      	adds	r3, #4
 8005b9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ba2:	d020      	beq.n	8005be6 <__multiply+0x13e>
 8005ba4:	46ae      	mov	lr, r5
 8005ba6:	f04f 0a00 	mov.w	sl, #0
 8005baa:	6829      	ldr	r1, [r5, #0]
 8005bac:	f104 0c14 	add.w	ip, r4, #20
 8005bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8005bb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bb8:	b289      	uxth	r1, r1
 8005bba:	fb09 220b 	mla	r2, r9, fp, r2
 8005bbe:	4492      	add	sl, r2
 8005bc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005bc4:	f84e 1b04 	str.w	r1, [lr], #4
 8005bc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bcc:	f8be 1000 	ldrh.w	r1, [lr]
 8005bd0:	0c12      	lsrs	r2, r2, #16
 8005bd2:	fb09 1102 	mla	r1, r9, r2, r1
 8005bd6:	4567      	cmp	r7, ip
 8005bd8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005be0:	d8e6      	bhi.n	8005bb0 <__multiply+0x108>
 8005be2:	9a01      	ldr	r2, [sp, #4]
 8005be4:	50a9      	str	r1, [r5, r2]
 8005be6:	3504      	adds	r5, #4
 8005be8:	e79b      	b.n	8005b22 <__multiply+0x7a>
 8005bea:	3e01      	subs	r6, #1
 8005bec:	e79d      	b.n	8005b2a <__multiply+0x82>
 8005bee:	bf00      	nop
 8005bf0:	0800736b 	.word	0x0800736b
 8005bf4:	0800737c 	.word	0x0800737c

08005bf8 <__pow5mult>:
 8005bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	4615      	mov	r5, r2
 8005bfe:	f012 0203 	ands.w	r2, r2, #3
 8005c02:	4606      	mov	r6, r0
 8005c04:	460f      	mov	r7, r1
 8005c06:	d007      	beq.n	8005c18 <__pow5mult+0x20>
 8005c08:	4c25      	ldr	r4, [pc, #148]	; (8005ca0 <__pow5mult+0xa8>)
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c12:	f7ff fe9f 	bl	8005954 <__multadd>
 8005c16:	4607      	mov	r7, r0
 8005c18:	10ad      	asrs	r5, r5, #2
 8005c1a:	d03d      	beq.n	8005c98 <__pow5mult+0xa0>
 8005c1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c1e:	b97c      	cbnz	r4, 8005c40 <__pow5mult+0x48>
 8005c20:	2010      	movs	r0, #16
 8005c22:	f7ff fe1f 	bl	8005864 <malloc>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6270      	str	r0, [r6, #36]	; 0x24
 8005c2a:	b928      	cbnz	r0, 8005c38 <__pow5mult+0x40>
 8005c2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c30:	4b1c      	ldr	r3, [pc, #112]	; (8005ca4 <__pow5mult+0xac>)
 8005c32:	481d      	ldr	r0, [pc, #116]	; (8005ca8 <__pow5mult+0xb0>)
 8005c34:	f000 fc0a 	bl	800644c <__assert_func>
 8005c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c3c:	6004      	str	r4, [r0, #0]
 8005c3e:	60c4      	str	r4, [r0, #12]
 8005c40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c48:	b94c      	cbnz	r4, 8005c5e <__pow5mult+0x66>
 8005c4a:	f240 2171 	movw	r1, #625	; 0x271
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff ff14 	bl	8005a7c <__i2b>
 8005c54:	2300      	movs	r3, #0
 8005c56:	4604      	mov	r4, r0
 8005c58:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c5c:	6003      	str	r3, [r0, #0]
 8005c5e:	f04f 0900 	mov.w	r9, #0
 8005c62:	07eb      	lsls	r3, r5, #31
 8005c64:	d50a      	bpl.n	8005c7c <__pow5mult+0x84>
 8005c66:	4639      	mov	r1, r7
 8005c68:	4622      	mov	r2, r4
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f7ff ff1c 	bl	8005aa8 <__multiply>
 8005c70:	4680      	mov	r8, r0
 8005c72:	4639      	mov	r1, r7
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff fe4b 	bl	8005910 <_Bfree>
 8005c7a:	4647      	mov	r7, r8
 8005c7c:	106d      	asrs	r5, r5, #1
 8005c7e:	d00b      	beq.n	8005c98 <__pow5mult+0xa0>
 8005c80:	6820      	ldr	r0, [r4, #0]
 8005c82:	b938      	cbnz	r0, 8005c94 <__pow5mult+0x9c>
 8005c84:	4622      	mov	r2, r4
 8005c86:	4621      	mov	r1, r4
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7ff ff0d 	bl	8005aa8 <__multiply>
 8005c8e:	6020      	str	r0, [r4, #0]
 8005c90:	f8c0 9000 	str.w	r9, [r0]
 8005c94:	4604      	mov	r4, r0
 8005c96:	e7e4      	b.n	8005c62 <__pow5mult+0x6a>
 8005c98:	4638      	mov	r0, r7
 8005c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c9e:	bf00      	nop
 8005ca0:	080074c8 	.word	0x080074c8
 8005ca4:	080072f9 	.word	0x080072f9
 8005ca8:	0800737c 	.word	0x0800737c

08005cac <__lshift>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	4691      	mov	r9, r2
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	6849      	ldr	r1, [r1, #4]
 8005cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cc4:	f108 0601 	add.w	r6, r8, #1
 8005cc8:	42b3      	cmp	r3, r6
 8005cca:	db0b      	blt.n	8005ce4 <__lshift+0x38>
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff fddf 	bl	8005890 <_Balloc>
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	b948      	cbnz	r0, 8005cea <__lshift+0x3e>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cdc:	4b29      	ldr	r3, [pc, #164]	; (8005d84 <__lshift+0xd8>)
 8005cde:	482a      	ldr	r0, [pc, #168]	; (8005d88 <__lshift+0xdc>)
 8005ce0:	f000 fbb4 	bl	800644c <__assert_func>
 8005ce4:	3101      	adds	r1, #1
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	e7ee      	b.n	8005cc8 <__lshift+0x1c>
 8005cea:	2300      	movs	r3, #0
 8005cec:	f100 0114 	add.w	r1, r0, #20
 8005cf0:	f100 0210 	add.w	r2, r0, #16
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	4553      	cmp	r3, sl
 8005cf8:	db37      	blt.n	8005d6a <__lshift+0xbe>
 8005cfa:	6920      	ldr	r0, [r4, #16]
 8005cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d00:	f104 0314 	add.w	r3, r4, #20
 8005d04:	f019 091f 	ands.w	r9, r9, #31
 8005d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d10:	d02f      	beq.n	8005d72 <__lshift+0xc6>
 8005d12:	468a      	mov	sl, r1
 8005d14:	f04f 0c00 	mov.w	ip, #0
 8005d18:	f1c9 0e20 	rsb	lr, r9, #32
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	fa02 f209 	lsl.w	r2, r2, r9
 8005d22:	ea42 020c 	orr.w	r2, r2, ip
 8005d26:	f84a 2b04 	str.w	r2, [sl], #4
 8005d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d2e:	4298      	cmp	r0, r3
 8005d30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d34:	d8f2      	bhi.n	8005d1c <__lshift+0x70>
 8005d36:	1b03      	subs	r3, r0, r4
 8005d38:	3b15      	subs	r3, #21
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	3304      	adds	r3, #4
 8005d40:	f104 0215 	add.w	r2, r4, #21
 8005d44:	4290      	cmp	r0, r2
 8005d46:	bf38      	it	cc
 8005d48:	2304      	movcc	r3, #4
 8005d4a:	f841 c003 	str.w	ip, [r1, r3]
 8005d4e:	f1bc 0f00 	cmp.w	ip, #0
 8005d52:	d001      	beq.n	8005d58 <__lshift+0xac>
 8005d54:	f108 0602 	add.w	r6, r8, #2
 8005d58:	3e01      	subs	r6, #1
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	612e      	str	r6, [r5, #16]
 8005d60:	f7ff fdd6 	bl	8005910 <_Bfree>
 8005d64:	4628      	mov	r0, r5
 8005d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d6e:	3301      	adds	r3, #1
 8005d70:	e7c1      	b.n	8005cf6 <__lshift+0x4a>
 8005d72:	3904      	subs	r1, #4
 8005d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d78:	4298      	cmp	r0, r3
 8005d7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d7e:	d8f9      	bhi.n	8005d74 <__lshift+0xc8>
 8005d80:	e7ea      	b.n	8005d58 <__lshift+0xac>
 8005d82:	bf00      	nop
 8005d84:	0800736b 	.word	0x0800736b
 8005d88:	0800737c 	.word	0x0800737c

08005d8c <__mcmp>:
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	690a      	ldr	r2, [r1, #16]
 8005d90:	6900      	ldr	r0, [r0, #16]
 8005d92:	b530      	push	{r4, r5, lr}
 8005d94:	1a80      	subs	r0, r0, r2
 8005d96:	d10d      	bne.n	8005db4 <__mcmp+0x28>
 8005d98:	3314      	adds	r3, #20
 8005d9a:	3114      	adds	r1, #20
 8005d9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005da0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005da4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005da8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005dac:	4295      	cmp	r5, r2
 8005dae:	d002      	beq.n	8005db6 <__mcmp+0x2a>
 8005db0:	d304      	bcc.n	8005dbc <__mcmp+0x30>
 8005db2:	2001      	movs	r0, #1
 8005db4:	bd30      	pop	{r4, r5, pc}
 8005db6:	42a3      	cmp	r3, r4
 8005db8:	d3f4      	bcc.n	8005da4 <__mcmp+0x18>
 8005dba:	e7fb      	b.n	8005db4 <__mcmp+0x28>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	e7f8      	b.n	8005db4 <__mcmp+0x28>
	...

08005dc4 <__mdiff>:
 8005dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc8:	460d      	mov	r5, r1
 8005dca:	4607      	mov	r7, r0
 8005dcc:	4611      	mov	r1, r2
 8005dce:	4628      	mov	r0, r5
 8005dd0:	4614      	mov	r4, r2
 8005dd2:	f7ff ffdb 	bl	8005d8c <__mcmp>
 8005dd6:	1e06      	subs	r6, r0, #0
 8005dd8:	d111      	bne.n	8005dfe <__mdiff+0x3a>
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4638      	mov	r0, r7
 8005dde:	f7ff fd57 	bl	8005890 <_Balloc>
 8005de2:	4602      	mov	r2, r0
 8005de4:	b928      	cbnz	r0, 8005df2 <__mdiff+0x2e>
 8005de6:	f240 2132 	movw	r1, #562	; 0x232
 8005dea:	4b3a      	ldr	r3, [pc, #232]	; (8005ed4 <__mdiff+0x110>)
 8005dec:	483a      	ldr	r0, [pc, #232]	; (8005ed8 <__mdiff+0x114>)
 8005dee:	f000 fb2d 	bl	800644c <__assert_func>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005df8:	4610      	mov	r0, r2
 8005dfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfe:	bfa4      	itt	ge
 8005e00:	4623      	movge	r3, r4
 8005e02:	462c      	movge	r4, r5
 8005e04:	4638      	mov	r0, r7
 8005e06:	6861      	ldr	r1, [r4, #4]
 8005e08:	bfa6      	itte	ge
 8005e0a:	461d      	movge	r5, r3
 8005e0c:	2600      	movge	r6, #0
 8005e0e:	2601      	movlt	r6, #1
 8005e10:	f7ff fd3e 	bl	8005890 <_Balloc>
 8005e14:	4602      	mov	r2, r0
 8005e16:	b918      	cbnz	r0, 8005e20 <__mdiff+0x5c>
 8005e18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e1c:	4b2d      	ldr	r3, [pc, #180]	; (8005ed4 <__mdiff+0x110>)
 8005e1e:	e7e5      	b.n	8005dec <__mdiff+0x28>
 8005e20:	f102 0814 	add.w	r8, r2, #20
 8005e24:	46c2      	mov	sl, r8
 8005e26:	f04f 0c00 	mov.w	ip, #0
 8005e2a:	6927      	ldr	r7, [r4, #16]
 8005e2c:	60c6      	str	r6, [r0, #12]
 8005e2e:	692e      	ldr	r6, [r5, #16]
 8005e30:	f104 0014 	add.w	r0, r4, #20
 8005e34:	f105 0914 	add.w	r9, r5, #20
 8005e38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e40:	3410      	adds	r4, #16
 8005e42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e46:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e4a:	fa1f f18b 	uxth.w	r1, fp
 8005e4e:	448c      	add	ip, r1
 8005e50:	b299      	uxth	r1, r3
 8005e52:	0c1b      	lsrs	r3, r3, #16
 8005e54:	ebac 0101 	sub.w	r1, ip, r1
 8005e58:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e5c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e60:	b289      	uxth	r1, r1
 8005e62:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e66:	454e      	cmp	r6, r9
 8005e68:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005e6c:	f84a 3b04 	str.w	r3, [sl], #4
 8005e70:	d8e7      	bhi.n	8005e42 <__mdiff+0x7e>
 8005e72:	1b73      	subs	r3, r6, r5
 8005e74:	3b15      	subs	r3, #21
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	3515      	adds	r5, #21
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	42ae      	cmp	r6, r5
 8005e80:	bf38      	it	cc
 8005e82:	2304      	movcc	r3, #4
 8005e84:	4418      	add	r0, r3
 8005e86:	4443      	add	r3, r8
 8005e88:	461e      	mov	r6, r3
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	4575      	cmp	r5, lr
 8005e8e:	d30e      	bcc.n	8005eae <__mdiff+0xea>
 8005e90:	f10e 0103 	add.w	r1, lr, #3
 8005e94:	1a09      	subs	r1, r1, r0
 8005e96:	f021 0103 	bic.w	r1, r1, #3
 8005e9a:	3803      	subs	r0, #3
 8005e9c:	4586      	cmp	lr, r0
 8005e9e:	bf38      	it	cc
 8005ea0:	2100      	movcc	r1, #0
 8005ea2:	4419      	add	r1, r3
 8005ea4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ea8:	b18b      	cbz	r3, 8005ece <__mdiff+0x10a>
 8005eaa:	6117      	str	r7, [r2, #16]
 8005eac:	e7a4      	b.n	8005df8 <__mdiff+0x34>
 8005eae:	f855 8b04 	ldr.w	r8, [r5], #4
 8005eb2:	fa1f f188 	uxth.w	r1, r8
 8005eb6:	4461      	add	r1, ip
 8005eb8:	140c      	asrs	r4, r1, #16
 8005eba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ebe:	b289      	uxth	r1, r1
 8005ec0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ec4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005ec8:	f846 1b04 	str.w	r1, [r6], #4
 8005ecc:	e7de      	b.n	8005e8c <__mdiff+0xc8>
 8005ece:	3f01      	subs	r7, #1
 8005ed0:	e7e8      	b.n	8005ea4 <__mdiff+0xe0>
 8005ed2:	bf00      	nop
 8005ed4:	0800736b 	.word	0x0800736b
 8005ed8:	0800737c 	.word	0x0800737c

08005edc <__d2b>:
 8005edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ee6:	4690      	mov	r8, r2
 8005ee8:	461d      	mov	r5, r3
 8005eea:	f7ff fcd1 	bl	8005890 <_Balloc>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	b930      	cbnz	r0, 8005f00 <__d2b+0x24>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f240 310a 	movw	r1, #778	; 0x30a
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <__d2b+0xb0>)
 8005efa:	4825      	ldr	r0, [pc, #148]	; (8005f90 <__d2b+0xb4>)
 8005efc:	f000 faa6 	bl	800644c <__assert_func>
 8005f00:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f04:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f08:	bb2d      	cbnz	r5, 8005f56 <__d2b+0x7a>
 8005f0a:	9301      	str	r3, [sp, #4]
 8005f0c:	f1b8 0300 	subs.w	r3, r8, #0
 8005f10:	d026      	beq.n	8005f60 <__d2b+0x84>
 8005f12:	4668      	mov	r0, sp
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	f7ff fd83 	bl	8005a20 <__lo0bits>
 8005f1a:	9900      	ldr	r1, [sp, #0]
 8005f1c:	b1f0      	cbz	r0, 8005f5c <__d2b+0x80>
 8005f1e:	9a01      	ldr	r2, [sp, #4]
 8005f20:	f1c0 0320 	rsb	r3, r0, #32
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	40c2      	lsrs	r2, r0
 8005f2c:	6163      	str	r3, [r4, #20]
 8005f2e:	9201      	str	r2, [sp, #4]
 8005f30:	9b01      	ldr	r3, [sp, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	bf14      	ite	ne
 8005f36:	2102      	movne	r1, #2
 8005f38:	2101      	moveq	r1, #1
 8005f3a:	61a3      	str	r3, [r4, #24]
 8005f3c:	6121      	str	r1, [r4, #16]
 8005f3e:	b1c5      	cbz	r5, 8005f72 <__d2b+0x96>
 8005f40:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f44:	4405      	add	r5, r0
 8005f46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f4a:	603d      	str	r5, [r7, #0]
 8005f4c:	6030      	str	r0, [r6, #0]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	b002      	add	sp, #8
 8005f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f5a:	e7d6      	b.n	8005f0a <__d2b+0x2e>
 8005f5c:	6161      	str	r1, [r4, #20]
 8005f5e:	e7e7      	b.n	8005f30 <__d2b+0x54>
 8005f60:	a801      	add	r0, sp, #4
 8005f62:	f7ff fd5d 	bl	8005a20 <__lo0bits>
 8005f66:	2101      	movs	r1, #1
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	6121      	str	r1, [r4, #16]
 8005f6c:	6163      	str	r3, [r4, #20]
 8005f6e:	3020      	adds	r0, #32
 8005f70:	e7e5      	b.n	8005f3e <__d2b+0x62>
 8005f72:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005f76:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f7a:	6038      	str	r0, [r7, #0]
 8005f7c:	6918      	ldr	r0, [r3, #16]
 8005f7e:	f7ff fd2f 	bl	80059e0 <__hi0bits>
 8005f82:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005f86:	6031      	str	r1, [r6, #0]
 8005f88:	e7e1      	b.n	8005f4e <__d2b+0x72>
 8005f8a:	bf00      	nop
 8005f8c:	0800736b 	.word	0x0800736b
 8005f90:	0800737c 	.word	0x0800737c

08005f94 <_calloc_r>:
 8005f94:	b570      	push	{r4, r5, r6, lr}
 8005f96:	fba1 5402 	umull	r5, r4, r1, r2
 8005f9a:	b934      	cbnz	r4, 8005faa <_calloc_r+0x16>
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	f000 f875 	bl	800608c <_malloc_r>
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	b928      	cbnz	r0, 8005fb2 <_calloc_r+0x1e>
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	bd70      	pop	{r4, r5, r6, pc}
 8005faa:	220c      	movs	r2, #12
 8005fac:	2600      	movs	r6, #0
 8005fae:	6002      	str	r2, [r0, #0]
 8005fb0:	e7f9      	b.n	8005fa6 <_calloc_r+0x12>
 8005fb2:	462a      	mov	r2, r5
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	f7fe f94d 	bl	8004254 <memset>
 8005fba:	e7f4      	b.n	8005fa6 <_calloc_r+0x12>

08005fbc <_free_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	d040      	beq.n	8006046 <_free_r+0x8a>
 8005fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc8:	1f0c      	subs	r4, r1, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	bfb8      	it	lt
 8005fce:	18e4      	addlt	r4, r4, r3
 8005fd0:	f000 fa98 	bl	8006504 <__malloc_lock>
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <_free_r+0x8c>)
 8005fd6:	6813      	ldr	r3, [r2, #0]
 8005fd8:	b933      	cbnz	r3, 8005fe8 <_free_r+0x2c>
 8005fda:	6063      	str	r3, [r4, #4]
 8005fdc:	6014      	str	r4, [r2, #0]
 8005fde:	4628      	mov	r0, r5
 8005fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe4:	f000 ba94 	b.w	8006510 <__malloc_unlock>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d908      	bls.n	8005ffe <_free_r+0x42>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf01      	itttt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	1809      	addeq	r1, r1, r0
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	e7ed      	b.n	8005fda <_free_r+0x1e>
 8005ffe:	461a      	mov	r2, r3
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	b10b      	cbz	r3, 8006008 <_free_r+0x4c>
 8006004:	42a3      	cmp	r3, r4
 8006006:	d9fa      	bls.n	8005ffe <_free_r+0x42>
 8006008:	6811      	ldr	r1, [r2, #0]
 800600a:	1850      	adds	r0, r2, r1
 800600c:	42a0      	cmp	r0, r4
 800600e:	d10b      	bne.n	8006028 <_free_r+0x6c>
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	4401      	add	r1, r0
 8006014:	1850      	adds	r0, r2, r1
 8006016:	4283      	cmp	r3, r0
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	d1e0      	bne.n	8005fde <_free_r+0x22>
 800601c:	6818      	ldr	r0, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4401      	add	r1, r0
 8006022:	6011      	str	r1, [r2, #0]
 8006024:	6053      	str	r3, [r2, #4]
 8006026:	e7da      	b.n	8005fde <_free_r+0x22>
 8006028:	d902      	bls.n	8006030 <_free_r+0x74>
 800602a:	230c      	movs	r3, #12
 800602c:	602b      	str	r3, [r5, #0]
 800602e:	e7d6      	b.n	8005fde <_free_r+0x22>
 8006030:	6820      	ldr	r0, [r4, #0]
 8006032:	1821      	adds	r1, r4, r0
 8006034:	428b      	cmp	r3, r1
 8006036:	bf01      	itttt	eq
 8006038:	6819      	ldreq	r1, [r3, #0]
 800603a:	685b      	ldreq	r3, [r3, #4]
 800603c:	1809      	addeq	r1, r1, r0
 800603e:	6021      	streq	r1, [r4, #0]
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6054      	str	r4, [r2, #4]
 8006044:	e7cb      	b.n	8005fde <_free_r+0x22>
 8006046:	bd38      	pop	{r3, r4, r5, pc}
 8006048:	20001798 	.word	0x20001798

0800604c <sbrk_aligned>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	4e0e      	ldr	r6, [pc, #56]	; (8006088 <sbrk_aligned+0x3c>)
 8006050:	460c      	mov	r4, r1
 8006052:	6831      	ldr	r1, [r6, #0]
 8006054:	4605      	mov	r5, r0
 8006056:	b911      	cbnz	r1, 800605e <sbrk_aligned+0x12>
 8006058:	f000 f9e8 	bl	800642c <_sbrk_r>
 800605c:	6030      	str	r0, [r6, #0]
 800605e:	4621      	mov	r1, r4
 8006060:	4628      	mov	r0, r5
 8006062:	f000 f9e3 	bl	800642c <_sbrk_r>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d00a      	beq.n	8006080 <sbrk_aligned+0x34>
 800606a:	1cc4      	adds	r4, r0, #3
 800606c:	f024 0403 	bic.w	r4, r4, #3
 8006070:	42a0      	cmp	r0, r4
 8006072:	d007      	beq.n	8006084 <sbrk_aligned+0x38>
 8006074:	1a21      	subs	r1, r4, r0
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f9d8 	bl	800642c <_sbrk_r>
 800607c:	3001      	adds	r0, #1
 800607e:	d101      	bne.n	8006084 <sbrk_aligned+0x38>
 8006080:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006084:	4620      	mov	r0, r4
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	2000179c 	.word	0x2000179c

0800608c <_malloc_r>:
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	1ccd      	adds	r5, r1, #3
 8006092:	f025 0503 	bic.w	r5, r5, #3
 8006096:	3508      	adds	r5, #8
 8006098:	2d0c      	cmp	r5, #12
 800609a:	bf38      	it	cc
 800609c:	250c      	movcc	r5, #12
 800609e:	2d00      	cmp	r5, #0
 80060a0:	4607      	mov	r7, r0
 80060a2:	db01      	blt.n	80060a8 <_malloc_r+0x1c>
 80060a4:	42a9      	cmp	r1, r5
 80060a6:	d905      	bls.n	80060b4 <_malloc_r+0x28>
 80060a8:	230c      	movs	r3, #12
 80060aa:	2600      	movs	r6, #0
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	4630      	mov	r0, r6
 80060b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b4:	4e2e      	ldr	r6, [pc, #184]	; (8006170 <_malloc_r+0xe4>)
 80060b6:	f000 fa25 	bl	8006504 <__malloc_lock>
 80060ba:	6833      	ldr	r3, [r6, #0]
 80060bc:	461c      	mov	r4, r3
 80060be:	bb34      	cbnz	r4, 800610e <_malloc_r+0x82>
 80060c0:	4629      	mov	r1, r5
 80060c2:	4638      	mov	r0, r7
 80060c4:	f7ff ffc2 	bl	800604c <sbrk_aligned>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	4604      	mov	r4, r0
 80060cc:	d14d      	bne.n	800616a <_malloc_r+0xde>
 80060ce:	6834      	ldr	r4, [r6, #0]
 80060d0:	4626      	mov	r6, r4
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	d140      	bne.n	8006158 <_malloc_r+0xcc>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	4631      	mov	r1, r6
 80060da:	4638      	mov	r0, r7
 80060dc:	eb04 0803 	add.w	r8, r4, r3
 80060e0:	f000 f9a4 	bl	800642c <_sbrk_r>
 80060e4:	4580      	cmp	r8, r0
 80060e6:	d13a      	bne.n	800615e <_malloc_r+0xd2>
 80060e8:	6821      	ldr	r1, [r4, #0]
 80060ea:	3503      	adds	r5, #3
 80060ec:	1a6d      	subs	r5, r5, r1
 80060ee:	f025 0503 	bic.w	r5, r5, #3
 80060f2:	3508      	adds	r5, #8
 80060f4:	2d0c      	cmp	r5, #12
 80060f6:	bf38      	it	cc
 80060f8:	250c      	movcc	r5, #12
 80060fa:	4638      	mov	r0, r7
 80060fc:	4629      	mov	r1, r5
 80060fe:	f7ff ffa5 	bl	800604c <sbrk_aligned>
 8006102:	3001      	adds	r0, #1
 8006104:	d02b      	beq.n	800615e <_malloc_r+0xd2>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	442b      	add	r3, r5
 800610a:	6023      	str	r3, [r4, #0]
 800610c:	e00e      	b.n	800612c <_malloc_r+0xa0>
 800610e:	6822      	ldr	r2, [r4, #0]
 8006110:	1b52      	subs	r2, r2, r5
 8006112:	d41e      	bmi.n	8006152 <_malloc_r+0xc6>
 8006114:	2a0b      	cmp	r2, #11
 8006116:	d916      	bls.n	8006146 <_malloc_r+0xba>
 8006118:	1961      	adds	r1, r4, r5
 800611a:	42a3      	cmp	r3, r4
 800611c:	6025      	str	r5, [r4, #0]
 800611e:	bf18      	it	ne
 8006120:	6059      	strne	r1, [r3, #4]
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	bf08      	it	eq
 8006126:	6031      	streq	r1, [r6, #0]
 8006128:	5162      	str	r2, [r4, r5]
 800612a:	604b      	str	r3, [r1, #4]
 800612c:	4638      	mov	r0, r7
 800612e:	f104 060b 	add.w	r6, r4, #11
 8006132:	f000 f9ed 	bl	8006510 <__malloc_unlock>
 8006136:	f026 0607 	bic.w	r6, r6, #7
 800613a:	1d23      	adds	r3, r4, #4
 800613c:	1af2      	subs	r2, r6, r3
 800613e:	d0b6      	beq.n	80060ae <_malloc_r+0x22>
 8006140:	1b9b      	subs	r3, r3, r6
 8006142:	50a3      	str	r3, [r4, r2]
 8006144:	e7b3      	b.n	80060ae <_malloc_r+0x22>
 8006146:	6862      	ldr	r2, [r4, #4]
 8006148:	42a3      	cmp	r3, r4
 800614a:	bf0c      	ite	eq
 800614c:	6032      	streq	r2, [r6, #0]
 800614e:	605a      	strne	r2, [r3, #4]
 8006150:	e7ec      	b.n	800612c <_malloc_r+0xa0>
 8006152:	4623      	mov	r3, r4
 8006154:	6864      	ldr	r4, [r4, #4]
 8006156:	e7b2      	b.n	80060be <_malloc_r+0x32>
 8006158:	4634      	mov	r4, r6
 800615a:	6876      	ldr	r6, [r6, #4]
 800615c:	e7b9      	b.n	80060d2 <_malloc_r+0x46>
 800615e:	230c      	movs	r3, #12
 8006160:	4638      	mov	r0, r7
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	f000 f9d4 	bl	8006510 <__malloc_unlock>
 8006168:	e7a1      	b.n	80060ae <_malloc_r+0x22>
 800616a:	6025      	str	r5, [r4, #0]
 800616c:	e7de      	b.n	800612c <_malloc_r+0xa0>
 800616e:	bf00      	nop
 8006170:	20001798 	.word	0x20001798

08006174 <__ssputs_r>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	688e      	ldr	r6, [r1, #8]
 800617a:	4682      	mov	sl, r0
 800617c:	429e      	cmp	r6, r3
 800617e:	460c      	mov	r4, r1
 8006180:	4690      	mov	r8, r2
 8006182:	461f      	mov	r7, r3
 8006184:	d838      	bhi.n	80061f8 <__ssputs_r+0x84>
 8006186:	898a      	ldrh	r2, [r1, #12]
 8006188:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800618c:	d032      	beq.n	80061f4 <__ssputs_r+0x80>
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	6909      	ldr	r1, [r1, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	eba5 0901 	sub.w	r9, r5, r1
 8006198:	6965      	ldr	r5, [r4, #20]
 800619a:	444b      	add	r3, r9
 800619c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061a4:	106d      	asrs	r5, r5, #1
 80061a6:	429d      	cmp	r5, r3
 80061a8:	bf38      	it	cc
 80061aa:	461d      	movcc	r5, r3
 80061ac:	0553      	lsls	r3, r2, #21
 80061ae:	d531      	bpl.n	8006214 <__ssputs_r+0xa0>
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7ff ff6b 	bl	800608c <_malloc_r>
 80061b6:	4606      	mov	r6, r0
 80061b8:	b950      	cbnz	r0, 80061d0 <__ssputs_r+0x5c>
 80061ba:	230c      	movs	r3, #12
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061c0:	f8ca 3000 	str.w	r3, [sl]
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d0:	464a      	mov	r2, r9
 80061d2:	6921      	ldr	r1, [r4, #16]
 80061d4:	f7fe f830 	bl	8004238 <memcpy>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	6126      	str	r6, [r4, #16]
 80061e6:	444e      	add	r6, r9
 80061e8:	6026      	str	r6, [r4, #0]
 80061ea:	463e      	mov	r6, r7
 80061ec:	6165      	str	r5, [r4, #20]
 80061ee:	eba5 0509 	sub.w	r5, r5, r9
 80061f2:	60a5      	str	r5, [r4, #8]
 80061f4:	42be      	cmp	r6, r7
 80061f6:	d900      	bls.n	80061fa <__ssputs_r+0x86>
 80061f8:	463e      	mov	r6, r7
 80061fa:	4632      	mov	r2, r6
 80061fc:	4641      	mov	r1, r8
 80061fe:	6820      	ldr	r0, [r4, #0]
 8006200:	f000 f966 	bl	80064d0 <memmove>
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	2000      	movs	r0, #0
 8006208:	1b9b      	subs	r3, r3, r6
 800620a:	60a3      	str	r3, [r4, #8]
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	4433      	add	r3, r6
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	e7db      	b.n	80061cc <__ssputs_r+0x58>
 8006214:	462a      	mov	r2, r5
 8006216:	f000 f981 	bl	800651c <_realloc_r>
 800621a:	4606      	mov	r6, r0
 800621c:	2800      	cmp	r0, #0
 800621e:	d1e1      	bne.n	80061e4 <__ssputs_r+0x70>
 8006220:	4650      	mov	r0, sl
 8006222:	6921      	ldr	r1, [r4, #16]
 8006224:	f7ff feca 	bl	8005fbc <_free_r>
 8006228:	e7c7      	b.n	80061ba <__ssputs_r+0x46>
	...

0800622c <_svfiprintf_r>:
 800622c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	4698      	mov	r8, r3
 8006232:	898b      	ldrh	r3, [r1, #12]
 8006234:	4607      	mov	r7, r0
 8006236:	061b      	lsls	r3, r3, #24
 8006238:	460d      	mov	r5, r1
 800623a:	4614      	mov	r4, r2
 800623c:	b09d      	sub	sp, #116	; 0x74
 800623e:	d50e      	bpl.n	800625e <_svfiprintf_r+0x32>
 8006240:	690b      	ldr	r3, [r1, #16]
 8006242:	b963      	cbnz	r3, 800625e <_svfiprintf_r+0x32>
 8006244:	2140      	movs	r1, #64	; 0x40
 8006246:	f7ff ff21 	bl	800608c <_malloc_r>
 800624a:	6028      	str	r0, [r5, #0]
 800624c:	6128      	str	r0, [r5, #16]
 800624e:	b920      	cbnz	r0, 800625a <_svfiprintf_r+0x2e>
 8006250:	230c      	movs	r3, #12
 8006252:	603b      	str	r3, [r7, #0]
 8006254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006258:	e0d1      	b.n	80063fe <_svfiprintf_r+0x1d2>
 800625a:	2340      	movs	r3, #64	; 0x40
 800625c:	616b      	str	r3, [r5, #20]
 800625e:	2300      	movs	r3, #0
 8006260:	9309      	str	r3, [sp, #36]	; 0x24
 8006262:	2320      	movs	r3, #32
 8006264:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006268:	2330      	movs	r3, #48	; 0x30
 800626a:	f04f 0901 	mov.w	r9, #1
 800626e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006272:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006418 <_svfiprintf_r+0x1ec>
 8006276:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800627a:	4623      	mov	r3, r4
 800627c:	469a      	mov	sl, r3
 800627e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006282:	b10a      	cbz	r2, 8006288 <_svfiprintf_r+0x5c>
 8006284:	2a25      	cmp	r2, #37	; 0x25
 8006286:	d1f9      	bne.n	800627c <_svfiprintf_r+0x50>
 8006288:	ebba 0b04 	subs.w	fp, sl, r4
 800628c:	d00b      	beq.n	80062a6 <_svfiprintf_r+0x7a>
 800628e:	465b      	mov	r3, fp
 8006290:	4622      	mov	r2, r4
 8006292:	4629      	mov	r1, r5
 8006294:	4638      	mov	r0, r7
 8006296:	f7ff ff6d 	bl	8006174 <__ssputs_r>
 800629a:	3001      	adds	r0, #1
 800629c:	f000 80aa 	beq.w	80063f4 <_svfiprintf_r+0x1c8>
 80062a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062a2:	445a      	add	r2, fp
 80062a4:	9209      	str	r2, [sp, #36]	; 0x24
 80062a6:	f89a 3000 	ldrb.w	r3, [sl]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80a2 	beq.w	80063f4 <_svfiprintf_r+0x1c8>
 80062b0:	2300      	movs	r3, #0
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062ba:	f10a 0a01 	add.w	sl, sl, #1
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	9307      	str	r3, [sp, #28]
 80062c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062c6:	931a      	str	r3, [sp, #104]	; 0x68
 80062c8:	4654      	mov	r4, sl
 80062ca:	2205      	movs	r2, #5
 80062cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062d0:	4851      	ldr	r0, [pc, #324]	; (8006418 <_svfiprintf_r+0x1ec>)
 80062d2:	f7ff facf 	bl	8005874 <memchr>
 80062d6:	9a04      	ldr	r2, [sp, #16]
 80062d8:	b9d8      	cbnz	r0, 8006312 <_svfiprintf_r+0xe6>
 80062da:	06d0      	lsls	r0, r2, #27
 80062dc:	bf44      	itt	mi
 80062de:	2320      	movmi	r3, #32
 80062e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062e4:	0711      	lsls	r1, r2, #28
 80062e6:	bf44      	itt	mi
 80062e8:	232b      	movmi	r3, #43	; 0x2b
 80062ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062ee:	f89a 3000 	ldrb.w	r3, [sl]
 80062f2:	2b2a      	cmp	r3, #42	; 0x2a
 80062f4:	d015      	beq.n	8006322 <_svfiprintf_r+0xf6>
 80062f6:	4654      	mov	r4, sl
 80062f8:	2000      	movs	r0, #0
 80062fa:	f04f 0c0a 	mov.w	ip, #10
 80062fe:	9a07      	ldr	r2, [sp, #28]
 8006300:	4621      	mov	r1, r4
 8006302:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006306:	3b30      	subs	r3, #48	; 0x30
 8006308:	2b09      	cmp	r3, #9
 800630a:	d94e      	bls.n	80063aa <_svfiprintf_r+0x17e>
 800630c:	b1b0      	cbz	r0, 800633c <_svfiprintf_r+0x110>
 800630e:	9207      	str	r2, [sp, #28]
 8006310:	e014      	b.n	800633c <_svfiprintf_r+0x110>
 8006312:	eba0 0308 	sub.w	r3, r0, r8
 8006316:	fa09 f303 	lsl.w	r3, r9, r3
 800631a:	4313      	orrs	r3, r2
 800631c:	46a2      	mov	sl, r4
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	e7d2      	b.n	80062c8 <_svfiprintf_r+0x9c>
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	9103      	str	r1, [sp, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	bfbb      	ittet	lt
 800632e:	425b      	neglt	r3, r3
 8006330:	f042 0202 	orrlt.w	r2, r2, #2
 8006334:	9307      	strge	r3, [sp, #28]
 8006336:	9307      	strlt	r3, [sp, #28]
 8006338:	bfb8      	it	lt
 800633a:	9204      	strlt	r2, [sp, #16]
 800633c:	7823      	ldrb	r3, [r4, #0]
 800633e:	2b2e      	cmp	r3, #46	; 0x2e
 8006340:	d10c      	bne.n	800635c <_svfiprintf_r+0x130>
 8006342:	7863      	ldrb	r3, [r4, #1]
 8006344:	2b2a      	cmp	r3, #42	; 0x2a
 8006346:	d135      	bne.n	80063b4 <_svfiprintf_r+0x188>
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	3402      	adds	r4, #2
 800634c:	1d1a      	adds	r2, r3, #4
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	9203      	str	r2, [sp, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfb8      	it	lt
 8006356:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800635a:	9305      	str	r3, [sp, #20]
 800635c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800641c <_svfiprintf_r+0x1f0>
 8006360:	2203      	movs	r2, #3
 8006362:	4650      	mov	r0, sl
 8006364:	7821      	ldrb	r1, [r4, #0]
 8006366:	f7ff fa85 	bl	8005874 <memchr>
 800636a:	b140      	cbz	r0, 800637e <_svfiprintf_r+0x152>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	eba0 000a 	sub.w	r0, r0, sl
 8006372:	fa03 f000 	lsl.w	r0, r3, r0
 8006376:	9b04      	ldr	r3, [sp, #16]
 8006378:	3401      	adds	r4, #1
 800637a:	4303      	orrs	r3, r0
 800637c:	9304      	str	r3, [sp, #16]
 800637e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006382:	2206      	movs	r2, #6
 8006384:	4826      	ldr	r0, [pc, #152]	; (8006420 <_svfiprintf_r+0x1f4>)
 8006386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800638a:	f7ff fa73 	bl	8005874 <memchr>
 800638e:	2800      	cmp	r0, #0
 8006390:	d038      	beq.n	8006404 <_svfiprintf_r+0x1d8>
 8006392:	4b24      	ldr	r3, [pc, #144]	; (8006424 <_svfiprintf_r+0x1f8>)
 8006394:	bb1b      	cbnz	r3, 80063de <_svfiprintf_r+0x1b2>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	3307      	adds	r3, #7
 800639a:	f023 0307 	bic.w	r3, r3, #7
 800639e:	3308      	adds	r3, #8
 80063a0:	9303      	str	r3, [sp, #12]
 80063a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a4:	4433      	add	r3, r6
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	e767      	b.n	800627a <_svfiprintf_r+0x4e>
 80063aa:	460c      	mov	r4, r1
 80063ac:	2001      	movs	r0, #1
 80063ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80063b2:	e7a5      	b.n	8006300 <_svfiprintf_r+0xd4>
 80063b4:	2300      	movs	r3, #0
 80063b6:	f04f 0c0a 	mov.w	ip, #10
 80063ba:	4619      	mov	r1, r3
 80063bc:	3401      	adds	r4, #1
 80063be:	9305      	str	r3, [sp, #20]
 80063c0:	4620      	mov	r0, r4
 80063c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063c6:	3a30      	subs	r2, #48	; 0x30
 80063c8:	2a09      	cmp	r2, #9
 80063ca:	d903      	bls.n	80063d4 <_svfiprintf_r+0x1a8>
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0c5      	beq.n	800635c <_svfiprintf_r+0x130>
 80063d0:	9105      	str	r1, [sp, #20]
 80063d2:	e7c3      	b.n	800635c <_svfiprintf_r+0x130>
 80063d4:	4604      	mov	r4, r0
 80063d6:	2301      	movs	r3, #1
 80063d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80063dc:	e7f0      	b.n	80063c0 <_svfiprintf_r+0x194>
 80063de:	ab03      	add	r3, sp, #12
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	462a      	mov	r2, r5
 80063e4:	4638      	mov	r0, r7
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <_svfiprintf_r+0x1fc>)
 80063e8:	a904      	add	r1, sp, #16
 80063ea:	f7fd ffd9 	bl	80043a0 <_printf_float>
 80063ee:	1c42      	adds	r2, r0, #1
 80063f0:	4606      	mov	r6, r0
 80063f2:	d1d6      	bne.n	80063a2 <_svfiprintf_r+0x176>
 80063f4:	89ab      	ldrh	r3, [r5, #12]
 80063f6:	065b      	lsls	r3, r3, #25
 80063f8:	f53f af2c 	bmi.w	8006254 <_svfiprintf_r+0x28>
 80063fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063fe:	b01d      	add	sp, #116	; 0x74
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	ab03      	add	r3, sp, #12
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	462a      	mov	r2, r5
 800640a:	4638      	mov	r0, r7
 800640c:	4b06      	ldr	r3, [pc, #24]	; (8006428 <_svfiprintf_r+0x1fc>)
 800640e:	a904      	add	r1, sp, #16
 8006410:	f7fe fa62 	bl	80048d8 <_printf_i>
 8006414:	e7eb      	b.n	80063ee <_svfiprintf_r+0x1c2>
 8006416:	bf00      	nop
 8006418:	080074d4 	.word	0x080074d4
 800641c:	080074da 	.word	0x080074da
 8006420:	080074de 	.word	0x080074de
 8006424:	080043a1 	.word	0x080043a1
 8006428:	08006175 	.word	0x08006175

0800642c <_sbrk_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	2300      	movs	r3, #0
 8006430:	4d05      	ldr	r5, [pc, #20]	; (8006448 <_sbrk_r+0x1c>)
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f000 fe18 	bl	800706c <_sbrk>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_sbrk_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_sbrk_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	200017a0 	.word	0x200017a0

0800644c <__assert_func>:
 800644c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800644e:	4614      	mov	r4, r2
 8006450:	461a      	mov	r2, r3
 8006452:	4b09      	ldr	r3, [pc, #36]	; (8006478 <__assert_func+0x2c>)
 8006454:	4605      	mov	r5, r0
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68d8      	ldr	r0, [r3, #12]
 800645a:	b14c      	cbz	r4, 8006470 <__assert_func+0x24>
 800645c:	4b07      	ldr	r3, [pc, #28]	; (800647c <__assert_func+0x30>)
 800645e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006462:	9100      	str	r1, [sp, #0]
 8006464:	462b      	mov	r3, r5
 8006466:	4906      	ldr	r1, [pc, #24]	; (8006480 <__assert_func+0x34>)
 8006468:	f000 f80e 	bl	8006488 <fiprintf>
 800646c:	f000 faaa 	bl	80069c4 <abort>
 8006470:	4b04      	ldr	r3, [pc, #16]	; (8006484 <__assert_func+0x38>)
 8006472:	461c      	mov	r4, r3
 8006474:	e7f3      	b.n	800645e <__assert_func+0x12>
 8006476:	bf00      	nop
 8006478:	2000004c 	.word	0x2000004c
 800647c:	080074e5 	.word	0x080074e5
 8006480:	080074f2 	.word	0x080074f2
 8006484:	08007520 	.word	0x08007520

08006488 <fiprintf>:
 8006488:	b40e      	push	{r1, r2, r3}
 800648a:	b503      	push	{r0, r1, lr}
 800648c:	4601      	mov	r1, r0
 800648e:	ab03      	add	r3, sp, #12
 8006490:	4805      	ldr	r0, [pc, #20]	; (80064a8 <fiprintf+0x20>)
 8006492:	f853 2b04 	ldr.w	r2, [r3], #4
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	9301      	str	r3, [sp, #4]
 800649a:	f000 f895 	bl	80065c8 <_vfiprintf_r>
 800649e:	b002      	add	sp, #8
 80064a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064a4:	b003      	add	sp, #12
 80064a6:	4770      	bx	lr
 80064a8:	2000004c 	.word	0x2000004c

080064ac <__ascii_mbtowc>:
 80064ac:	b082      	sub	sp, #8
 80064ae:	b901      	cbnz	r1, 80064b2 <__ascii_mbtowc+0x6>
 80064b0:	a901      	add	r1, sp, #4
 80064b2:	b142      	cbz	r2, 80064c6 <__ascii_mbtowc+0x1a>
 80064b4:	b14b      	cbz	r3, 80064ca <__ascii_mbtowc+0x1e>
 80064b6:	7813      	ldrb	r3, [r2, #0]
 80064b8:	600b      	str	r3, [r1, #0]
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	1e10      	subs	r0, r2, #0
 80064be:	bf18      	it	ne
 80064c0:	2001      	movne	r0, #1
 80064c2:	b002      	add	sp, #8
 80064c4:	4770      	bx	lr
 80064c6:	4610      	mov	r0, r2
 80064c8:	e7fb      	b.n	80064c2 <__ascii_mbtowc+0x16>
 80064ca:	f06f 0001 	mvn.w	r0, #1
 80064ce:	e7f8      	b.n	80064c2 <__ascii_mbtowc+0x16>

080064d0 <memmove>:
 80064d0:	4288      	cmp	r0, r1
 80064d2:	b510      	push	{r4, lr}
 80064d4:	eb01 0402 	add.w	r4, r1, r2
 80064d8:	d902      	bls.n	80064e0 <memmove+0x10>
 80064da:	4284      	cmp	r4, r0
 80064dc:	4623      	mov	r3, r4
 80064de:	d807      	bhi.n	80064f0 <memmove+0x20>
 80064e0:	1e43      	subs	r3, r0, #1
 80064e2:	42a1      	cmp	r1, r4
 80064e4:	d008      	beq.n	80064f8 <memmove+0x28>
 80064e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ee:	e7f8      	b.n	80064e2 <memmove+0x12>
 80064f0:	4601      	mov	r1, r0
 80064f2:	4402      	add	r2, r0
 80064f4:	428a      	cmp	r2, r1
 80064f6:	d100      	bne.n	80064fa <memmove+0x2a>
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006502:	e7f7      	b.n	80064f4 <memmove+0x24>

08006504 <__malloc_lock>:
 8006504:	4801      	ldr	r0, [pc, #4]	; (800650c <__malloc_lock+0x8>)
 8006506:	f000 bc19 	b.w	8006d3c <__retarget_lock_acquire_recursive>
 800650a:	bf00      	nop
 800650c:	200017a4 	.word	0x200017a4

08006510 <__malloc_unlock>:
 8006510:	4801      	ldr	r0, [pc, #4]	; (8006518 <__malloc_unlock+0x8>)
 8006512:	f000 bc14 	b.w	8006d3e <__retarget_lock_release_recursive>
 8006516:	bf00      	nop
 8006518:	200017a4 	.word	0x200017a4

0800651c <_realloc_r>:
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	4680      	mov	r8, r0
 8006522:	4614      	mov	r4, r2
 8006524:	460e      	mov	r6, r1
 8006526:	b921      	cbnz	r1, 8006532 <_realloc_r+0x16>
 8006528:	4611      	mov	r1, r2
 800652a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800652e:	f7ff bdad 	b.w	800608c <_malloc_r>
 8006532:	b92a      	cbnz	r2, 8006540 <_realloc_r+0x24>
 8006534:	f7ff fd42 	bl	8005fbc <_free_r>
 8006538:	4625      	mov	r5, r4
 800653a:	4628      	mov	r0, r5
 800653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006540:	f000 fc64 	bl	8006e0c <_malloc_usable_size_r>
 8006544:	4284      	cmp	r4, r0
 8006546:	4607      	mov	r7, r0
 8006548:	d802      	bhi.n	8006550 <_realloc_r+0x34>
 800654a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800654e:	d812      	bhi.n	8006576 <_realloc_r+0x5a>
 8006550:	4621      	mov	r1, r4
 8006552:	4640      	mov	r0, r8
 8006554:	f7ff fd9a 	bl	800608c <_malloc_r>
 8006558:	4605      	mov	r5, r0
 800655a:	2800      	cmp	r0, #0
 800655c:	d0ed      	beq.n	800653a <_realloc_r+0x1e>
 800655e:	42bc      	cmp	r4, r7
 8006560:	4622      	mov	r2, r4
 8006562:	4631      	mov	r1, r6
 8006564:	bf28      	it	cs
 8006566:	463a      	movcs	r2, r7
 8006568:	f7fd fe66 	bl	8004238 <memcpy>
 800656c:	4631      	mov	r1, r6
 800656e:	4640      	mov	r0, r8
 8006570:	f7ff fd24 	bl	8005fbc <_free_r>
 8006574:	e7e1      	b.n	800653a <_realloc_r+0x1e>
 8006576:	4635      	mov	r5, r6
 8006578:	e7df      	b.n	800653a <_realloc_r+0x1e>

0800657a <__sfputc_r>:
 800657a:	6893      	ldr	r3, [r2, #8]
 800657c:	b410      	push	{r4}
 800657e:	3b01      	subs	r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	6093      	str	r3, [r2, #8]
 8006584:	da07      	bge.n	8006596 <__sfputc_r+0x1c>
 8006586:	6994      	ldr	r4, [r2, #24]
 8006588:	42a3      	cmp	r3, r4
 800658a:	db01      	blt.n	8006590 <__sfputc_r+0x16>
 800658c:	290a      	cmp	r1, #10
 800658e:	d102      	bne.n	8006596 <__sfputc_r+0x1c>
 8006590:	bc10      	pop	{r4}
 8006592:	f000 b949 	b.w	8006828 <__swbuf_r>
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	1c58      	adds	r0, r3, #1
 800659a:	6010      	str	r0, [r2, #0]
 800659c:	7019      	strb	r1, [r3, #0]
 800659e:	4608      	mov	r0, r1
 80065a0:	bc10      	pop	{r4}
 80065a2:	4770      	bx	lr

080065a4 <__sfputs_r>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	4606      	mov	r6, r0
 80065a8:	460f      	mov	r7, r1
 80065aa:	4614      	mov	r4, r2
 80065ac:	18d5      	adds	r5, r2, r3
 80065ae:	42ac      	cmp	r4, r5
 80065b0:	d101      	bne.n	80065b6 <__sfputs_r+0x12>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e007      	b.n	80065c6 <__sfputs_r+0x22>
 80065b6:	463a      	mov	r2, r7
 80065b8:	4630      	mov	r0, r6
 80065ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065be:	f7ff ffdc 	bl	800657a <__sfputc_r>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d1f3      	bne.n	80065ae <__sfputs_r+0xa>
 80065c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065c8 <_vfiprintf_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	460d      	mov	r5, r1
 80065ce:	4614      	mov	r4, r2
 80065d0:	4698      	mov	r8, r3
 80065d2:	4606      	mov	r6, r0
 80065d4:	b09d      	sub	sp, #116	; 0x74
 80065d6:	b118      	cbz	r0, 80065e0 <_vfiprintf_r+0x18>
 80065d8:	6983      	ldr	r3, [r0, #24]
 80065da:	b90b      	cbnz	r3, 80065e0 <_vfiprintf_r+0x18>
 80065dc:	f000 fb10 	bl	8006c00 <__sinit>
 80065e0:	4b89      	ldr	r3, [pc, #548]	; (8006808 <_vfiprintf_r+0x240>)
 80065e2:	429d      	cmp	r5, r3
 80065e4:	d11b      	bne.n	800661e <_vfiprintf_r+0x56>
 80065e6:	6875      	ldr	r5, [r6, #4]
 80065e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ea:	07d9      	lsls	r1, r3, #31
 80065ec:	d405      	bmi.n	80065fa <_vfiprintf_r+0x32>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	059a      	lsls	r2, r3, #22
 80065f2:	d402      	bmi.n	80065fa <_vfiprintf_r+0x32>
 80065f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f6:	f000 fba1 	bl	8006d3c <__retarget_lock_acquire_recursive>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	071b      	lsls	r3, r3, #28
 80065fe:	d501      	bpl.n	8006604 <_vfiprintf_r+0x3c>
 8006600:	692b      	ldr	r3, [r5, #16]
 8006602:	b9eb      	cbnz	r3, 8006640 <_vfiprintf_r+0x78>
 8006604:	4629      	mov	r1, r5
 8006606:	4630      	mov	r0, r6
 8006608:	f000 f96e 	bl	80068e8 <__swsetup_r>
 800660c:	b1c0      	cbz	r0, 8006640 <_vfiprintf_r+0x78>
 800660e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006610:	07dc      	lsls	r4, r3, #31
 8006612:	d50e      	bpl.n	8006632 <_vfiprintf_r+0x6a>
 8006614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006618:	b01d      	add	sp, #116	; 0x74
 800661a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661e:	4b7b      	ldr	r3, [pc, #492]	; (800680c <_vfiprintf_r+0x244>)
 8006620:	429d      	cmp	r5, r3
 8006622:	d101      	bne.n	8006628 <_vfiprintf_r+0x60>
 8006624:	68b5      	ldr	r5, [r6, #8]
 8006626:	e7df      	b.n	80065e8 <_vfiprintf_r+0x20>
 8006628:	4b79      	ldr	r3, [pc, #484]	; (8006810 <_vfiprintf_r+0x248>)
 800662a:	429d      	cmp	r5, r3
 800662c:	bf08      	it	eq
 800662e:	68f5      	ldreq	r5, [r6, #12]
 8006630:	e7da      	b.n	80065e8 <_vfiprintf_r+0x20>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	0598      	lsls	r0, r3, #22
 8006636:	d4ed      	bmi.n	8006614 <_vfiprintf_r+0x4c>
 8006638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800663a:	f000 fb80 	bl	8006d3e <__retarget_lock_release_recursive>
 800663e:	e7e9      	b.n	8006614 <_vfiprintf_r+0x4c>
 8006640:	2300      	movs	r3, #0
 8006642:	9309      	str	r3, [sp, #36]	; 0x24
 8006644:	2320      	movs	r3, #32
 8006646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800664a:	2330      	movs	r3, #48	; 0x30
 800664c:	f04f 0901 	mov.w	r9, #1
 8006650:	f8cd 800c 	str.w	r8, [sp, #12]
 8006654:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006814 <_vfiprintf_r+0x24c>
 8006658:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800665c:	4623      	mov	r3, r4
 800665e:	469a      	mov	sl, r3
 8006660:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006664:	b10a      	cbz	r2, 800666a <_vfiprintf_r+0xa2>
 8006666:	2a25      	cmp	r2, #37	; 0x25
 8006668:	d1f9      	bne.n	800665e <_vfiprintf_r+0x96>
 800666a:	ebba 0b04 	subs.w	fp, sl, r4
 800666e:	d00b      	beq.n	8006688 <_vfiprintf_r+0xc0>
 8006670:	465b      	mov	r3, fp
 8006672:	4622      	mov	r2, r4
 8006674:	4629      	mov	r1, r5
 8006676:	4630      	mov	r0, r6
 8006678:	f7ff ff94 	bl	80065a4 <__sfputs_r>
 800667c:	3001      	adds	r0, #1
 800667e:	f000 80aa 	beq.w	80067d6 <_vfiprintf_r+0x20e>
 8006682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006684:	445a      	add	r2, fp
 8006686:	9209      	str	r2, [sp, #36]	; 0x24
 8006688:	f89a 3000 	ldrb.w	r3, [sl]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80a2 	beq.w	80067d6 <_vfiprintf_r+0x20e>
 8006692:	2300      	movs	r3, #0
 8006694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800669c:	f10a 0a01 	add.w	sl, sl, #1
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	9307      	str	r3, [sp, #28]
 80066a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066a8:	931a      	str	r3, [sp, #104]	; 0x68
 80066aa:	4654      	mov	r4, sl
 80066ac:	2205      	movs	r2, #5
 80066ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066b2:	4858      	ldr	r0, [pc, #352]	; (8006814 <_vfiprintf_r+0x24c>)
 80066b4:	f7ff f8de 	bl	8005874 <memchr>
 80066b8:	9a04      	ldr	r2, [sp, #16]
 80066ba:	b9d8      	cbnz	r0, 80066f4 <_vfiprintf_r+0x12c>
 80066bc:	06d1      	lsls	r1, r2, #27
 80066be:	bf44      	itt	mi
 80066c0:	2320      	movmi	r3, #32
 80066c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066c6:	0713      	lsls	r3, r2, #28
 80066c8:	bf44      	itt	mi
 80066ca:	232b      	movmi	r3, #43	; 0x2b
 80066cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d0:	f89a 3000 	ldrb.w	r3, [sl]
 80066d4:	2b2a      	cmp	r3, #42	; 0x2a
 80066d6:	d015      	beq.n	8006704 <_vfiprintf_r+0x13c>
 80066d8:	4654      	mov	r4, sl
 80066da:	2000      	movs	r0, #0
 80066dc:	f04f 0c0a 	mov.w	ip, #10
 80066e0:	9a07      	ldr	r2, [sp, #28]
 80066e2:	4621      	mov	r1, r4
 80066e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066e8:	3b30      	subs	r3, #48	; 0x30
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	d94e      	bls.n	800678c <_vfiprintf_r+0x1c4>
 80066ee:	b1b0      	cbz	r0, 800671e <_vfiprintf_r+0x156>
 80066f0:	9207      	str	r2, [sp, #28]
 80066f2:	e014      	b.n	800671e <_vfiprintf_r+0x156>
 80066f4:	eba0 0308 	sub.w	r3, r0, r8
 80066f8:	fa09 f303 	lsl.w	r3, r9, r3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	46a2      	mov	sl, r4
 8006700:	9304      	str	r3, [sp, #16]
 8006702:	e7d2      	b.n	80066aa <_vfiprintf_r+0xe2>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	1d19      	adds	r1, r3, #4
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	9103      	str	r1, [sp, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	bfbb      	ittet	lt
 8006710:	425b      	neglt	r3, r3
 8006712:	f042 0202 	orrlt.w	r2, r2, #2
 8006716:	9307      	strge	r3, [sp, #28]
 8006718:	9307      	strlt	r3, [sp, #28]
 800671a:	bfb8      	it	lt
 800671c:	9204      	strlt	r2, [sp, #16]
 800671e:	7823      	ldrb	r3, [r4, #0]
 8006720:	2b2e      	cmp	r3, #46	; 0x2e
 8006722:	d10c      	bne.n	800673e <_vfiprintf_r+0x176>
 8006724:	7863      	ldrb	r3, [r4, #1]
 8006726:	2b2a      	cmp	r3, #42	; 0x2a
 8006728:	d135      	bne.n	8006796 <_vfiprintf_r+0x1ce>
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	3402      	adds	r4, #2
 800672e:	1d1a      	adds	r2, r3, #4
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	9203      	str	r2, [sp, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	bfb8      	it	lt
 8006738:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006818 <_vfiprintf_r+0x250>
 8006742:	2203      	movs	r2, #3
 8006744:	4650      	mov	r0, sl
 8006746:	7821      	ldrb	r1, [r4, #0]
 8006748:	f7ff f894 	bl	8005874 <memchr>
 800674c:	b140      	cbz	r0, 8006760 <_vfiprintf_r+0x198>
 800674e:	2340      	movs	r3, #64	; 0x40
 8006750:	eba0 000a 	sub.w	r0, r0, sl
 8006754:	fa03 f000 	lsl.w	r0, r3, r0
 8006758:	9b04      	ldr	r3, [sp, #16]
 800675a:	3401      	adds	r4, #1
 800675c:	4303      	orrs	r3, r0
 800675e:	9304      	str	r3, [sp, #16]
 8006760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006764:	2206      	movs	r2, #6
 8006766:	482d      	ldr	r0, [pc, #180]	; (800681c <_vfiprintf_r+0x254>)
 8006768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800676c:	f7ff f882 	bl	8005874 <memchr>
 8006770:	2800      	cmp	r0, #0
 8006772:	d03f      	beq.n	80067f4 <_vfiprintf_r+0x22c>
 8006774:	4b2a      	ldr	r3, [pc, #168]	; (8006820 <_vfiprintf_r+0x258>)
 8006776:	bb1b      	cbnz	r3, 80067c0 <_vfiprintf_r+0x1f8>
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	3307      	adds	r3, #7
 800677c:	f023 0307 	bic.w	r3, r3, #7
 8006780:	3308      	adds	r3, #8
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006786:	443b      	add	r3, r7
 8006788:	9309      	str	r3, [sp, #36]	; 0x24
 800678a:	e767      	b.n	800665c <_vfiprintf_r+0x94>
 800678c:	460c      	mov	r4, r1
 800678e:	2001      	movs	r0, #1
 8006790:	fb0c 3202 	mla	r2, ip, r2, r3
 8006794:	e7a5      	b.n	80066e2 <_vfiprintf_r+0x11a>
 8006796:	2300      	movs	r3, #0
 8006798:	f04f 0c0a 	mov.w	ip, #10
 800679c:	4619      	mov	r1, r3
 800679e:	3401      	adds	r4, #1
 80067a0:	9305      	str	r3, [sp, #20]
 80067a2:	4620      	mov	r0, r4
 80067a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067a8:	3a30      	subs	r2, #48	; 0x30
 80067aa:	2a09      	cmp	r2, #9
 80067ac:	d903      	bls.n	80067b6 <_vfiprintf_r+0x1ee>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0c5      	beq.n	800673e <_vfiprintf_r+0x176>
 80067b2:	9105      	str	r1, [sp, #20]
 80067b4:	e7c3      	b.n	800673e <_vfiprintf_r+0x176>
 80067b6:	4604      	mov	r4, r0
 80067b8:	2301      	movs	r3, #1
 80067ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80067be:	e7f0      	b.n	80067a2 <_vfiprintf_r+0x1da>
 80067c0:	ab03      	add	r3, sp, #12
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	462a      	mov	r2, r5
 80067c6:	4630      	mov	r0, r6
 80067c8:	4b16      	ldr	r3, [pc, #88]	; (8006824 <_vfiprintf_r+0x25c>)
 80067ca:	a904      	add	r1, sp, #16
 80067cc:	f7fd fde8 	bl	80043a0 <_printf_float>
 80067d0:	4607      	mov	r7, r0
 80067d2:	1c78      	adds	r0, r7, #1
 80067d4:	d1d6      	bne.n	8006784 <_vfiprintf_r+0x1bc>
 80067d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067d8:	07d9      	lsls	r1, r3, #31
 80067da:	d405      	bmi.n	80067e8 <_vfiprintf_r+0x220>
 80067dc:	89ab      	ldrh	r3, [r5, #12]
 80067de:	059a      	lsls	r2, r3, #22
 80067e0:	d402      	bmi.n	80067e8 <_vfiprintf_r+0x220>
 80067e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067e4:	f000 faab 	bl	8006d3e <__retarget_lock_release_recursive>
 80067e8:	89ab      	ldrh	r3, [r5, #12]
 80067ea:	065b      	lsls	r3, r3, #25
 80067ec:	f53f af12 	bmi.w	8006614 <_vfiprintf_r+0x4c>
 80067f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067f2:	e711      	b.n	8006618 <_vfiprintf_r+0x50>
 80067f4:	ab03      	add	r3, sp, #12
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	462a      	mov	r2, r5
 80067fa:	4630      	mov	r0, r6
 80067fc:	4b09      	ldr	r3, [pc, #36]	; (8006824 <_vfiprintf_r+0x25c>)
 80067fe:	a904      	add	r1, sp, #16
 8006800:	f7fe f86a 	bl	80048d8 <_printf_i>
 8006804:	e7e4      	b.n	80067d0 <_vfiprintf_r+0x208>
 8006806:	bf00      	nop
 8006808:	0800764c 	.word	0x0800764c
 800680c:	0800766c 	.word	0x0800766c
 8006810:	0800762c 	.word	0x0800762c
 8006814:	080074d4 	.word	0x080074d4
 8006818:	080074da 	.word	0x080074da
 800681c:	080074de 	.word	0x080074de
 8006820:	080043a1 	.word	0x080043a1
 8006824:	080065a5 	.word	0x080065a5

08006828 <__swbuf_r>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	460e      	mov	r6, r1
 800682c:	4614      	mov	r4, r2
 800682e:	4605      	mov	r5, r0
 8006830:	b118      	cbz	r0, 800683a <__swbuf_r+0x12>
 8006832:	6983      	ldr	r3, [r0, #24]
 8006834:	b90b      	cbnz	r3, 800683a <__swbuf_r+0x12>
 8006836:	f000 f9e3 	bl	8006c00 <__sinit>
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <__swbuf_r+0x98>)
 800683c:	429c      	cmp	r4, r3
 800683e:	d12b      	bne.n	8006898 <__swbuf_r+0x70>
 8006840:	686c      	ldr	r4, [r5, #4]
 8006842:	69a3      	ldr	r3, [r4, #24]
 8006844:	60a3      	str	r3, [r4, #8]
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	071a      	lsls	r2, r3, #28
 800684a:	d52f      	bpl.n	80068ac <__swbuf_r+0x84>
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	b36b      	cbz	r3, 80068ac <__swbuf_r+0x84>
 8006850:	6923      	ldr	r3, [r4, #16]
 8006852:	6820      	ldr	r0, [r4, #0]
 8006854:	b2f6      	uxtb	r6, r6
 8006856:	1ac0      	subs	r0, r0, r3
 8006858:	6963      	ldr	r3, [r4, #20]
 800685a:	4637      	mov	r7, r6
 800685c:	4283      	cmp	r3, r0
 800685e:	dc04      	bgt.n	800686a <__swbuf_r+0x42>
 8006860:	4621      	mov	r1, r4
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f938 	bl	8006ad8 <_fflush_r>
 8006868:	bb30      	cbnz	r0, 80068b8 <__swbuf_r+0x90>
 800686a:	68a3      	ldr	r3, [r4, #8]
 800686c:	3001      	adds	r0, #1
 800686e:	3b01      	subs	r3, #1
 8006870:	60a3      	str	r3, [r4, #8]
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	6022      	str	r2, [r4, #0]
 8006878:	701e      	strb	r6, [r3, #0]
 800687a:	6963      	ldr	r3, [r4, #20]
 800687c:	4283      	cmp	r3, r0
 800687e:	d004      	beq.n	800688a <__swbuf_r+0x62>
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	07db      	lsls	r3, r3, #31
 8006884:	d506      	bpl.n	8006894 <__swbuf_r+0x6c>
 8006886:	2e0a      	cmp	r6, #10
 8006888:	d104      	bne.n	8006894 <__swbuf_r+0x6c>
 800688a:	4621      	mov	r1, r4
 800688c:	4628      	mov	r0, r5
 800688e:	f000 f923 	bl	8006ad8 <_fflush_r>
 8006892:	b988      	cbnz	r0, 80068b8 <__swbuf_r+0x90>
 8006894:	4638      	mov	r0, r7
 8006896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <__swbuf_r+0x9c>)
 800689a:	429c      	cmp	r4, r3
 800689c:	d101      	bne.n	80068a2 <__swbuf_r+0x7a>
 800689e:	68ac      	ldr	r4, [r5, #8]
 80068a0:	e7cf      	b.n	8006842 <__swbuf_r+0x1a>
 80068a2:	4b09      	ldr	r3, [pc, #36]	; (80068c8 <__swbuf_r+0xa0>)
 80068a4:	429c      	cmp	r4, r3
 80068a6:	bf08      	it	eq
 80068a8:	68ec      	ldreq	r4, [r5, #12]
 80068aa:	e7ca      	b.n	8006842 <__swbuf_r+0x1a>
 80068ac:	4621      	mov	r1, r4
 80068ae:	4628      	mov	r0, r5
 80068b0:	f000 f81a 	bl	80068e8 <__swsetup_r>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d0cb      	beq.n	8006850 <__swbuf_r+0x28>
 80068b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068bc:	e7ea      	b.n	8006894 <__swbuf_r+0x6c>
 80068be:	bf00      	nop
 80068c0:	0800764c 	.word	0x0800764c
 80068c4:	0800766c 	.word	0x0800766c
 80068c8:	0800762c 	.word	0x0800762c

080068cc <__ascii_wctomb>:
 80068cc:	4603      	mov	r3, r0
 80068ce:	4608      	mov	r0, r1
 80068d0:	b141      	cbz	r1, 80068e4 <__ascii_wctomb+0x18>
 80068d2:	2aff      	cmp	r2, #255	; 0xff
 80068d4:	d904      	bls.n	80068e0 <__ascii_wctomb+0x14>
 80068d6:	228a      	movs	r2, #138	; 0x8a
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068dc:	601a      	str	r2, [r3, #0]
 80068de:	4770      	bx	lr
 80068e0:	2001      	movs	r0, #1
 80068e2:	700a      	strb	r2, [r1, #0]
 80068e4:	4770      	bx	lr
	...

080068e8 <__swsetup_r>:
 80068e8:	4b32      	ldr	r3, [pc, #200]	; (80069b4 <__swsetup_r+0xcc>)
 80068ea:	b570      	push	{r4, r5, r6, lr}
 80068ec:	681d      	ldr	r5, [r3, #0]
 80068ee:	4606      	mov	r6, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	b125      	cbz	r5, 80068fe <__swsetup_r+0x16>
 80068f4:	69ab      	ldr	r3, [r5, #24]
 80068f6:	b913      	cbnz	r3, 80068fe <__swsetup_r+0x16>
 80068f8:	4628      	mov	r0, r5
 80068fa:	f000 f981 	bl	8006c00 <__sinit>
 80068fe:	4b2e      	ldr	r3, [pc, #184]	; (80069b8 <__swsetup_r+0xd0>)
 8006900:	429c      	cmp	r4, r3
 8006902:	d10f      	bne.n	8006924 <__swsetup_r+0x3c>
 8006904:	686c      	ldr	r4, [r5, #4]
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690c:	0719      	lsls	r1, r3, #28
 800690e:	d42c      	bmi.n	800696a <__swsetup_r+0x82>
 8006910:	06dd      	lsls	r5, r3, #27
 8006912:	d411      	bmi.n	8006938 <__swsetup_r+0x50>
 8006914:	2309      	movs	r3, #9
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800691c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	e03e      	b.n	80069a2 <__swsetup_r+0xba>
 8006924:	4b25      	ldr	r3, [pc, #148]	; (80069bc <__swsetup_r+0xd4>)
 8006926:	429c      	cmp	r4, r3
 8006928:	d101      	bne.n	800692e <__swsetup_r+0x46>
 800692a:	68ac      	ldr	r4, [r5, #8]
 800692c:	e7eb      	b.n	8006906 <__swsetup_r+0x1e>
 800692e:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <__swsetup_r+0xd8>)
 8006930:	429c      	cmp	r4, r3
 8006932:	bf08      	it	eq
 8006934:	68ec      	ldreq	r4, [r5, #12]
 8006936:	e7e6      	b.n	8006906 <__swsetup_r+0x1e>
 8006938:	0758      	lsls	r0, r3, #29
 800693a:	d512      	bpl.n	8006962 <__swsetup_r+0x7a>
 800693c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800693e:	b141      	cbz	r1, 8006952 <__swsetup_r+0x6a>
 8006940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006944:	4299      	cmp	r1, r3
 8006946:	d002      	beq.n	800694e <__swsetup_r+0x66>
 8006948:	4630      	mov	r0, r6
 800694a:	f7ff fb37 	bl	8005fbc <_free_r>
 800694e:	2300      	movs	r3, #0
 8006950:	6363      	str	r3, [r4, #52]	; 0x34
 8006952:	89a3      	ldrh	r3, [r4, #12]
 8006954:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	2300      	movs	r3, #0
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	6923      	ldr	r3, [r4, #16]
 8006960:	6023      	str	r3, [r4, #0]
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f043 0308 	orr.w	r3, r3, #8
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	6923      	ldr	r3, [r4, #16]
 800696c:	b94b      	cbnz	r3, 8006982 <__swsetup_r+0x9a>
 800696e:	89a3      	ldrh	r3, [r4, #12]
 8006970:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006978:	d003      	beq.n	8006982 <__swsetup_r+0x9a>
 800697a:	4621      	mov	r1, r4
 800697c:	4630      	mov	r0, r6
 800697e:	f000 fa05 	bl	8006d8c <__smakebuf_r>
 8006982:	89a0      	ldrh	r0, [r4, #12]
 8006984:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006988:	f010 0301 	ands.w	r3, r0, #1
 800698c:	d00a      	beq.n	80069a4 <__swsetup_r+0xbc>
 800698e:	2300      	movs	r3, #0
 8006990:	60a3      	str	r3, [r4, #8]
 8006992:	6963      	ldr	r3, [r4, #20]
 8006994:	425b      	negs	r3, r3
 8006996:	61a3      	str	r3, [r4, #24]
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	b943      	cbnz	r3, 80069ae <__swsetup_r+0xc6>
 800699c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069a0:	d1ba      	bne.n	8006918 <__swsetup_r+0x30>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	0781      	lsls	r1, r0, #30
 80069a6:	bf58      	it	pl
 80069a8:	6963      	ldrpl	r3, [r4, #20]
 80069aa:	60a3      	str	r3, [r4, #8]
 80069ac:	e7f4      	b.n	8006998 <__swsetup_r+0xb0>
 80069ae:	2000      	movs	r0, #0
 80069b0:	e7f7      	b.n	80069a2 <__swsetup_r+0xba>
 80069b2:	bf00      	nop
 80069b4:	2000004c 	.word	0x2000004c
 80069b8:	0800764c 	.word	0x0800764c
 80069bc:	0800766c 	.word	0x0800766c
 80069c0:	0800762c 	.word	0x0800762c

080069c4 <abort>:
 80069c4:	2006      	movs	r0, #6
 80069c6:	b508      	push	{r3, lr}
 80069c8:	f000 fa50 	bl	8006e6c <raise>
 80069cc:	2001      	movs	r0, #1
 80069ce:	f000 fb63 	bl	8007098 <_exit>
	...

080069d4 <__sflush_r>:
 80069d4:	898a      	ldrh	r2, [r1, #12]
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	4605      	mov	r5, r0
 80069da:	0710      	lsls	r0, r2, #28
 80069dc:	460c      	mov	r4, r1
 80069de:	d457      	bmi.n	8006a90 <__sflush_r+0xbc>
 80069e0:	684b      	ldr	r3, [r1, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dc04      	bgt.n	80069f0 <__sflush_r+0x1c>
 80069e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc01      	bgt.n	80069f0 <__sflush_r+0x1c>
 80069ec:	2000      	movs	r0, #0
 80069ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	d0fa      	beq.n	80069ec <__sflush_r+0x18>
 80069f6:	2300      	movs	r3, #0
 80069f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069fc:	682f      	ldr	r7, [r5, #0]
 80069fe:	602b      	str	r3, [r5, #0]
 8006a00:	d032      	beq.n	8006a68 <__sflush_r+0x94>
 8006a02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	075a      	lsls	r2, r3, #29
 8006a08:	d505      	bpl.n	8006a16 <__sflush_r+0x42>
 8006a0a:	6863      	ldr	r3, [r4, #4]
 8006a0c:	1ac0      	subs	r0, r0, r3
 8006a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a10:	b10b      	cbz	r3, 8006a16 <__sflush_r+0x42>
 8006a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a14:	1ac0      	subs	r0, r0, r3
 8006a16:	2300      	movs	r3, #0
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	6a21      	ldr	r1, [r4, #32]
 8006a20:	47b0      	blx	r6
 8006a22:	1c43      	adds	r3, r0, #1
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	d106      	bne.n	8006a36 <__sflush_r+0x62>
 8006a28:	6829      	ldr	r1, [r5, #0]
 8006a2a:	291d      	cmp	r1, #29
 8006a2c:	d82c      	bhi.n	8006a88 <__sflush_r+0xb4>
 8006a2e:	4a29      	ldr	r2, [pc, #164]	; (8006ad4 <__sflush_r+0x100>)
 8006a30:	40ca      	lsrs	r2, r1
 8006a32:	07d6      	lsls	r6, r2, #31
 8006a34:	d528      	bpl.n	8006a88 <__sflush_r+0xb4>
 8006a36:	2200      	movs	r2, #0
 8006a38:	6062      	str	r2, [r4, #4]
 8006a3a:	6922      	ldr	r2, [r4, #16]
 8006a3c:	04d9      	lsls	r1, r3, #19
 8006a3e:	6022      	str	r2, [r4, #0]
 8006a40:	d504      	bpl.n	8006a4c <__sflush_r+0x78>
 8006a42:	1c42      	adds	r2, r0, #1
 8006a44:	d101      	bne.n	8006a4a <__sflush_r+0x76>
 8006a46:	682b      	ldr	r3, [r5, #0]
 8006a48:	b903      	cbnz	r3, 8006a4c <__sflush_r+0x78>
 8006a4a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a4e:	602f      	str	r7, [r5, #0]
 8006a50:	2900      	cmp	r1, #0
 8006a52:	d0cb      	beq.n	80069ec <__sflush_r+0x18>
 8006a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a58:	4299      	cmp	r1, r3
 8006a5a:	d002      	beq.n	8006a62 <__sflush_r+0x8e>
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f7ff faad 	bl	8005fbc <_free_r>
 8006a62:	2000      	movs	r0, #0
 8006a64:	6360      	str	r0, [r4, #52]	; 0x34
 8006a66:	e7c2      	b.n	80069ee <__sflush_r+0x1a>
 8006a68:	6a21      	ldr	r1, [r4, #32]
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b0      	blx	r6
 8006a70:	1c41      	adds	r1, r0, #1
 8006a72:	d1c7      	bne.n	8006a04 <__sflush_r+0x30>
 8006a74:	682b      	ldr	r3, [r5, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d0c4      	beq.n	8006a04 <__sflush_r+0x30>
 8006a7a:	2b1d      	cmp	r3, #29
 8006a7c:	d001      	beq.n	8006a82 <__sflush_r+0xae>
 8006a7e:	2b16      	cmp	r3, #22
 8006a80:	d101      	bne.n	8006a86 <__sflush_r+0xb2>
 8006a82:	602f      	str	r7, [r5, #0]
 8006a84:	e7b2      	b.n	80069ec <__sflush_r+0x18>
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	e7ae      	b.n	80069ee <__sflush_r+0x1a>
 8006a90:	690f      	ldr	r7, [r1, #16]
 8006a92:	2f00      	cmp	r7, #0
 8006a94:	d0aa      	beq.n	80069ec <__sflush_r+0x18>
 8006a96:	0793      	lsls	r3, r2, #30
 8006a98:	bf18      	it	ne
 8006a9a:	2300      	movne	r3, #0
 8006a9c:	680e      	ldr	r6, [r1, #0]
 8006a9e:	bf08      	it	eq
 8006aa0:	694b      	ldreq	r3, [r1, #20]
 8006aa2:	1bf6      	subs	r6, r6, r7
 8006aa4:	600f      	str	r7, [r1, #0]
 8006aa6:	608b      	str	r3, [r1, #8]
 8006aa8:	2e00      	cmp	r6, #0
 8006aaa:	dd9f      	ble.n	80069ec <__sflush_r+0x18>
 8006aac:	4633      	mov	r3, r6
 8006aae:	463a      	mov	r2, r7
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ab8:	47e0      	blx	ip
 8006aba:	2800      	cmp	r0, #0
 8006abc:	dc06      	bgt.n	8006acc <__sflush_r+0xf8>
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ac8:	81a3      	strh	r3, [r4, #12]
 8006aca:	e790      	b.n	80069ee <__sflush_r+0x1a>
 8006acc:	4407      	add	r7, r0
 8006ace:	1a36      	subs	r6, r6, r0
 8006ad0:	e7ea      	b.n	8006aa8 <__sflush_r+0xd4>
 8006ad2:	bf00      	nop
 8006ad4:	20400001 	.word	0x20400001

08006ad8 <_fflush_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	690b      	ldr	r3, [r1, #16]
 8006adc:	4605      	mov	r5, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	b913      	cbnz	r3, 8006ae8 <_fflush_r+0x10>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	b118      	cbz	r0, 8006af2 <_fflush_r+0x1a>
 8006aea:	6983      	ldr	r3, [r0, #24]
 8006aec:	b90b      	cbnz	r3, 8006af2 <_fflush_r+0x1a>
 8006aee:	f000 f887 	bl	8006c00 <__sinit>
 8006af2:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <_fflush_r+0x6c>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	d11b      	bne.n	8006b30 <_fflush_r+0x58>
 8006af8:	686c      	ldr	r4, [r5, #4]
 8006afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0ef      	beq.n	8006ae2 <_fflush_r+0xa>
 8006b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b04:	07d0      	lsls	r0, r2, #31
 8006b06:	d404      	bmi.n	8006b12 <_fflush_r+0x3a>
 8006b08:	0599      	lsls	r1, r3, #22
 8006b0a:	d402      	bmi.n	8006b12 <_fflush_r+0x3a>
 8006b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b0e:	f000 f915 	bl	8006d3c <__retarget_lock_acquire_recursive>
 8006b12:	4628      	mov	r0, r5
 8006b14:	4621      	mov	r1, r4
 8006b16:	f7ff ff5d 	bl	80069d4 <__sflush_r>
 8006b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	07da      	lsls	r2, r3, #31
 8006b20:	d4e0      	bmi.n	8006ae4 <_fflush_r+0xc>
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	059b      	lsls	r3, r3, #22
 8006b26:	d4dd      	bmi.n	8006ae4 <_fflush_r+0xc>
 8006b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b2a:	f000 f908 	bl	8006d3e <__retarget_lock_release_recursive>
 8006b2e:	e7d9      	b.n	8006ae4 <_fflush_r+0xc>
 8006b30:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <_fflush_r+0x70>)
 8006b32:	429c      	cmp	r4, r3
 8006b34:	d101      	bne.n	8006b3a <_fflush_r+0x62>
 8006b36:	68ac      	ldr	r4, [r5, #8]
 8006b38:	e7df      	b.n	8006afa <_fflush_r+0x22>
 8006b3a:	4b04      	ldr	r3, [pc, #16]	; (8006b4c <_fflush_r+0x74>)
 8006b3c:	429c      	cmp	r4, r3
 8006b3e:	bf08      	it	eq
 8006b40:	68ec      	ldreq	r4, [r5, #12]
 8006b42:	e7da      	b.n	8006afa <_fflush_r+0x22>
 8006b44:	0800764c 	.word	0x0800764c
 8006b48:	0800766c 	.word	0x0800766c
 8006b4c:	0800762c 	.word	0x0800762c

08006b50 <std>:
 8006b50:	2300      	movs	r3, #0
 8006b52:	b510      	push	{r4, lr}
 8006b54:	4604      	mov	r4, r0
 8006b56:	e9c0 3300 	strd	r3, r3, [r0]
 8006b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b5e:	6083      	str	r3, [r0, #8]
 8006b60:	8181      	strh	r1, [r0, #12]
 8006b62:	6643      	str	r3, [r0, #100]	; 0x64
 8006b64:	81c2      	strh	r2, [r0, #14]
 8006b66:	6183      	str	r3, [r0, #24]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	2208      	movs	r2, #8
 8006b6c:	305c      	adds	r0, #92	; 0x5c
 8006b6e:	f7fd fb71 	bl	8004254 <memset>
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <std+0x38>)
 8006b74:	6224      	str	r4, [r4, #32]
 8006b76:	6263      	str	r3, [r4, #36]	; 0x24
 8006b78:	4b04      	ldr	r3, [pc, #16]	; (8006b8c <std+0x3c>)
 8006b7a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b7c:	4b04      	ldr	r3, [pc, #16]	; (8006b90 <std+0x40>)
 8006b7e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <std+0x44>)
 8006b82:	6323      	str	r3, [r4, #48]	; 0x30
 8006b84:	bd10      	pop	{r4, pc}
 8006b86:	bf00      	nop
 8006b88:	08006ea5 	.word	0x08006ea5
 8006b8c:	08006ec7 	.word	0x08006ec7
 8006b90:	08006eff 	.word	0x08006eff
 8006b94:	08006f23 	.word	0x08006f23

08006b98 <_cleanup_r>:
 8006b98:	4901      	ldr	r1, [pc, #4]	; (8006ba0 <_cleanup_r+0x8>)
 8006b9a:	f000 b8af 	b.w	8006cfc <_fwalk_reent>
 8006b9e:	bf00      	nop
 8006ba0:	08006ad9 	.word	0x08006ad9

08006ba4 <__sfmoreglue>:
 8006ba4:	2268      	movs	r2, #104	; 0x68
 8006ba6:	b570      	push	{r4, r5, r6, lr}
 8006ba8:	1e4d      	subs	r5, r1, #1
 8006baa:	4355      	muls	r5, r2
 8006bac:	460e      	mov	r6, r1
 8006bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006bb2:	f7ff fa6b 	bl	800608c <_malloc_r>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	b140      	cbz	r0, 8006bcc <__sfmoreglue+0x28>
 8006bba:	2100      	movs	r1, #0
 8006bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8006bc0:	300c      	adds	r0, #12
 8006bc2:	60a0      	str	r0, [r4, #8]
 8006bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bc8:	f7fd fb44 	bl	8004254 <memset>
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bd70      	pop	{r4, r5, r6, pc}

08006bd0 <__sfp_lock_acquire>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sfp_lock_acquire+0x8>)
 8006bd2:	f000 b8b3 	b.w	8006d3c <__retarget_lock_acquire_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	200017a5 	.word	0x200017a5

08006bdc <__sfp_lock_release>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	; (8006be4 <__sfp_lock_release+0x8>)
 8006bde:	f000 b8ae 	b.w	8006d3e <__retarget_lock_release_recursive>
 8006be2:	bf00      	nop
 8006be4:	200017a5 	.word	0x200017a5

08006be8 <__sinit_lock_acquire>:
 8006be8:	4801      	ldr	r0, [pc, #4]	; (8006bf0 <__sinit_lock_acquire+0x8>)
 8006bea:	f000 b8a7 	b.w	8006d3c <__retarget_lock_acquire_recursive>
 8006bee:	bf00      	nop
 8006bf0:	200017a6 	.word	0x200017a6

08006bf4 <__sinit_lock_release>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	; (8006bfc <__sinit_lock_release+0x8>)
 8006bf6:	f000 b8a2 	b.w	8006d3e <__retarget_lock_release_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	200017a6 	.word	0x200017a6

08006c00 <__sinit>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	4604      	mov	r4, r0
 8006c04:	f7ff fff0 	bl	8006be8 <__sinit_lock_acquire>
 8006c08:	69a3      	ldr	r3, [r4, #24]
 8006c0a:	b11b      	cbz	r3, 8006c14 <__sinit+0x14>
 8006c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c10:	f7ff bff0 	b.w	8006bf4 <__sinit_lock_release>
 8006c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c18:	6523      	str	r3, [r4, #80]	; 0x50
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <__sinit+0x68>)
 8006c1c:	4a13      	ldr	r2, [pc, #76]	; (8006c6c <__sinit+0x6c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c22:	42a3      	cmp	r3, r4
 8006c24:	bf08      	it	eq
 8006c26:	2301      	moveq	r3, #1
 8006c28:	4620      	mov	r0, r4
 8006c2a:	bf08      	it	eq
 8006c2c:	61a3      	streq	r3, [r4, #24]
 8006c2e:	f000 f81f 	bl	8006c70 <__sfp>
 8006c32:	6060      	str	r0, [r4, #4]
 8006c34:	4620      	mov	r0, r4
 8006c36:	f000 f81b 	bl	8006c70 <__sfp>
 8006c3a:	60a0      	str	r0, [r4, #8]
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 f817 	bl	8006c70 <__sfp>
 8006c42:	2200      	movs	r2, #0
 8006c44:	2104      	movs	r1, #4
 8006c46:	60e0      	str	r0, [r4, #12]
 8006c48:	6860      	ldr	r0, [r4, #4]
 8006c4a:	f7ff ff81 	bl	8006b50 <std>
 8006c4e:	2201      	movs	r2, #1
 8006c50:	2109      	movs	r1, #9
 8006c52:	68a0      	ldr	r0, [r4, #8]
 8006c54:	f7ff ff7c 	bl	8006b50 <std>
 8006c58:	2202      	movs	r2, #2
 8006c5a:	2112      	movs	r1, #18
 8006c5c:	68e0      	ldr	r0, [r4, #12]
 8006c5e:	f7ff ff77 	bl	8006b50 <std>
 8006c62:	2301      	movs	r3, #1
 8006c64:	61a3      	str	r3, [r4, #24]
 8006c66:	e7d1      	b.n	8006c0c <__sinit+0xc>
 8006c68:	080072b4 	.word	0x080072b4
 8006c6c:	08006b99 	.word	0x08006b99

08006c70 <__sfp>:
 8006c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c72:	4607      	mov	r7, r0
 8006c74:	f7ff ffac 	bl	8006bd0 <__sfp_lock_acquire>
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <__sfp+0x84>)
 8006c7a:	681e      	ldr	r6, [r3, #0]
 8006c7c:	69b3      	ldr	r3, [r6, #24]
 8006c7e:	b913      	cbnz	r3, 8006c86 <__sfp+0x16>
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff ffbd 	bl	8006c00 <__sinit>
 8006c86:	3648      	adds	r6, #72	; 0x48
 8006c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	d503      	bpl.n	8006c98 <__sfp+0x28>
 8006c90:	6833      	ldr	r3, [r6, #0]
 8006c92:	b30b      	cbz	r3, 8006cd8 <__sfp+0x68>
 8006c94:	6836      	ldr	r6, [r6, #0]
 8006c96:	e7f7      	b.n	8006c88 <__sfp+0x18>
 8006c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c9c:	b9d5      	cbnz	r5, 8006cd4 <__sfp+0x64>
 8006c9e:	4b16      	ldr	r3, [pc, #88]	; (8006cf8 <__sfp+0x88>)
 8006ca0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ca4:	60e3      	str	r3, [r4, #12]
 8006ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8006ca8:	f000 f847 	bl	8006d3a <__retarget_lock_init_recursive>
 8006cac:	f7ff ff96 	bl	8006bdc <__sfp_lock_release>
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006cb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cbc:	6025      	str	r5, [r4, #0]
 8006cbe:	61a5      	str	r5, [r4, #24]
 8006cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cc4:	f7fd fac6 	bl	8004254 <memset>
 8006cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd4:	3468      	adds	r4, #104	; 0x68
 8006cd6:	e7d9      	b.n	8006c8c <__sfp+0x1c>
 8006cd8:	2104      	movs	r1, #4
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f7ff ff62 	bl	8006ba4 <__sfmoreglue>
 8006ce0:	4604      	mov	r4, r0
 8006ce2:	6030      	str	r0, [r6, #0]
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d1d5      	bne.n	8006c94 <__sfp+0x24>
 8006ce8:	f7ff ff78 	bl	8006bdc <__sfp_lock_release>
 8006cec:	230c      	movs	r3, #12
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	e7ee      	b.n	8006cd0 <__sfp+0x60>
 8006cf2:	bf00      	nop
 8006cf4:	080072b4 	.word	0x080072b4
 8006cf8:	ffff0001 	.word	0xffff0001

08006cfc <_fwalk_reent>:
 8006cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d00:	4606      	mov	r6, r0
 8006d02:	4688      	mov	r8, r1
 8006d04:	2700      	movs	r7, #0
 8006d06:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8006d12:	d505      	bpl.n	8006d20 <_fwalk_reent+0x24>
 8006d14:	6824      	ldr	r4, [r4, #0]
 8006d16:	2c00      	cmp	r4, #0
 8006d18:	d1f7      	bne.n	8006d0a <_fwalk_reent+0xe>
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d20:	89ab      	ldrh	r3, [r5, #12]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d907      	bls.n	8006d36 <_fwalk_reent+0x3a>
 8006d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	d003      	beq.n	8006d36 <_fwalk_reent+0x3a>
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4630      	mov	r0, r6
 8006d32:	47c0      	blx	r8
 8006d34:	4307      	orrs	r7, r0
 8006d36:	3568      	adds	r5, #104	; 0x68
 8006d38:	e7e9      	b.n	8006d0e <_fwalk_reent+0x12>

08006d3a <__retarget_lock_init_recursive>:
 8006d3a:	4770      	bx	lr

08006d3c <__retarget_lock_acquire_recursive>:
 8006d3c:	4770      	bx	lr

08006d3e <__retarget_lock_release_recursive>:
 8006d3e:	4770      	bx	lr

08006d40 <__swhatbuf_r>:
 8006d40:	b570      	push	{r4, r5, r6, lr}
 8006d42:	460e      	mov	r6, r1
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	4614      	mov	r4, r2
 8006d4a:	2900      	cmp	r1, #0
 8006d4c:	461d      	mov	r5, r3
 8006d4e:	b096      	sub	sp, #88	; 0x58
 8006d50:	da08      	bge.n	8006d64 <__swhatbuf_r+0x24>
 8006d52:	2200      	movs	r2, #0
 8006d54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	061a      	lsls	r2, r3, #24
 8006d5c:	d410      	bmi.n	8006d80 <__swhatbuf_r+0x40>
 8006d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d62:	e00e      	b.n	8006d82 <__swhatbuf_r+0x42>
 8006d64:	466a      	mov	r2, sp
 8006d66:	f000 f903 	bl	8006f70 <_fstat_r>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	dbf1      	blt.n	8006d52 <__swhatbuf_r+0x12>
 8006d6e:	9a01      	ldr	r2, [sp, #4]
 8006d70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d78:	425a      	negs	r2, r3
 8006d7a:	415a      	adcs	r2, r3
 8006d7c:	602a      	str	r2, [r5, #0]
 8006d7e:	e7ee      	b.n	8006d5e <__swhatbuf_r+0x1e>
 8006d80:	2340      	movs	r3, #64	; 0x40
 8006d82:	2000      	movs	r0, #0
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	b016      	add	sp, #88	; 0x58
 8006d88:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d8c <__smakebuf_r>:
 8006d8c:	898b      	ldrh	r3, [r1, #12]
 8006d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d90:	079d      	lsls	r5, r3, #30
 8006d92:	4606      	mov	r6, r0
 8006d94:	460c      	mov	r4, r1
 8006d96:	d507      	bpl.n	8006da8 <__smakebuf_r+0x1c>
 8006d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	6123      	str	r3, [r4, #16]
 8006da0:	2301      	movs	r3, #1
 8006da2:	6163      	str	r3, [r4, #20]
 8006da4:	b002      	add	sp, #8
 8006da6:	bd70      	pop	{r4, r5, r6, pc}
 8006da8:	466a      	mov	r2, sp
 8006daa:	ab01      	add	r3, sp, #4
 8006dac:	f7ff ffc8 	bl	8006d40 <__swhatbuf_r>
 8006db0:	9900      	ldr	r1, [sp, #0]
 8006db2:	4605      	mov	r5, r0
 8006db4:	4630      	mov	r0, r6
 8006db6:	f7ff f969 	bl	800608c <_malloc_r>
 8006dba:	b948      	cbnz	r0, 8006dd0 <__smakebuf_r+0x44>
 8006dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dc0:	059a      	lsls	r2, r3, #22
 8006dc2:	d4ef      	bmi.n	8006da4 <__smakebuf_r+0x18>
 8006dc4:	f023 0303 	bic.w	r3, r3, #3
 8006dc8:	f043 0302 	orr.w	r3, r3, #2
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	e7e3      	b.n	8006d98 <__smakebuf_r+0xc>
 8006dd0:	4b0d      	ldr	r3, [pc, #52]	; (8006e08 <__smakebuf_r+0x7c>)
 8006dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	6020      	str	r0, [r4, #0]
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	81a3      	strh	r3, [r4, #12]
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	6120      	str	r0, [r4, #16]
 8006de2:	6163      	str	r3, [r4, #20]
 8006de4:	9b01      	ldr	r3, [sp, #4]
 8006de6:	b15b      	cbz	r3, 8006e00 <__smakebuf_r+0x74>
 8006de8:	4630      	mov	r0, r6
 8006dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dee:	f000 f8d1 	bl	8006f94 <_isatty_r>
 8006df2:	b128      	cbz	r0, 8006e00 <__smakebuf_r+0x74>
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	f043 0301 	orr.w	r3, r3, #1
 8006dfe:	81a3      	strh	r3, [r4, #12]
 8006e00:	89a0      	ldrh	r0, [r4, #12]
 8006e02:	4305      	orrs	r5, r0
 8006e04:	81a5      	strh	r5, [r4, #12]
 8006e06:	e7cd      	b.n	8006da4 <__smakebuf_r+0x18>
 8006e08:	08006b99 	.word	0x08006b99

08006e0c <_malloc_usable_size_r>:
 8006e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e10:	1f18      	subs	r0, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bfbc      	itt	lt
 8006e16:	580b      	ldrlt	r3, [r1, r0]
 8006e18:	18c0      	addlt	r0, r0, r3
 8006e1a:	4770      	bx	lr

08006e1c <_raise_r>:
 8006e1c:	291f      	cmp	r1, #31
 8006e1e:	b538      	push	{r3, r4, r5, lr}
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	d904      	bls.n	8006e30 <_raise_r+0x14>
 8006e26:	2316      	movs	r3, #22
 8006e28:	6003      	str	r3, [r0, #0]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e32:	b112      	cbz	r2, 8006e3a <_raise_r+0x1e>
 8006e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e38:	b94b      	cbnz	r3, 8006e4e <_raise_r+0x32>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 f830 	bl	8006ea0 <_getpid_r>
 8006e40:	462a      	mov	r2, r5
 8006e42:	4601      	mov	r1, r0
 8006e44:	4620      	mov	r0, r4
 8006e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e4a:	f000 b817 	b.w	8006e7c <_kill_r>
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d00a      	beq.n	8006e68 <_raise_r+0x4c>
 8006e52:	1c59      	adds	r1, r3, #1
 8006e54:	d103      	bne.n	8006e5e <_raise_r+0x42>
 8006e56:	2316      	movs	r3, #22
 8006e58:	6003      	str	r3, [r0, #0]
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	e7e7      	b.n	8006e2e <_raise_r+0x12>
 8006e5e:	2400      	movs	r4, #0
 8006e60:	4628      	mov	r0, r5
 8006e62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e66:	4798      	blx	r3
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e7e0      	b.n	8006e2e <_raise_r+0x12>

08006e6c <raise>:
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <raise+0xc>)
 8006e6e:	4601      	mov	r1, r0
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f7ff bfd3 	b.w	8006e1c <_raise_r>
 8006e76:	bf00      	nop
 8006e78:	2000004c 	.word	0x2000004c

08006e7c <_kill_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4d06      	ldr	r5, [pc, #24]	; (8006e9c <_kill_r+0x20>)
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	f000 f8d7 	bl	800703c <_kill>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d102      	bne.n	8006e98 <_kill_r+0x1c>
 8006e92:	682b      	ldr	r3, [r5, #0]
 8006e94:	b103      	cbz	r3, 8006e98 <_kill_r+0x1c>
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200017a0 	.word	0x200017a0

08006ea0 <_getpid_r>:
 8006ea0:	f000 b8bc 	b.w	800701c <_getpid>

08006ea4 <__sread>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eac:	f000 f894 	bl	8006fd8 <_read_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	bfab      	itete	ge
 8006eb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8006eb8:	181b      	addge	r3, r3, r0
 8006eba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ebe:	bfac      	ite	ge
 8006ec0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ec2:	81a3      	strhlt	r3, [r4, #12]
 8006ec4:	bd10      	pop	{r4, pc}

08006ec6 <__swrite>:
 8006ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eca:	461f      	mov	r7, r3
 8006ecc:	898b      	ldrh	r3, [r1, #12]
 8006ece:	4605      	mov	r5, r0
 8006ed0:	05db      	lsls	r3, r3, #23
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	4616      	mov	r6, r2
 8006ed6:	d505      	bpl.n	8006ee4 <__swrite+0x1e>
 8006ed8:	2302      	movs	r3, #2
 8006eda:	2200      	movs	r2, #0
 8006edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee0:	f000 f868 	bl	8006fb4 <_lseek_r>
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	4632      	mov	r2, r6
 8006ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	4628      	mov	r0, r5
 8006ef0:	463b      	mov	r3, r7
 8006ef2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006efa:	f000 b817 	b.w	8006f2c <_write_r>

08006efe <__sseek>:
 8006efe:	b510      	push	{r4, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f06:	f000 f855 	bl	8006fb4 <_lseek_r>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	bf15      	itete	ne
 8006f10:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f1a:	81a3      	strheq	r3, [r4, #12]
 8006f1c:	bf18      	it	ne
 8006f1e:	81a3      	strhne	r3, [r4, #12]
 8006f20:	bd10      	pop	{r4, pc}

08006f22 <__sclose>:
 8006f22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f26:	f000 b813 	b.w	8006f50 <_close_r>
	...

08006f2c <_write_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	2200      	movs	r2, #0
 8006f36:	4d05      	ldr	r5, [pc, #20]	; (8006f4c <_write_r+0x20>)
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f000 f8a4 	bl	8007088 <_write>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_write_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_write_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	200017a0 	.word	0x200017a0

08006f50 <_close_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	2300      	movs	r3, #0
 8006f54:	4d05      	ldr	r5, [pc, #20]	; (8006f6c <_close_r+0x1c>)
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f000 f84e 	bl	8006ffc <_close>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_close_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_close_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	200017a0 	.word	0x200017a0

08006f70 <_fstat_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	2300      	movs	r3, #0
 8006f74:	4d06      	ldr	r5, [pc, #24]	; (8006f90 <_fstat_r+0x20>)
 8006f76:	4604      	mov	r4, r0
 8006f78:	4608      	mov	r0, r1
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	602b      	str	r3, [r5, #0]
 8006f7e:	f000 f845 	bl	800700c <_fstat>
 8006f82:	1c43      	adds	r3, r0, #1
 8006f84:	d102      	bne.n	8006f8c <_fstat_r+0x1c>
 8006f86:	682b      	ldr	r3, [r5, #0]
 8006f88:	b103      	cbz	r3, 8006f8c <_fstat_r+0x1c>
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	bf00      	nop
 8006f90:	200017a0 	.word	0x200017a0

08006f94 <_isatty_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	2300      	movs	r3, #0
 8006f98:	4d05      	ldr	r5, [pc, #20]	; (8006fb0 <_isatty_r+0x1c>)
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f000 f844 	bl	800702c <_isatty>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_isatty_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_isatty_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200017a0 	.word	0x200017a0

08006fb4 <_lseek_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	4611      	mov	r1, r2
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	4d05      	ldr	r5, [pc, #20]	; (8006fd4 <_lseek_r+0x20>)
 8006fc0:	602a      	str	r2, [r5, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f000 f842 	bl	800704c <_lseek>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_lseek_r+0x1e>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_lseek_r+0x1e>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	200017a0 	.word	0x200017a0

08006fd8 <_read_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4604      	mov	r4, r0
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	4d05      	ldr	r5, [pc, #20]	; (8006ff8 <_read_r+0x20>)
 8006fe4:	602a      	str	r2, [r5, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f000 f838 	bl	800705c <_read>
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d102      	bne.n	8006ff6 <_read_r+0x1e>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	b103      	cbz	r3, 8006ff6 <_read_r+0x1e>
 8006ff4:	6023      	str	r3, [r4, #0]
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	200017a0 	.word	0x200017a0

08006ffc <_close>:
 8006ffc:	2258      	movs	r2, #88	; 0x58
 8006ffe:	4b02      	ldr	r3, [pc, #8]	; (8007008 <_close+0xc>)
 8007000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	4770      	bx	lr
 8007008:	200017a0 	.word	0x200017a0

0800700c <_fstat>:
 800700c:	2258      	movs	r2, #88	; 0x58
 800700e:	4b02      	ldr	r3, [pc, #8]	; (8007018 <_fstat+0xc>)
 8007010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	4770      	bx	lr
 8007018:	200017a0 	.word	0x200017a0

0800701c <_getpid>:
 800701c:	2258      	movs	r2, #88	; 0x58
 800701e:	4b02      	ldr	r3, [pc, #8]	; (8007028 <_getpid+0xc>)
 8007020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	4770      	bx	lr
 8007028:	200017a0 	.word	0x200017a0

0800702c <_isatty>:
 800702c:	2258      	movs	r2, #88	; 0x58
 800702e:	4b02      	ldr	r3, [pc, #8]	; (8007038 <_isatty+0xc>)
 8007030:	2000      	movs	r0, #0
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	200017a0 	.word	0x200017a0

0800703c <_kill>:
 800703c:	2258      	movs	r2, #88	; 0x58
 800703e:	4b02      	ldr	r3, [pc, #8]	; (8007048 <_kill+0xc>)
 8007040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007044:	601a      	str	r2, [r3, #0]
 8007046:	4770      	bx	lr
 8007048:	200017a0 	.word	0x200017a0

0800704c <_lseek>:
 800704c:	2258      	movs	r2, #88	; 0x58
 800704e:	4b02      	ldr	r3, [pc, #8]	; (8007058 <_lseek+0xc>)
 8007050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	4770      	bx	lr
 8007058:	200017a0 	.word	0x200017a0

0800705c <_read>:
 800705c:	2258      	movs	r2, #88	; 0x58
 800705e:	4b02      	ldr	r3, [pc, #8]	; (8007068 <_read+0xc>)
 8007060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	4770      	bx	lr
 8007068:	200017a0 	.word	0x200017a0

0800706c <_sbrk>:
 800706c:	4a04      	ldr	r2, [pc, #16]	; (8007080 <_sbrk+0x14>)
 800706e:	4603      	mov	r3, r0
 8007070:	6811      	ldr	r1, [r2, #0]
 8007072:	b909      	cbnz	r1, 8007078 <_sbrk+0xc>
 8007074:	4903      	ldr	r1, [pc, #12]	; (8007084 <_sbrk+0x18>)
 8007076:	6011      	str	r1, [r2, #0]
 8007078:	6810      	ldr	r0, [r2, #0]
 800707a:	4403      	add	r3, r0
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4770      	bx	lr
 8007080:	200017a8 	.word	0x200017a8
 8007084:	200017b0 	.word	0x200017b0

08007088 <_write>:
 8007088:	2258      	movs	r2, #88	; 0x58
 800708a:	4b02      	ldr	r3, [pc, #8]	; (8007094 <_write+0xc>)
 800708c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	4770      	bx	lr
 8007094:	200017a0 	.word	0x200017a0

08007098 <_exit>:
 8007098:	e7fe      	b.n	8007098 <_exit>
	...

0800709c <_init>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr

080070a8 <_fini>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	bf00      	nop
 80070ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ae:	bc08      	pop	{r3}
 80070b0:	469e      	mov	lr, r3
 80070b2:	4770      	bx	lr
